<?xml version="1.0"?>
<project name="Ferda FrontEnd" default="build" basedir=".">
	<description>Builds the user interface for the Ferda system</description>
	<property name="addInsBuild.dir" value="${path::combine(build.dir,'AddIns')}"/>
	<target name="build">	
<mkdir dir="${addInsBuild.dir}" />
		<nant buildfile="${path::combine('AddIns','default.build')}" target="buildmain"/>
	
		<uptodate property="resources.uptodate">
			<targetfiles>
				<include name="*.resources" />
			</targetfiles>
			<sourcefiles>
				<include name="*.resx" />
			</sourcefiles>
		</uptodate>
		<if test="${framework::get-target-framework()=='mono-2.0'}">
			<property name="defines" value="MONO"/>
			<if test="${not(resources.uptodate)}">
				<exec program="resgen2">
					<arg value="/useSourcePath" />
					<arg value="/compile" />
					<arg value="FerdaPrescreen.resx" />
					<arg value="Localization_cs-CZ.resx" />
					<arg value="Localization_en-US.resx" />
				</exec>
			</if>
		</if>
		<if test="${framework::get-target-framework()!='mono-2.0'}">
			<property name="defines" value=""/>
			<if test="${not(resources.uptodate)}">
				<resgen usesourcepath="true">
					<resources>
						<include name="*.resx" />
					</resources>
				</resgen>
			</if>
		</if>
		<csc target="winexe" define="${defines}" output="${path::combine(build.dir,'FerdaFrontEnd.exe')}" doc="${path::combine(build.dir,'FerdaFrontEnd.xml')}" debug="${debug}" optimize="${optimize}" win32icon="FerdaFrontEnd.ico" keyfile="FerdaFrontEnd.snk">
			<sources>
				<include name="**.cs" />
				<exclude name="AddIns/**.cs" />
			</sources>
			<resources prefix="Ferda.FrontEnd">
				<include name="*.resources" />
			</resources>
			<references>
        <include name="${path::combine(lib.dir,'SharpVectorXml.dll')}" />
        <include name="${path::combine(lib.dir,'SharpVectorScripting.dll')}" />
        <include name="${path::combine(lib.dir,'SharpVectorRenderingEngine.dll')}" />
        <include name="${path::combine(lib.dir,'SharpVectorObjectModel.dll')}" />
        <include name="${path::combine(lib.dir,'SharpVectorCss.dll')}" />        
        
				<include name="System.dll" />
				<include name="System.Data.dll" />
				<include name="System.Design.dll" />
				<include name="System.Drawing.dll" />
				<include name="System.Windows.Forms.dll" />
				<include name="System.XML.dll" />
				<include name="${path::combine(build.dir,'FerdaProjectManager.dll')}" />
				<include name="${path::combine(build.dir,'FerdaModulesManager.dll')}" />
				<include name="${path::combine(build.dir,'FrontEndAddInHelper.dll')}" />
				<include name="${path::combine(build.dir,'FerdaBase.dll')}" />
        <include name="${path::combine(build.dir,'FerdaNetworkArchiveBase.dll')}" />

				<include name="${path::combine(build.dir,'NAFGraph.dll')}" />
				<include name="${path::combine(build.dir,'DockDotNET.dll')}" />
				<include name="${path::combine(lib.dir,'Ice.dll')}" />
  		</references>
		</csc>
    
    <nant buildfile="${path::combine('AddIns','default.build')}" target="buildaddins"/>


    <copy todir="${build.dir}">
      <fileset basedir=".">
        <include name="*.bmp" />
        <include name="*.ico" />
        <include name="*.svg" />
      </fileset>
    </copy>
    
		<copy todir="${path::combine(build.dir, 'Icons')}">
			<fileset basedir="./Icons">
				<include name="*.ico" />
			</fileset>
		</copy>

    <copy todir="${path::combine(build.dir, 'Help')}">
      <fileset basedir="./Help">
        <include name="*.*" /> 
      </fileset>
    </copy>

    <copy todir="${path::combine(build.dir, 'dtd')}">
      <fileset basedir="${path::combine(lib.dir,'dtd')}">
        <include name="*.dtd" />
      </fileset>
    </copy>    
		
	</target>
	<target name="clean">
		<delete failonerror="false">
			<fileset basedir="${build.dir}">
				<include name="FrontEndAddInHelper.dll" />
				<include name="FerdaFrontEnd.exe" />
			</fileset>
		</delete>
		<delete dir="${addInsBuild.dir}" failonerror="false" if="${directory::exists(addInsBuild.dir)}"/>
	</target>
</project>
