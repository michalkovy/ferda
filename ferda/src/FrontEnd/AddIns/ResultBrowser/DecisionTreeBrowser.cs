// DecisionTreeBrowser.cs - Browser of decision trees generated by ETree procedure
//
// Author: Martin Ralbovský <martin.ralbovsky@gmail.com>
//
// Copyright (c) 2007 Martin Ralbovský 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Resources;
using System.Windows.Forms;
using Ferda.Guha.MiningProcessor.Results;

namespace Ferda.FrontEnd.AddIns.ResultBrowser
{
    /// <summary>
    /// Browser of decision trees generated by the ETree procedure.
    /// Now it shows the IF representations of the decision trees.
    /// </summary>
    public partial class DecisionTreeBrowser : UserControl
    {
        #region Private fields

        /// <summary>
        /// The list view to show trees
        /// </summary>
        private ListView treesListView;

        /// <summary>
        /// Rich text box where IF representations of the decision
        /// trees are shown. 
        /// </summary>
        private RichTextBox treesRTB;

        /// <summary>
        /// The If representations of the decision trees.
        /// </summary>
        private SerializableDecisionTree[] decisionTrees;

        /// <summary>
        /// Resource manager of the control
        /// </summary>
        private ResourceManager resManager;

        #endregion

        #region Constructor

        /// <summary>
        /// Default constructor of the class
        /// </summary>
        /// <param name="serializedResult">
        /// Result of ETree procedure in a serialized form</param>
        public DecisionTreeBrowser(string serializedResult, ResourceManager resManager)
        {
            this.resManager = resManager;

            DecisionTreeResult result =
                DecisionTreeResult.Deserialize(serializedResult);

            decisionTrees = result.decisionTrees;
            InitializeComponent();
            FillListView();

            treesListView.ItemSelectionChanged += new 
                ListViewItemSelectionChangedEventHandler(treesListView_ItemSelectionChanged);
        }

        #endregion

        /// <summary>
        /// Fills the list view with numbers of hypotheses
        /// </summary>
        private void FillListView()
        {
            //adding a column
            treesListView.Columns.Clear();
            ColumnHeader header = new ColumnHeader();
            header.Text = resManager.GetString("HypothesisId");
            treesListView.Columns.Add(header);
            treesListView.Columns[0].Width = treesListView.Width;

            for (int i = 0; i < decisionTrees.Length; i++)
            {
                ListViewItem item = new ListViewItem();
                item.Text = i.ToString();
                treesListView.Items.Add(item);
            }
        }

        #region Localization

        /// <summary>
        /// Method to change l10n.
        /// </summary>
        private void ChangeLocale()
        {
            FillListView();
        }

        #endregion

        #region Events

        /// <summary>
        /// Event occurs when user changes selection of item in the list view
        /// containing numbers of hypotheses.
        /// </summary>
        /// <param name="sender">Sender of the event</param>
        /// <param name="e">The event parameters</param>
        void treesListView_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            if (e.IsSelected == true)
            {
                treesRTB.Text = decisionTrees[e.ItemIndex].IfRepresentation;
            }
        }

        #endregion
    }
}
