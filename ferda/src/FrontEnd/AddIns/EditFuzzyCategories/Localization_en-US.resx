<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddFC" xml:space="preserve">
    <value>Add fuzzy category</value>
  </data>
  <data name="ATB" xml:space="preserve">
    <value>A (start of the trapeziod):</value>
  </data>
  <data name="BTB" xml:space="preserve">
    <value>B (end of the trapezoid):</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CTB" xml:space="preserve">
    <value>C (descending peak):</value>
  </data>
  <data name="DTB" xml:space="preserve">
    <value>D (ascending peak):</value>
  </data>
  <data name="EditFC" xml:space="preserve">
    <value>Edit fuzzy category</value>
  </data>
  <data name="EditFuzzyCategories" xml:space="preserve">
    <value>Edit fuzzy categories</value>
  </data>
  <data name="EditFuzzyCategoriesAbout" xml:space="preserve">
    <value>Modul for editing fuzzy categories</value>
  </data>
  <data name="ExistingFuzzyCategories" xml:space="preserve">
    <value>Existing fuzzy categories</value>
  </data>
  <data name="NewFCName" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="NewFuzzyCategory" xml:space="preserve">
    <value>New fuzzy category</value>
  </data>
  <data name="RemoveFC" xml:space="preserve">
    <value>Remove fuzzy category</value>
  </data>
  <data name="ABiggerThanMax" xml:space="preserve">
    <value>The A value of the trapezoid should be less than maximal value of the attribute</value>
  </data>
  <data name="ADCB" xml:space="preserve">
    <value>The fuzzy set must be of trapeziodal shape, that is A &lt; D &lt; C &lt; B.</value>
  </data>
  <data name="BLowerThanMin" xml:space="preserve">
    <value>The B value of the trapezoid should be bigger than minimal value of the attribute</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="NoName" xml:space="preserve">
    <value>The name of the new fuzzy category is not set</value>
  </data>
  <data name="SaveFC" xml:space="preserve">
    <value>Save fuzzy category</value>
  </data>
  <data name="TrapezoidInvalidFormat" xml:space="preserve">
    <value>The values A, B, C, D are either not filled, or in invalid non-numerical format</value>
  </data>
  <data name="AlreadyContainsName" xml:space="preserve">
    <value>A fuzzy category having the same name is already defined. Names of fuzzy categories have to be unique.</value>
  </data>
  <data name="AlreadyContainsValues" xml:space="preserve">
    <value>A trapezoidal fuzzy category having the same values is already defined. Please change the values of the trapezoid.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="ItemNotSelected" xml:space="preserve">
    <value>No fuzzy category is selected</value>
  </data>
  <data name="LCFAR" xml:space="preserve">
    <value>LCFAR compatibility</value>
  </data>
  <data name="Overlapping" xml:space="preserve">
    <value>The peak value of the new trapezoid is overlapping with peak value of other already defined trapeziod. This is not allowed in LFCAR.</value>
  </data>
</root>