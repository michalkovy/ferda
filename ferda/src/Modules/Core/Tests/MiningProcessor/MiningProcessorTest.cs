// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Ferda.Guha.MiningProcessor;
using Ferda.Guha.MiningProcessor.BitStrings;
using Ferda.Guha.MiningProcessor.Generation;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests.MiningProcessor
{
    /// <summary>
    ///This is a test class for Ferda.Guha.MiningProcessor.Generation.LeftCuts and is intended
    ///to contain all Ferda.Guha.MiningProcessor.Generation.LeftCuts Unit Tests
    ///</summary>
    [TestClass()]
    public class MiningProcessorTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get { return testContextInstance; }
            set { testContextInstance = value; }
        }

        private string writeOutput(EntityEnumerableCoefficient entity)
        {
            string result = "";
            long count = 0;
            foreach (IBitString s in entity)
            {
                count++;
                result += s.Identifier.ToString() + "\n";
                result += s.ToString() + "\n";
            }
            if (entity.TotalCount != count)
                Debugger.Break();
            Assert.AreEqual(entity.TotalCount, count);
            return result;
        }

        private string writeOutput(IEntityEnumerator entity)
        {
            string result = "";
            //long count = 0;
            foreach (IBitString s in entity)
            {
                //count++;
                result += s.Identifier.ToString() + "\n";
                result += s.ToString() + "\n";
            }
            //if (entity.TotalCount != count)
            //    Debugger.Break();
            //Assert.AreEqual(entity.TotalCount, count);
            return result;
        }

        private Dictionary<string, CoefficientSetting> _coefficients = new Dictionary<string, CoefficientSetting>();

        private void CreateCS1(CoefficientTypeEnum type, int minLen, int maxLen)
        {
            _coefficients.Add(
                type.ToString() + ": " + minLen.ToString() + " - " + maxLen.ToString()
                + " (A-P)",
            new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr1Id),
                ImportanceEnum.Basic,
                null,
                minLen,
                maxLen,
                type)
                );
        }

        private void CreateCS2(CoefficientTypeEnum type, int minLen, int maxLen)
        {
            _coefficients.Add(
                type.ToString() + ": " + minLen.ToString() + " - " + maxLen.ToString()
                + " (A)",
            new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr2Id),
                ImportanceEnum.Basic,
                null,
                minLen,
                maxLen,
                type)
                );
        }

        private void CreateCS1s(CoefficientTypeEnum type)
        {
            CreateCS1(type, 1, 1);
            CreateCS1(type, 1, 3);
            CreateCS1(type, 3, 3);
            CreateCS1(type, 2, 15);
            CreateCS1(type, 3, 16);
            CreateCS1(type, 4, 17);
        }

        private void CreateCS2s(CoefficientTypeEnum type)
        {
            CreateCS2(type, 1, 1);
            CreateCS2(type, 1, 3);
        }

        private void CreateCSss()
        {
            CreateCS1s(CoefficientTypeEnum.LeftCuts);
            CreateCS1s(CoefficientTypeEnum.RightCuts);
            CreateCS1s(CoefficientTypeEnum.Cuts);
            CreateCS1s(CoefficientTypeEnum.Intervals);
            CreateCS1s(CoefficientTypeEnum.CyclicIntervals);

            CreateCS2s(CoefficientTypeEnum.LeftCuts);
            CreateCS2s(CoefficientTypeEnum.RightCuts);
            CreateCS2s(CoefficientTypeEnum.Cuts);
            CreateCS2s(CoefficientTypeEnum.Intervals);
            CreateCS2s(CoefficientTypeEnum.CyclicIntervals);
        }

        public static string coefficientAttributeId = "";

        /// <summary>
        ///A test for Coefficients
        ///</summary>
        [TestMethod()]
        public void CoefficientsTest()
        {
            StringBuilder result = new StringBuilder();

            CreateCSss();

            foreach (KeyValuePair<string, CoefficientSetting> pair in _coefficients)
            {
                result.AppendLine(pair.Key);
                result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(pair.Value)));
                result.AppendLine("-------------------------------");
            }

            string r = result.ToString();
            Debug.Write(r);

            //TODO test subsets
        }

        /// <summary>
        /// A test for single operand entities.
        /// </summary>
        [TestMethod()]
        public void SingleOperandTest()
        {
            StringBuilder result = new StringBuilder();

            CoefficientSettingI coef = new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr1Id),
                ImportanceEnum.Basic,
                null,
                1,
                3,
                CoefficientTypeEnum.Cuts
                );

            result.AppendLine("Cuts: 1 - 3 (A-P) ");
            result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(coef)));
            result.AppendLine("-------------------------------");

            NegationSettingI neg = new NegationSettingI(
                    new GuidStruct((new Guid()).ToString()),
                    ImportanceEnum.Basic,
                    coef);

            result.AppendLine("Negation of Cuts: 1 - 3 (A-P) ");
            result.AppendLine(writeOutput((IEntityEnumerator)Factory.Create(neg)));
            result.AppendLine("-------------------------------");

            BothSignsSettingI both = new BothSignsSettingI(
                    new GuidStruct((new Guid()).ToString()),
                    ImportanceEnum.Basic,
                    coef);

            result.AppendLine("Both signs of Cuts: 1 - 3 (A-P) ");
            result.AppendLine(writeOutput((IEntityEnumerator)Factory.Create(both)));
            result.AppendLine("-------------------------------");

            string r = result.ToString();
            Debug.Write(r);
        }

        /// <summary>
        /// A test for mutli operand entities.
        /// </summary>
        [TestMethod()]
        public void MultiOperandTest()
        {
            bool traceInput = false;
            StringBuilder result = new StringBuilder();

            CoefficientSettingI coef = new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr1Id),
                ImportanceEnum.Basic,
                null,
                1,
                3,
                CoefficientTypeEnum.Cuts
                );

            if (traceInput)
            {
                result.AppendLine("Cuts: 1 - 3 (A-P) ");
                result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(coef)));
                result.AppendLine("-------------------------------");
            }

            CoefficientSettingI coef2 = new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr3Id),
                ImportanceEnum.Basic,
                null,
                3,
                3,
                CoefficientTypeEnum.Intervals
                );

            if (traceInput)
            {
                result.AppendLine("Intervals: 3 - 3 (1-8) ");
                result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(coef2)));
                result.AppendLine("-------------------------------");
            }
            
            //NegationSettingI neg = new NegationSettingI(
            //        new GuidStruct((new Guid()).ToString()),
            //        ImportanceEnum.Basic,
            //        coef2);

            //result.AppendLine("Negation of Intervals: 3 - 3 (A-P) ");
            //result.AppendLine(writeOutput((IEntityEnumerator)Factory.Create(neg)));
            //result.AppendLine("-------------------------------");

            DisjunctionSettingI disj = new DisjunctionSettingI(
                    new GuidStruct((new Guid()).ToString()),
                    ImportanceEnum.Basic,
                    new IEntitySetting[]
                        {
                            coef,
                            coef2
                        }
                    ,
                    new GuidStruct[][] { },
                    1,
                    3
                );

            result.AppendLine("Disjunction(1-3) of [Cuts: 1 - 3 (A-P)] and [Intervals: 3 - 3 (1-8)]: ");
            result.AppendLine(writeOutput((IEntityEnumerator)Factory.Create(disj)));
            result.AppendLine("-------------------------------");

            string r = result.ToString();
            Debug.Write(r);
        }
    }
}