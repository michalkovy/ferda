// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Ferda.Guha.MiningProcessor;
using Ferda.Guha.MiningProcessor.BitStrings;
using Ferda.Guha.MiningProcessor.Generation;
using Ferda.Modules;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests.MiningProcessor
{
    /// <summary>
    ///This is a test class for Ferda.Guha.MiningProcessor.Generation.LeftCuts and is intended
    ///to contain all Ferda.Guha.MiningProcessor.Generation.LeftCuts Unit Tests
    ///</summary>
    [TestClass()]
    public class MiningProcessorTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get { return testContextInstance; }
            set { testContextInstance = value; }
        }

        private string writeOutput(IEntityEnumerator entity)
        {
            StringBuilder result = new StringBuilder(1024);
            result.AppendLine(entity.ToString());
            long count = 0;
            foreach (IBitString s in entity)
            {
                count++;
                result.AppendLine(s.Identifier.ToString());
                result.AppendLine(s.ToString());
            }
            //if (!entity.GetType().IsSubclassOf(typeof(MutliOperandEntity)))
            {
                if (entity.TotalCount != count)
                    Debugger.Break();
                Assert.AreEqual(entity.TotalCount, count);
            }
            result.AppendLine("-------------------------------");

            return result.ToString();
        }

        private List<CoefficientSetting> _coefficients = new List<CoefficientSetting>();

        private void CreateCS1(CoefficientTypeEnum type, int minLen, int maxLen)
        {
            _coefficients.Add(
            new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr1Id),
                ImportanceEnum.Basic,
                null,
                minLen,
                maxLen,
                type)
                );
        }

        private void CreateCS2(CoefficientTypeEnum type, int minLen, int maxLen)
        {
            _coefficients.Add(
            new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr2Id),
                ImportanceEnum.Basic,
                null,
                minLen,
                maxLen,
                type)
                );
        }

        private void CreateCS1s(CoefficientTypeEnum type)
        {
            CreateCS1(type, 1, 1);
            CreateCS1(type, 1, 3);
            CreateCS1(type, 3, 3);
            if (type != CoefficientTypeEnum.Subsets)
            {
                CreateCS1(type, 2, 15);
                CreateCS1(type, 3, 16);
                CreateCS1(type, 4, 17);
            }
        }

        private void CreateCS2s(CoefficientTypeEnum type)
        {
            CreateCS2(type, 1, 1);
            CreateCS2(type, 1, 3);
        }

        private void CreateCSss()
        {
            CreateCS2s(CoefficientTypeEnum.LeftCuts);
            CreateCS2s(CoefficientTypeEnum.RightCuts);
            CreateCS2s(CoefficientTypeEnum.Cuts);
            CreateCS2s(CoefficientTypeEnum.Intervals);
            CreateCS2s(CoefficientTypeEnum.CyclicIntervals);
            CreateCS2s(CoefficientTypeEnum.Subsets);

            CreateCS1s(CoefficientTypeEnum.LeftCuts);
            CreateCS1s(CoefficientTypeEnum.RightCuts);
            CreateCS1s(CoefficientTypeEnum.Cuts);
            CreateCS1s(CoefficientTypeEnum.Intervals);
            CreateCS1s(CoefficientTypeEnum.CyclicIntervals);
            CreateCS1s(CoefficientTypeEnum.Subsets);
        }

        public static string coefficientAttributeId = "";

        /// <summary>
        ///A test for Coefficients
        ///</summary>
        [TestMethod()]
        public void CoefficientsTest()
        {
            StringBuilder result = new StringBuilder();

            CreateCSss();

            foreach (CoefficientSetting entity in _coefficients)
            {
                result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(entity)));
            }

            string r = result.ToString();
            Debug.Write(r);
        }

        /// <summary>
        /// A test for single operand entities.
        /// </summary>
        [TestMethod()]
        public void SingleOperandTest()
        {
            StringBuilder result = new StringBuilder();

            CoefficientSettingI coef = new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr1Id),
                ImportanceEnum.Basic,
                null,
                1,
                3,
                CoefficientTypeEnum.Cuts
                );

            result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(coef)));

            NegationSettingI neg = new NegationSettingI(
                    new GuidStruct((new Guid()).ToString()),
                    ImportanceEnum.Basic,
                    coef);

            result.AppendLine(writeOutput((IEntityEnumerator)Factory.Create(neg)));

            BothSignsSettingI both = new BothSignsSettingI(
                    new GuidStruct((new Guid()).ToString()),
                    ImportanceEnum.Basic,
                    coef);

            result.AppendLine(writeOutput((IEntityEnumerator)Factory.Create(both)));

            string r = result.ToString();
            Debug.Write(r);
        }

        /// <summary>
        /// A test for mutli operand entities.
        /// </summary>
        [TestMethod()]
        public void MultiOperandTest()
        {
            bool traceInput = false;
            StringBuilder result = new StringBuilder();

            CoefficientSettingI coef1 = new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr1Id),
                ImportanceEnum.Basic,
                null,
                1,
                3,
                CoefficientTypeEnum.Cuts
                );

            if (traceInput)
            {
                result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(coef1)));
            }

            CoefficientSettingI coef3 = new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr3Id),
                ImportanceEnum.Basic,
                null,
                5,
                5,
                CoefficientTypeEnum.Intervals
                );

            if (traceInput)
            {
                result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(coef3)));
            }

            CoefficientSettingI coef4 = new CoefficientSettingI(
                new GuidStruct(BitStringCacheTest.Attr4Id),
                ImportanceEnum.Basic,
                null,
                6,
                6,
                CoefficientTypeEnum.Cuts
                );

            if (traceInput)
            {
                result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(coef4)));
            }

            NegationSettingI negCoef4 = new NegationSettingI(
                    new GuidStruct((new Guid()).ToString()),
                    ImportanceEnum.Basic,
                    coef4);

            if (traceInput)
            {
                result.AppendLine(writeOutput((EntityEnumerableCoefficient)Factory.Create(negCoef4)));
            }

            DisjunctionSettingI disj = new DisjunctionSettingI(
                    new GuidStruct((new Guid()).ToString()),
                    ImportanceEnum.Basic,
                    new IEntitySetting[]
                        {
                            coef1,
                            coef3,
                            negCoef4
                        }
                    ,
                    new GuidStruct[][] { },
                    2,
                    3
                );

            result.AppendLine(writeOutput((IEntityEnumerator)Factory.Create(disj)));

            string r = result.ToString();
            Debug.Write(r);
        }
    }
}