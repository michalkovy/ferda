// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System;
using Ferda.Guha.MiningProcessor;
using Ferda.Guha.MiningProcessor.BitStrings;
using Ferda.Guha.MiningProcessor.Formulas;
using Ferda.Guha.MiningProcessor.Results;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests
{
    /// <summary>
    ///This is a test class for Ferda.Guha.MiningProcessor.Formulas.Result and is intended
    ///to contain all Ferda.Guha.MiningProcessor.Formulas.Result Unit Tests
    ///</summary>
    [TestClass()]
    public class ResultTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get { return testContextInstance; }
            set { testContextInstance = value; }
        }

        /// <summary>
        ///A test for Serialize (Result)
        ///</summary>
        [TestMethod()]
        public void SerializeTest()
        {
            BitStringIdentifier bsiA = new BitStringIdentifier("ABCD", "category A");
            BitStringIdentifier bsiB = new BitStringIdentifier("BCDE", "category B");
            BitStringIdentifier bsiC = new BitStringIdentifier("CDEF", "category C");
            BitStringIdentifier bsiD = new BitStringIdentifier("DEFG", "category D");

            Result r = new Result();
            r.AllObjectsCount = 510345;
            Hypothesis h = new Hypothesis();
            h.ContingencyTableA = new double[2][]
                {
                    new double[2] {35489, 354},
                    new double[2] {13, 27}
                };
            h.SetFormula(MarkEnum.Antecedent,
                new AtomFormula(bsiA)
                );
            h.SetFormula(MarkEnum.Succedent,
                new NegationFormula(
                    new ConjunctionFormula(
                        new BooleanAttributeFormula[]
                            {
                                new NegationFormula(
                                    new AtomFormula(bsiB)
                                    ),
                                new AtomFormula(bsiC)
                            }
                        )
                    ));
            h.SetFormula(MarkEnum.Condition,
                new DisjunctionFormula(
                    new BooleanAttributeFormula[]
                        {
                            new NegationFormula(
                                new ConjunctionFormula(
                                    new BooleanAttributeFormula[]
                                        {
                                            new NegationFormula(
                                                new AtomFormula(bsiD)
                                                )
                                        }
                                    )
                                )
                        }
                    ));
            h.SetFormula(MarkEnum.Attribute,
                new CategorialAttributeFormula(
                    bsiD.AttributeGuid
                    ));

            r.Hypotheses.Add(h);

            string actual;

            actual = SerializableResult.Serialize(r);

            Result rOut = SerializableResult.Deserialize(actual);

            Formula af = rOut.Hypotheses[0].GetFormula(MarkEnum.Antecedent);
            Formula nf = rOut.Hypotheses[0].GetFormula(MarkEnum.Succedent);
            Formula df = rOut.Hypotheses[0].GetFormula(MarkEnum.Condition);
            Formula cf = rOut.Hypotheses[0].GetFormula(MarkEnum.Attribute); 
            
            ;
        }


        /// <summary>
        /// A test for SerializableResultInfo()
        /// </summary>
        [TestMethod()]
        public void SerializableResultInfoTest()
        {
            SerializableResultInfo sri = new SerializableResultInfo();
            sri.StartTime = DateTime.Now;
            sri.NumberOfHypotheses = 2;
            sri.NumberOfVerifications = 20154;
            sri.TotalNumberOfRelevantQuestions = 6547324.54d;
            sri.EndTime = DateTime.Now + new TimeSpan(0, 3, 45);
            string serialized = SerializableResultInfo.Serialize(sri);
            SerializableResultInfo deserealized = SerializableResultInfo.Deserialize(serialized);
        }
		
    }
}