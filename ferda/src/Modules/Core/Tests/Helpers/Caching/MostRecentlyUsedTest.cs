// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System.Diagnostics;
using Ferda.Modules.Helpers.Caching;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace Tests
{
    /// <summary>
    ///This is a test class for Ferda.Modules.Helpers.Caching.MostRecentlyUsed&lt;KeyT, ValueT&gt; and is intended
    ///to contain all Ferda.Modules.Helpers.Caching.MostRecentlyUsed&lt;KeyT, ValueT&gt; Unit Tests
    ///</summary>
    [TestClass()]
    public class MostRecentlyUsedTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        private class MRUTestClass : MostRecentlyUsed<int, int[]>
        {
            private Dictionary<int, int[]> values = new Dictionary<int, int[]>();
            
            public MRUTestClass(int maxItems)
            : base(maxItems)
            {
                // initialize
                values.Add(1, new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });
                values.Add(2, new int[] { 1, 2, 3, 8, 9, 10 });
                values.Add(3, new int[] { 3, 4, 5, 6, 7, 8, 9, 10 });
                values.Add(4, new int[] { 1, 2, 3, 4, 5, 6, 7 });
                values.Add(5, new int[] { 1, 6, 7, 8 });
                values.Add(6, new int[] { 10 });
                values.Add(7, new int[] { 9, 10 });
            }
            
            public override int[] GetValue(int key)
            {
                return values[key];
            }

            public override int GetSize(int[] itemToMeasure)
            {
                return itemToMeasure.Length;
            }
        }

        private StringBuilder sb = new StringBuilder();
        
        private void getAndPrint(MRUTestClass target, int key)
        {
            int[] dummy = target[key];
            sb.AppendLine(target.ToString());
        }

        private void testProcedure(MRUTestClass target)
        {
            sb.AppendLine("Max size: " + target.MaxSize);
            getAndPrint(target, 1);
            getAndPrint(target, 5);
            getAndPrint(target, 1);
            getAndPrint(target, 7);
            getAndPrint(target, 4);
            getAndPrint(target, 3);
            getAndPrint(target, 6);
            getAndPrint(target, 2);
            getAndPrint(target, 5);
            getAndPrint(target, 7);
            getAndPrint(target, 5);
            getAndPrint(target, 7);
            getAndPrint(target, 2);
            getAndPrint(target, 3);
            getAndPrint(target, 4);
            getAndPrint(target, 6);
            getAndPrint(target, 1);
        }
        /// <summary>
        ///A test for Coefficients
        ///</summary>
        [TestMethod()]
        public void MRUTest()
        {
            MRUTestClass target1 = new MRUTestClass(5);
            testProcedure(target1);

            MRUTestClass target2 = new MRUTestClass(10);
            testProcedure(target2);

            MRUTestClass target3 = new MRUTestClass(30);
            testProcedure(target3);
            
            string r = sb.ToString();
            Debug.WriteLine(r);
        }
    }


}

