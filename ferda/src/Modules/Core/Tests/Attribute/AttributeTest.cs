// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System;
using System.Collections.Generic;
using Ferda.Guha.Attribute;
using Ferda.Guha.Data;
using Ferda.Modules;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using BoundaryEnum=Ferda.Guha.Attribute.BoundaryEnum;

namespace Tests.Attribute
{
    /// <summary>
    ///This is a test class for Ferda.Guha.Attribute.Attribute&lt;T&gt; and is intended
    ///to contain all Ferda.Guha.Attribute.Attribute&lt;T&gt; Unit Tests
    ///</summary>
    [TestClass()]
    public class AttributeTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get { return testContextInstance; }
            set { testContextInstance = value; }
        }

        [TestMethod()]
        public void MyAttributeTest()
        {
            bool intervalsAllowed = true;
            // SERIALIZATION and DESERIALIZATION TEST
            AttributeSerializable<int> serializable = new AttributeSerializable<int>(
                new CategorySerializable<int>[]
                    {
                        new CategorySerializable<int>(
                            Helper.categoryAName,
                            1,
                            new int[] {-17, 10, 0, 6, 6543},
                            new IntervalSerializable<int>[]
                                {
                                    new IntervalSerializable<int>(55, 312, BoundaryEnum.Open, BoundaryEnum.Closed),
                                    new IntervalSerializable<int>(-7600, -86, BoundaryEnum.Open, BoundaryEnum.Closed)
                                }
                            ),
                        new CategorySerializable<int>(
                            Helper.categoryBName,
                            2,
                            new int[] {17000},
                            new IntervalSerializable<int>[]
                                {
                                    new IntervalSerializable<int>(55, 312, BoundaryEnum.Open, BoundaryEnum.Closed),
                                    new IntervalSerializable<int>(0, -11186, BoundaryEnum.Infinity, BoundaryEnum.Closed)
                                }
                            )
                    },
                Helper.categoryBName,
                intervalsAllowed,
                DbSimpleDataTypeEnum.IntegerSimpleType
                );

            string serialized = Serializer.Serialize<int>(serializable);
            AttributeSerializable<int> deserialized = Serializer.Deserialize<int>(serialized);

            // CONSTRUCTOR TEST

            Attribute<int> target = new Attribute<int>(DbSimpleDataTypeEnum.IntegerSimpleType, deserialized, false);

            Assert.AreEqual(intervalsAllowed, target.IntervalsAllowed);
            Assert.IsTrue(target.ContainsKey(Helper.categoryAName));
            Assert.IsTrue(target.ContainsKey(Helper.categoryBName));
            Assert.IsFalse(target.ContainsKey(Helper.categoryCName));

            #region null containing category

            Assert.AreEqual(true, target.IsSetNullContainingCategory);
            Assert.AreEqual(Helper.categoryBName, target.NullContainingCategory);
            target.NullContainingCategory = null;
            Assert.AreEqual(null, target.NullContainingCategory);
            Assert.IsFalse(target.IsSetNullContainingCategory);
            {
                // try set bad null containing category name
                bool failedAsExpected = false;
                try
                {
                    target.NullContainingCategory = String.Empty;
                }
                catch (ArgumentOutOfRangeException)
                {
                    failedAsExpected = true;
                }
                Assert.IsTrue(failedAsExpected);
            }

            #endregion

            Category<int> aCategory = target[Helper.categoryAName];
            Assert.AreEqual(2, aCategory.Intervals.Count);
            Assert.AreEqual(5, aCategory.Enumeration.Count);

            Category<int> bCategory = target[Helper.categoryBName];
            Assert.AreEqual(2, bCategory.Intervals.Count);
            Assert.AreEqual(1, bCategory.Enumeration.Count);
            Assert.AreEqual(2, bCategory.OrdNumber);

            Assert.IsTrue(aCategory.Equals(bCategory)); //because they blend each other

            List<string> ord = target.GetSort();
            Assert.AreEqual(Helper.categoryAName, ord[0]);
            Assert.AreEqual(Helper.categoryBName, ord[1]);
            {
                // try add category of same name again
                bool failedAsExpected = false;
                try
                {
                    target.GetDefaultSort();
                }
                catch (NotComparableCollisionException)
                {
                    failedAsExpected = true;
                }
                Assert.IsTrue(failedAsExpected);
            }

            #region add, rename and remove category

            target.Add(Helper.categoryCName);
            Assert.IsTrue(target.ContainsKey(Helper.categoryCName));
            target.RenameCategory(Helper.categoryCName, Helper.categoryDName);
            Assert.IsFalse(target.ContainsKey(Helper.categoryCName));
            Assert.IsTrue(target.ContainsKey(Helper.categoryDName));
            {
                // try add category of same name again
                bool failedAsExpected = false;
                try
                {
                    target.Add(Helper.categoryDName);
                }
                catch (ArgumentException)
                {
                    failedAsExpected = true;
                }
                Assert.IsTrue(failedAsExpected);
            }
            target.Remove(Helper.categoryDName);
            Assert.IsFalse(target.ContainsKey(Helper.categoryDName));
            {
                // try add category of of null name
                bool failedAsExpected = false;
                try
                {
                    target.Add(null);
                }
                catch (ArgumentNullException)
                {
                    failedAsExpected = true;
                }
                Assert.IsTrue(failedAsExpected);
            }

            #endregion

            //GetCategoryNameTest()
            Assert.AreEqual(Helper.categoryAName, target.GetCategoryName(aCategory));

            //JoinCategoriesTest()
            string newCategoryName;
            target.JoinCategories(new string[] {Helper.categoryAName, Helper.categoryBName},
                                  NewCategoryName.Own, Helper.categoryDName, out newCategoryName);
            Assert.AreEqual(newCategoryName, Helper.categoryDName);
            Assert.IsTrue(target.ContainsKey(Helper.categoryDName));
            Assert.AreEqual(1, target.Count);

            // A test for Clear ()
            target.Clear();
            Assert.AreEqual(target.Count, 0);
        }

        /// <summary>
        ///A test for Compare
        ///</summary>
        [TestMethod()]
        public void CompareTest()
        {
            //default comparer
            Attribute<int> target = new Attribute<int>(DbSimpleDataTypeEnum.IntegerSimpleType, true);

            // (10, 111)
            Interval<int> a = new Interval<int>(10, BoundaryEnum.Open, 111, BoundaryEnum.Open, target);
            // (-inf; +inf)
            Interval<int> b = new Interval<int>(0, BoundaryEnum.Infinity, 0, BoundaryEnum.Infinity, target);
            // <111; 112)
            Interval<int> c = new Interval<int>(111, BoundaryEnum.Closed, 112, BoundaryEnum.Open, target);
            // <-110; 111>
            Interval<int> d = new Interval<int>(-110, BoundaryEnum.Closed, 111, BoundaryEnum.Closed, target);
            // (1, 5)
            Interval<int> e = new Interval<int>(1, BoundaryEnum.Open, 2, BoundaryEnum.Open, target);

            // compare categories

            target.Add("a");
            target["a"].Intervals.Add(10, BoundaryEnum.Open, 111, BoundaryEnum.Open, false);
            target.Add("c");
            target["c"].Intervals.Add(111, BoundaryEnum.Closed, 112, BoundaryEnum.Open, false);
            target.Add("e");
            target["e"].Intervals.Add(1, BoundaryEnum.Open, 2, BoundaryEnum.Open, false);

            #region Sorting

            List<string> defaultSort = target.GetDefaultSort();
            Assert.AreEqual("e", defaultSort[0]);
            Assert.AreEqual("a", defaultSort[1]);
            Assert.AreEqual("c", defaultSort[2]);

            target.SetDefaultOrds();
            List<string> sort = target.GetSort();
            Assert.AreEqual("e", sort[0]);
            Assert.AreEqual("a", sort[1]);
            Assert.AreEqual("c", sort[2]);

            target["a"].OrdNumber = -1;
            List<string> sort2 = target.GetSort();
            Assert.AreEqual("e", sort2[1]);
            Assert.AreEqual("a", sort2[0]);
            Assert.AreEqual("c", sort2[2]);

            target["c"].OrdNumber = -1;
            List<string> sort3 = target.GetSort();
            Assert.IsNull(sort3);

            #endregion

            target.Add("d");
            target["d"].Intervals.Add(-110, BoundaryEnum.Closed, 111, BoundaryEnum.Closed, true);

            {
                // try add category of same name again
                bool failedAsExpected = false;
                try
                {
                    target.Add("b");
                    target["b"].Intervals.Add(0, BoundaryEnum.Infinity, 0, BoundaryEnum.Infinity, false);
                }
                catch (BadParamsError ex)
                {
                    if (ex.restrictionType == restrictionTypeEnum.AttributeCategoriesDisjunctivityError)
                    failedAsExpected = true;
                }
                Assert.IsTrue(failedAsExpected);
            }
            


            // compare intervals

            Assert.IsTrue(target.Compare(a, b) == 0);
            Assert.IsTrue(a.Equals(b));
            Assert.IsTrue(target.Compare(a, c) < 0);
            Assert.IsTrue(target.Compare(a, d) == 0);
            Assert.IsTrue(target.Compare(c, d) == 0);
            Assert.IsTrue(target.Compare(d, e) == 0);

            // compare interval with enum value

            Assert.IsTrue(target.Compare(e, -3) > 0);
            Assert.IsTrue(target.Compare(e, 21) < 0);
            Assert.IsTrue(target.Compare(a, 11) == 0);
            Assert.IsTrue(target.Compare(b, -9999) == 0);
            Assert.IsTrue(target.Compare(d, 111) == 0);

            // compare enum values

            Assert.IsTrue(target.Compare(-6, -6) == 0);
            Assert.IsTrue(target.Compare(-6, 7) < 0);
            Assert.IsTrue(target.Compare(-6, -7) > 0);
            Assert.IsTrue(target.Compare(6, 7) < 0);
            Assert.IsTrue(target.Compare(7, 6) > 0);
        }

        /// <summary>
        ///A test for Exclude
        ///</summary>
        [TestMethod()]
        public void ExcludeTest()
        {
            // categoryAName (10, 12>; {8, 16}
            // categoryBName {3, 1006}
            // categoryCName (-inf, -2000); (-1000, -12>; {-800,-1600}; NULL
            Attribute<int> target = new Attribute<int>(DbSimpleDataTypeEnum.IntegerSimpleType, true);
            target.Add(Helper.categoryAName);
            target[Helper.categoryAName].Intervals.Add(10, BoundaryEnum.Open, 12, BoundaryEnum.Closed, false);
            target[Helper.categoryAName].Enumeration.Add(8, false);
            target[Helper.categoryAName].Enumeration.Add(16, false);
            target.Add(Helper.categoryBName);
            target[Helper.categoryBName].Enumeration.Add(3, false);
            target[Helper.categoryBName].Enumeration.Add(1006, false);
            target.Add(Helper.categoryCName);
            target[Helper.categoryCName].Intervals.Add(0, BoundaryEnum.Infinity, -2000, BoundaryEnum.Open, false);
            target[Helper.categoryCName].Intervals.Add(-1000, BoundaryEnum.Open, -12, BoundaryEnum.Closed, false);
            target[Helper.categoryCName].Enumeration.Add(-800, false);
            target[Helper.categoryCName].Enumeration.Add(-1600, false);
            target.NullContainingCategory = Helper.categoryCName;

            string[] fromCategories = new string[] {Helper.categoryAName, Helper.categoryBName, Helper.categoryCName};

            // <12, 17)
            Interval<int> interval =
                Helper.GetIntervalT(12, BoundaryEnum.Closed, 17, BoundaryEnum.Open, target);

            target.Exclude(interval, fromCategories);

            #region categoryAName

            // (10, 12)
            Assert.AreEqual(1, target[Helper.categoryAName].Intervals.Count);
            Assert.IsTrue(Helper.ExactEqual<int>(
                              Helper.GetIntervalT(10, BoundaryEnum.Open, 12, BoundaryEnum.Open, target),
                              target[Helper.categoryAName].Intervals[0])
                );
            // {8}
            Assert.AreEqual(1, target[Helper.categoryAName].Enumeration.Count);
            Assert.IsTrue(Helper.ExactEqual<int>(Helper.GetT(8), target[Helper.categoryAName].Enumeration[0]));

            #endregion

            #region categoryBName

            // {3, 1006}
            Assert.AreEqual(2, target[Helper.categoryBName].Enumeration.Count);
            bool contains3 = Helper.ExactEqual<int>(Helper.GetT(3), target[Helper.categoryBName].Enumeration[0])
                             || Helper.ExactEqual<int>(Helper.GetT(3), target[Helper.categoryBName].Enumeration[1]);
            bool contains1006 = Helper.ExactEqual<int>(Helper.GetT(1006), target[Helper.categoryBName].Enumeration[0])
                                ||
                                Helper.ExactEqual<int>(Helper.GetT(1006), target[Helper.categoryBName].Enumeration[1]);
            Assert.IsTrue(contains3 && contains1006);

            #endregion
        }

        /// <summary>
        ///A test for Exclude (interval&lt;T&gt;, string[])
        ///</summary>
        [TestMethod()]
        public void ExcludeTest1b()
        {
            // categoryDName =&gt; (4, 777>
            Ferda.Guha.Attribute.Attribute<int> target = new Attribute<int>(DbSimpleDataTypeEnum.IntegerSimpleType, true);
            target.Add(Helper.categoryDName);
            target[Helper.categoryDName].Intervals.Add(4, BoundaryEnum.Open, 777, BoundaryEnum.Closed, true);

            string[] fromCategories = new string[] {Helper.categoryDName};

            // <12, 17)
            Interval<int> interval =
                Helper.GetIntervalT(12, BoundaryEnum.Closed, 17, BoundaryEnum.Open, target);

            target.Exclude(interval, fromCategories);

            #region categoryDName

            // (4, 12); <17, 777>
            Assert.AreEqual(2, target[Helper.categoryDName].Intervals.Count);
            Interval<int> interval4_12 = Helper.GetIntervalT(4, BoundaryEnum.Open, 12, BoundaryEnum.Open, target);
            Interval<int> interva117_777 =
                Helper.GetIntervalT(17, BoundaryEnum.Closed, 777, BoundaryEnum.Closed, target);
            bool contains4_12 = Helper.ExactEqual<int>(interval4_12, target[Helper.categoryDName].Intervals[0])
                                || Helper.ExactEqual<int>(interval4_12, target[Helper.categoryDName].Intervals[1]);
            bool contains17_777 = Helper.ExactEqual<int>(interva117_777, target[Helper.categoryDName].Intervals[0])
                                  || Helper.ExactEqual<int>(interva117_777, target[Helper.categoryDName].Intervals[1]);
            Assert.IsTrue(contains4_12 && contains17_777);

            #endregion
        }

        /// <summary>
        ///A test for IntervalsAllowed
        ///</summary>
        [TestMethod()]
        public void IntervalsAllowedTest()
        {
            bool intervalsAllowed = true;

            Attribute<int> target = new Attribute<int>(DbSimpleDataTypeEnum.IntegerSimpleType, intervalsAllowed);

            Assert.IsTrue(target.IntervalsAllowed);
            target.Add(Helper.categoryAName);
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(1000), BoundaryEnum.Infinity, Helper.GetT(-80),
                                                       BoundaryEnum.Open, false);
            Equals(1, target[Helper.categoryAName].Intervals.Count);
        }

        /// <summary>
        ///A test for IntervalsAllowed
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof (IntervalsNotAllowedException))]
        public void IntervalsAllowedTest1()
        {
            bool intervalsAllowed = false;

            Attribute<int> target = new Attribute<int>(DbSimpleDataTypeEnum.IntegerSimpleType, intervalsAllowed);

            Assert.IsFalse(target.IntervalsAllowed);
            target.Add(Helper.categoryAName);
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(1000), BoundaryEnum.Infinity, Helper.GetT(-80),
                                                       BoundaryEnum.Open, false);
        }

        /// <summary>
        ///A test for Reduce (bool)
        ///</summary>
        [TestMethod()]
        public void ReduceTest()
        {
            Attribute<int> target = new Attribute<int>(DbSimpleDataTypeEnum.IntegerSimpleType, true);

            target.Add(Helper.categoryAName);
            // (-inf, -80)
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(1000), BoundaryEnum.Infinity, Helper.GetT(-80),
                                                       BoundaryEnum.Open, false);
            // (-700, -300)
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(-700), BoundaryEnum.Open, Helper.GetT(-300),
                                                       BoundaryEnum.Open, false);

            //Assert.AreEqual(2, target[Helper.categoryAName].Intervals.Count);
            //target.Reduce();
            // (-inf, -80)
            Assert.AreEqual(1, target[Helper.categoryAName].Intervals.Count);
            Assert.IsTrue(
                Helper.ExactEqual<int>(
                    Helper.GetIntervalT(0, BoundaryEnum.Infinity, -80, BoundaryEnum.Open, target),
                    target[Helper.categoryAName].Intervals[0])
                );

            // (-80, 100>
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(-80), BoundaryEnum.Open, Helper.GetT(100),
                                                       BoundaryEnum.Closed, false);
            //Assert.AreEqual(2, target[Helper.categoryAName].Intervals.Count);
            //target.Reduce(true);
            // (-inf, -80) (-80, 100>
            Assert.AreEqual(2, target[Helper.categoryAName].Intervals.Count);

            // {-80}
            target[Helper.categoryAName].Enumeration.Add(Helper.GetT(-80), false);
            //Assert.AreEqual(3,
            //                target[Helper.categoryAName].Intervals.Count +
            //                target[Helper.categoryAName].Enumeration.Count);
            //target.Reduce(true);
            // (-inf, 100>
            Assert.AreEqual(1, target[Helper.categoryAName].Intervals.Count);
            Assert.AreEqual(0, target[Helper.categoryAName].Enumeration.Count);
            Assert.IsTrue(
                Helper.ExactEqual<int>(
                    Helper.GetIntervalT(0, BoundaryEnum.Infinity, 100, BoundaryEnum.Closed, target),
                    target[Helper.categoryAName].Intervals[0])
                );

            // (100, 101>
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(100), BoundaryEnum.Open, Helper.GetT(101),
                                                       BoundaryEnum.Closed, false);
            // (100, 101>
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(100), BoundaryEnum.Open, Helper.GetT(101),
                                                       BoundaryEnum.Closed, false);
            // (-inf, -8000>
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(1), BoundaryEnum.Infinity, Helper.GetT(-8000),
                                                       BoundaryEnum.Closed, false);
            // (-9750, -7999)
            target[Helper.categoryAName].Intervals.Add(Helper.GetT(-9750), BoundaryEnum.Open, Helper.GetT(-7999),
                                                       BoundaryEnum.Open, false);
            // {-7999}
            target[Helper.categoryAName].Enumeration.Add(Helper.GetT(-7999), false);
            // {-8000}
            target[Helper.categoryAName].Enumeration.Add(Helper.GetT(-8000), false);
            //Assert.AreEqual(7,
            //                target[Helper.categoryAName].Intervals.Count +
            //                target[Helper.categoryAName].Enumeration.Count);
            //target.Reduce(true);
            // (-inf, 101>
            Assert.AreEqual(1,
                            target[Helper.categoryAName].Intervals.Count +
                            target[Helper.categoryAName].Enumeration.Count);
            Assert.IsTrue(
                Helper.ExactEqual<int>(
                    Helper.GetIntervalT(0, BoundaryEnum.Infinity, 101, BoundaryEnum.Closed, target),
                    target[Helper.categoryAName].Intervals[0])
                );

            target[Helper.categoryAName].Enumeration.Add(Helper.GetT(8033), false);
            //target.Reduce(true);
            // (-inf, 101> {8033}
            Assert.AreEqual(1, target[Helper.categoryAName].Intervals.Count);
            Assert.AreEqual(1, target[Helper.categoryAName].Enumeration.Count);
        }
    }
}