// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Ferda.Guha.Math;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests.Math
{
    /// <summary>
    ///This is a test class for Ferda.Guha.Math.Factorial and is intended
    ///to contain all Ferda.Guha.Math.Factorial Unit Tests
    ///</summary>
    [TestClass()]
    public class FactorialTest
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get { return testContextInstance; }
            set { testContextInstance = value; }
        }

        #region Additional test attributes

        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //

        #endregion

        /// <summary>
        ///A test for Gamma (double)
        ///</summary>
        [TestMethod()]
        public void GammaTest()
        {
            const int size = 171;
            double[,] factorials = new double[size,3];
            factorials[0, 0] = 1;
            factorials[0, 1] = 1;
            factorials[0, 2] = 0;

            double[,] lnfactorials = new double[size,3];
            lnfactorials[0, 0] = 1;
            lnfactorials[0, 1] = 1;
            lnfactorials[0, 2] = 0;

            double[] deviations = new double[size];
            double[] lndeviations = new double[size];

            for (int i = 1; i < size; i++)
            {
                factorials[i, 0] = factorials[i - 1, 0]*i;
                lnfactorials[i, 0] = System.Math.Log(factorials[i, 0]);
                factorials[i, 1] = Factorial.Gamma(i + 1);
                lnfactorials[i, 1] = Factorial.LnGamma(i + 1);
                factorials[i, 2] = factorials[i, 0] - factorials[i, 1];
                lnfactorials[i, 2] = lnfactorials[i, 0] - lnfactorials[i, 1];
                deviations[i] = factorials[i, 2];
                lndeviations[i] = lnfactorials[i, 2];
            }
            Assert.Fail();
        }

        /// <summary>
        ///A test for LnGamma (double)
        ///</summary>
        [TestMethod()]
        public void LnGammaTest()
        {
            double nPlusOne = 0; // TODO: Initialize to an appropriate value

            double expected = 0;
            double actual;

            actual = Factorial.LnGamma(nPlusOne);

            Assert.AreEqual(expected, actual, "Ferda.Guha.Math.Factorial.LnGamma did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        private const double maxDeviation = 0.00002;
        //1234567890

        private double deviation(double x, double y)
        {
            return System.Math.Abs(x - y);
        }

        private double[] factorials;

        private void factorialsSetup()
        {
            factorials = new double[172];
            factorials[0] = 1;
            for (int i = 1; i < 172; i++)
            {
                factorials[i] = factorials[i - 1]*i;
            }
        }
    }
}