// ETreeTaskRunParams.cs - task parameters for the ETree procedure
//
// Authors: Martin Ralbovský <martin.ralbovsky@gmail.com>
//
// Copyright (c) 2007 Martin Ralbovský 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

using System;
using System.Collections.Generic;
using System.Text;

namespace Ferda.Guha.MiningProcessor.Design
{
    /// <summary>
    /// The stucture holding information about parameters of a run of
    /// ETree procedure. It contains all the necessary setting parameters.
    /// </summary>
    public struct ETreeTaskRunParams
    {
        /// <summary>
        /// Attributes used for branching 
        /// decision trees
        /// </summary>
        public CategorialAttribute[] branchingAttributes;

        /// <summary>
        /// Attribute used for 
        /// target classification
        /// </summary>
        public CategorialAttribute targetClassificationAttribute;

        /// <summary>
        /// Quantifiers to evaluate quality of the
        /// generated trees
        /// </summary>
        public Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers;

        /// <summary>
        /// Minimal leaf purity (algorithm parameter). Node purity = number of
        /// right classifications/number of all items in the node. Minimal leaf purity
        /// means that if the leaf purity is lower than minimal, the node branches,
        /// otherwise it stops branching.
        /// </summary>
        public int minimalLeafPurity;

        /// <summary>
        /// Minimal node frequency (algorithm parameter). Minimal node frequency is
        /// a condition for stopping growth of a tree. When a node does not contain
        /// minimal number of items (determined by this parameter), the three is returned
        /// in output and stops growing. 
        /// </summary>
        public int minimalNodeFrequency;

        /// <summary>
        /// Determines the stopping of branching in a node. It can be either
        /// according to minimal node frequency, or to minimal node purity
        /// or to disjunction of both.
        /// </summary>
        public BranchingStoppingCriterionEnum branchingStoppingCriterion;

        /// <summary>
        /// Maximal tree depth (algorithm parameter). The total depth of the tree
        /// cannot exceed this value.
        /// </summary>
        public int maximalTreeDepth;

        /// <summary>
        /// Number of attributes for branching (algorithm parameter). When determining
        /// the most suitable for tree branching, the remaining attributes are sorted
        /// by a criterion (here, chi squared) and the best N(determined by this 
        /// parameter) are used for branching.
        /// </summary>
        public int noAttributesForBranching;

        /// <summary>
        /// Maximal number of hypotheses to be generated by the miner. This parameter
        /// is present mainly because of the fact, that total number of relevant questions
        /// is not a good sign of progress of the task (in present way of approximating the
        /// number, it can easily reach infinity). 
        /// </summary>
        public long maxNumberOfHypotheses;

        /// <summary>
        /// If output should contain only trees of desired
        /// length, or also shorter subtrees.
        /// </summary>
        public bool onlyFullTree;

        /// <summary>
        /// Determines, if the branching should be carried out for each node suitable for
        /// branching separately, or at once for all nodes suitable for branching.
        /// </summary>
        public bool individualNodesBranching;
    }
}
