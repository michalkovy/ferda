// DecisionTreeBrowser.cs - Browser of decision trees generated by ETree procedure
//
// Author: Martin Ralbovský <martin.ralbovsky@gmail.com>
//
// Copyright (c) 2007 Martin Ralbovský 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Resources;
using System.Windows.Forms;
using Ferda.Guha.MiningProcessor.Results;
using Ferda.Guha.MiningProcessor.QuantifierEvaluator;
using Ferda.FrontEnd.AddIns.Common.ListView;

namespace Ferda.FrontEnd.AddIns.ResultBrowser
{
    /// <summary>
    /// Browser of decision trees generated by the ETree procedure.
    /// Now it shows the IF representations of the decision trees.
    /// </summary>
    public partial class DecisionTreeBrowser : UserControl
    {
        #region Private fields

        /// <summary>
        /// The list view to show trees
        /// </summary>
        private ListView treesListView;

        /// <summary>
        /// Rich text box where IF representations of the decision
        /// trees are shown. 
        /// </summary>
        private RichTextBox treesRTB;

        /// <summary>
        /// The If representations of the decision trees.
        /// </summary>
        private SerializableDecisionTree[] decisionTrees;

        /// <summary>
        /// Resource manager of the control
        /// </summary>
        private ResourceManager resManager;

        /// <summary>
        /// Quantifiers connected to the task
        /// </summary>
        private Quantifiers quantifiers;

        /// <summary>
        /// Values of individual quantifiers
        /// </summary>
        private Dictionary<int,double[]> quantifierValues;

        /// <summary>
        /// Sorter for the listview
        /// </summary>
        ListViewItemComparer columnSorter = new ListViewItemComparer();

        #endregion

        #region Constructor

        /// <summary>
        /// Default constructor of the class
        /// </summary>
        /// <param name="serializedResult">
        /// Result of ETree procedure in a serialized form</param>
        /// <param name="resManager">The resource manager</param>
        /// <param name="quantifiers">Quantifiers connected to the task</param>
        public DecisionTreeBrowser(string serializedResult, ResourceManager resManager, 
            Quantifiers quantifiers)
        {
            this.resManager = resManager;
            this.quantifiers = quantifiers;

            DecisionTreeResult result =
                DecisionTreeResult.Deserialize(serializedResult);

            decisionTrees = result.decisionTrees;
            InitQuantifierValues();
            InitializeComponent();
            FillListView();

            treesListView.ItemSelectionChanged += new 
                ListViewItemSelectionChangedEventHandler(treesListView_ItemSelectionChanged);
            treesListView.ColumnClick += new ColumnClickEventHandler(ClickOnColumn);
        }

        #endregion

        /// <summary>
        /// Fills the list view with numbers of hypotheses
        /// </summary>
        private void FillListView()
        {
            ColumnHeader header;
            //column width
            int columnWidth = treesListView.Width / 
                (quantifiers.Quantifeirs.Values.Count + 2);
            int columnIndex = 0;

            //adding a column for hypothesis ID
            treesListView.Columns.Clear();
            header = new ColumnHeader();
            header.Text = resManager.GetString("HypothesisId");
            treesListView.Columns.Add(header);
            treesListView.Columns[columnIndex].Width = columnWidth;
            columnIndex++;

            //adding a column for tree depth
            header = new ColumnHeader();
            header.Text = resManager.GetString("TreeDepth");
            treesListView.Columns.Add(header);
            treesListView.Columns[columnIndex].Width = columnWidth;
            columnIndex++;

            //adding columns for quantifiers
            foreach (Quantifier quant in quantifiers.Quantifeirs.Values)
            {
                header = new ColumnHeader();
                header.Text = quant.LocalizedLabel;
                treesListView.Columns.Add(header);
                treesListView.Columns[columnIndex].Width = columnWidth;
                columnIndex++;
            }

            for (int i = 0; i < decisionTrees.Length; i++)
            {
                ListViewItem item = new ListViewItem();
                item.Text = i.ToString();

                item.SubItems.Add(decisionTrees[i].TreeDepth.ToString());

                int length = quantifierValues[i].Length;

                for (int j = 0; j < length; j++)
                {
                    item.SubItems.Add(quantifierValues[i][j].ToString());
                }

                treesListView.Items.Add(item);
            }
        }

        /// <summary>
        /// The method precomputes the values of quantifiers for
        /// all decision trees contained in the result.
        /// </summary>
        private void InitQuantifierValues()
        {
            quantifierValues = new Dictionary<int, double[]>();

            for (int i = 0; i < decisionTrees.Length; i++)
            {
                //here we must add all the 4 fields of the contingency
                //table, because count of all objects from the data matrix
                //is something different
                long allObjectsCount = 
                    (long) decisionTrees[i].ConfusionMatrix[0][0] + 
                    (long) decisionTrees[i].ConfusionMatrix[0][1] + 
                    (long) decisionTrees[i].ConfusionMatrix[1][0] + 
                    (long) decisionTrees[i].ConfusionMatrix[1][1];

                ContingencyTableHelper helper =
                    new ContingencyTableHelper(decisionTrees[i].ConfusionMatrix, allObjectsCount);        

                quantifierValues.Add(i, quantifiers.Values(helper));
            }
        }

        #region Localization

        /// <summary>
        /// Method to change l10n.
        /// </summary>
        private void ChangeLocale()
        {
            FillListView();
        }

        #endregion

        #region Events

        /// <summary>
        /// Event occurs when user changes selection of item in the list view
        /// containing numbers of hypotheses.
        /// </summary>
        /// <param name="sender">Sender of the event</param>
        /// <param name="e">The event parameters</param>
        void treesListView_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
            if (e.IsSelected == true)
            {
                treesRTB.Text = decisionTrees[e.ItemIndex].IfRepresentation;
            }
        }

        /// <summary>
        /// Method for sorting by the column
        /// </summary>
        /// <param name="sender">Sender of the event</param>
        /// <param name="e">Event parameters</param>
        private void ClickOnColumn(object sender, System.Windows.Forms.ColumnClickEventArgs e)
        {
            columnSorter.column = e.Column;
            if (treesListView.Sorting == SortOrder.Ascending)
            {
                columnSorter.bAscending = false;
                treesListView.Sorting = SortOrder.Descending;
            }
            else
            {
                columnSorter.bAscending = true;
                treesListView.Sorting = SortOrder.Ascending;
            }
            treesListView.ListViewItemSorter = columnSorter;
        }

        #endregion
    }
}
