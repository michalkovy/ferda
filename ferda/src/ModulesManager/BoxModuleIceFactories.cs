/* Generated by Together */

using System;
using System.Collections.Generic;

namespace Ferda {
    namespace ModulesManager {

        /// <summary>
        /// Summary description for the class.
        /// </summary>
		public class BoxModuleIceFactories {
			private bool makeRefresh = true;
			protected Dictionary<Ferda.Modules.BoxModuleFactoryPrx,Ferda.Modules.BoxModuleFactoryPrx>
			_factories = new Dictionary<Ferda.Modules.BoxModuleFactoryPrx,Ferda.Modules.BoxModuleFactoryPrx>();
			private Helper helper;
			
			public BoxModuleIceFactories(Helper helper)
			{
				this.helper = helper;
			}

			///<summary>Calls periodicaly refresh method of BoxModuleFactory
			///classes. Will be run by one special thread.</summary>
            public void StartFactoriesRefreshing() {
				lock(this)
				{
					while (makeRefresh) {
						System.Threading.Monitor.Wait(this,Ferda.Modules.factoryRefreshedTestTime.value);
						if (makeRefresh)
						{
							foreach(Ferda.Modules.BoxModuleFactoryPrx factory in _factories.Values)
							{
								try
								{
									factory.refresh();
								}
								catch(Ice.Exception ex)
								{
									//TODO: osetrit lepe, asi danou factory odebrat
									Console.Error.WriteLine("refreshing BoxModuleFactory was unsuccesfull: " + ex);
								}
							}
							helper.ObjectAdapter.getCommunicator().flushBatchRequests();
						}
					}
				}
            }

			///<summary>ends thread which calls refreshes on box module
			///factories</summary>
            public void EndFactoriesRefreshing() {
				lock(this)
				{
                	makeRefresh = false;
					System.Threading.Monitor.Pulse(this);
				}
            }

            public void AddFactory(Ferda.Modules.BoxModuleFactoryPrx factoryPrx) {
				lock(this)
				{
					_factories[factoryPrx]=
						Ferda.Modules.BoxModuleFactoryPrxHelper.uncheckedCast(
							factoryPrx.ice_batchOneway()
						);
				}
            }

            public bool RemoveFactory(Ferda.Modules.BoxModuleFactoryPrx factoryPrx) {
				lock(this)
				{
					return _factories.Remove(factoryPrx);
				}
            }
        }
    }
}
