//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Archive.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ferda
{
    namespace NetworkArchive
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Connection : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string socketName;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Box boxValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Connection()
            {
                this.socketName = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Connection(string socketName, Box boxValue)
            {
                this.socketName = socketName;
                this.boxValue = boxValue;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::NetworkArchive::Connection");
                global::IceInternal.HashUtil.hashAdd(ref h_, socketName);
                global::IceInternal.HashUtil.hashAdd(ref h_, boxValue);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                Connection o = (Connection)other;
                if(this.socketName == null)
                {
                    if(o.socketName != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.socketName.Equals(o.socketName))
                    {
                        return false;
                    }
                }
                if(this.boxValue == null)
                {
                    if(o.boxValue != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.boxValue.Equals(o.boxValue))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(Connection lhs, Connection rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(Connection lhs, Connection rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.socketName);
                ostr.writeValue(this.boxValue);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.socketName = istr.readString();
                istr.readValue((Box v) => { this.boxValue = v; });
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, Connection v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static Connection ice_read(global::Ice.InputStream istr)
            {
                var v = new Connection();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly Connection _nullMarshalValue = new Connection();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Box : global::Ice.Value
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string creatorIdentifier;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string userName;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string userHint;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Connection[] Connections;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public global::Ferda.Modules.PropertySetting[] PropertySets;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string[] SockedProperties;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Box()
            {
                this.creatorIdentifier = "";
                this.userName = "";
                this.userHint = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Box(string creatorIdentifier, string userName, string userHint, Connection[] Connections, global::Ferda.Modules.PropertySetting[] PropertySets, string[] SockedProperties)
            {
                this.creatorIdentifier = creatorIdentifier;
                this.userName = userName;
                this.userHint = userHint;
                this.Connections = Connections;
                this.PropertySets = PropertySets;
                this.SockedProperties = SockedProperties;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::NetworkArchive::Box";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.writeString(creatorIdentifier);
                ostr_.writeString(userName);
                ostr_.writeString(userHint);
                ConnectionSeqHelper.write(ostr_, Connections);
                global::Ferda.Modules.PropertySettingSeqHelper.write(ostr_, PropertySets);
                global::Ferda.Modules.StringSeqHelper.write(ostr_, SockedProperties);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                creatorIdentifier = istr_.readString();
                userName = istr_.readString();
                userHint = istr_.readString();
                Connections = ConnectionSeqHelper.read(istr_);
                PropertySets = global::Ferda.Modules.PropertySettingSeqHelper.read(istr_);
                SockedProperties = global::Ferda.Modules.StringSeqHelper.read(istr_);
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class NullParamError : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NullParamError()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NullParamError(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NullParamError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::Ferda::NetworkArchive::NullParamError";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::NetworkArchive::NullParamError");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                NullParamError o = other as NullParamError;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(NullParamError lhs, NullParamError rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(NullParamError lhs, NullParamError rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Ferda::NetworkArchive::NullParamError", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class NameExistsError : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NameExistsError()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NameExistsError(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NameExistsError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::Ferda::NetworkArchive::NameExistsError";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::NetworkArchive::NameExistsError");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                NameExistsError o = other as NameExistsError;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(NameExistsError lhs, NameExistsError rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(NameExistsError lhs, NameExistsError rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Ferda::NetworkArchive::NameExistsError", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class NameNotExistsError : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NameNotExistsError()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NameNotExistsError(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NameNotExistsError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::Ferda::NetworkArchive::NameNotExistsError";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::NetworkArchive::NameNotExistsError");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                NameNotExistsError o = other as NameNotExistsError;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(NameNotExistsError lhs, NameNotExistsError rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(NameNotExistsError lhs, NameNotExistsError rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Ferda::NetworkArchive::NameNotExistsError", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Archive : global::Ice.Object, ArchiveOperations_
        {
        }
    }
}

namespace Ferda
{
    namespace NetworkArchive
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_Archive_addBox();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_Archive_removeBox();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_Archive_getBox(Box ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_Archive_listLabels(string[] ret);
    }
}

namespace Ferda
{
    namespace NetworkArchive
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ArchivePrx : global::Ice.ObjectPrx
        {
            /// <summary>
            /// Adds a box with connected subboxes to the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            void addBox(Box boxValue, string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Adds a box with connected subboxes to the archive
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task addBoxAsync(Box boxValue, string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Adds a box with connected subboxes to the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Archive_addBox> begin_addBox(Box boxValue, string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Adds a box with connected subboxes to the archive
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_addBox(Box boxValue, string label, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Adds a box with connected subboxes to the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_addBox(Box boxValue, string label, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Adds a box with connected subboxes to the archive
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_addBox(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Removes the box from archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            void removeBox(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Removes the box from archive
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task removeBoxAsync(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Removes the box from archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Archive_removeBox> begin_removeBox(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Removes the box from archive
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_removeBox(string label, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Removes the box from archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_removeBox(string label, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Removes the box from archive
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_removeBox(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets box which is in the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            Box getBox(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets box which is in the archive
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<Box> getBoxAsync(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets box which is in the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Archive_getBox> begin_getBox(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets box which is in the archive
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getBox(string label, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets box which is in the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getBox(string label, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets box which is in the archive
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            Box end_getBox(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets labels of boxes in the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            string[] listLabels(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets labels of boxes in the archive
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string[]> listLabelsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets labels of boxes in the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_Archive_listLabels> begin_listLabels(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets labels of boxes in the archive
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_listLabels(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets labels of boxes in the archive
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_listLabels(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets labels of boxes in the archive
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string[] end_listLabels(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Ferda
{
    namespace NetworkArchive
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ArchiveOperations_
        {
            /// <summary>
            /// Adds a box with connected subboxes to the archive
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void addBox(Box boxValue, string label, global::Ice.Current current = null);

            /// <summary>
            /// Removes the box from archive
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void removeBox(string label, global::Ice.Current current = null);

            /// <summary>
            /// Gets box which is in the archive
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            Box getBox(string label, global::Ice.Current current = null);

            /// <summary>
            /// Gets labels of boxes in the archive
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string[] listLabels(global::Ice.Current current = null);
        }
    }
}

namespace Ferda
{
    namespace NetworkArchive
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ConnectionSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, Connection[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new Connection() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static Connection[] read(global::Ice.InputStream istr)
            {
                Connection[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new Connection[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new Connection();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class ArchivePrxHelper : global::Ice.ObjectPrxHelperBase, ArchivePrx
        {
            public ArchivePrxHelper()
            {
            }

            public ArchivePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void addBox(Box boxValue, string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_addBoxAsync(boxValue, label, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void removeBox(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_removeBoxAsync(label, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Box getBox(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxAsync(label, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] listLabels(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_listLabelsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task addBoxAsync(Box boxValue, string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_addBoxAsync(boxValue, label, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_addBoxAsync(Box iceP_boxValue, string iceP_label, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_addBox_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_addBox(iceP_boxValue, iceP_label, context, synchronous, completed);
                return completed.Task;
            }

            private const string _addBox_name = "addBox";

            private void _iceI_addBox(Box iceP_boxValue, string iceP_label, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _addBox_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_boxValue);
                        ostr.writeString(iceP_label);
                        ostr.writePendingValues();
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(NameExistsError)
                        {
                            throw;
                        }
                        catch(NullParamError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task removeBoxAsync(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_removeBoxAsync(label, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_removeBoxAsync(string iceP_label, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_removeBox_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_removeBox(iceP_label, context, synchronous, completed);
                return completed.Task;
            }

            private const string _removeBox_name = "removeBox";

            private void _iceI_removeBox(string iceP_label, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _removeBox_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_label);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(NameNotExistsError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<Box> getBoxAsync(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxAsync(label, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Box> _iceI_getBoxAsync(string iceP_label, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBox_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Box>(progress, cancel);
                _iceI_getBox(iceP_label, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBox_name = "getBox";

            private void _iceI_getBox(string iceP_label, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Box>(completed);
                outAsync.invoke(
                    _getBox_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_label);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(NameNotExistsError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Box ret = null;
                        istr.readValue((Box v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> listLabelsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_listLabelsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_listLabelsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_listLabels_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_listLabels(context, synchronous, completed);
                return completed.Task;
            }

            private const string _listLabels_name = "listLabels";

            private void _iceI_listLabels(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _listLabels_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = global::Ferda.Modules.StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Archive_addBox> begin_addBox(Box boxValue, string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_addBox(boxValue, label, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_addBox(Box boxValue, string label, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_addBox(boxValue, label, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_addBox(Box boxValue, string label, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_addBox(boxValue, label, context, callback, cookie, false);
            }

            public void end_addBox(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _addBox_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Archive_addBox> begin_addBox(Box iceP_boxValue, string iceP_label, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_addBox_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Archive_addBox, object>(
                    (Callback_Archive_addBox cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _addBox_name, cookie, completedCallback);
                _iceI_addBox(iceP_boxValue, iceP_label, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Archive_removeBox> begin_removeBox(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_removeBox(label, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_removeBox(string label, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_removeBox(label, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_removeBox(string label, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_removeBox(label, context, callback, cookie, false);
            }

            public void end_removeBox(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeBox_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Archive_removeBox> begin_removeBox(string iceP_label, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_removeBox_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Archive_removeBox, object>(
                    (Callback_Archive_removeBox cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _removeBox_name, cookie, completedCallback);
                _iceI_removeBox(iceP_label, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Archive_getBox> begin_getBox(string label, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBox(label, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBox(string label, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBox(label, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBox(string label, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBox(label, context, callback, cookie, false);
            }

            public Box end_getBox(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBox_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Box>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Archive_getBox> begin_getBox(string iceP_label, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBox_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Archive_getBox, Box>(
                    (Callback_Archive_getBox cb, Box ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBox_name, cookie, completedCallback);
                _iceI_getBox(iceP_label, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Archive_listLabels> begin_listLabels(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_listLabels(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_listLabels(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_listLabels(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_listLabels(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_listLabels(context, callback, cookie, false);
            }

            public string[] end_listLabels(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _listLabels_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Archive_listLabels> begin_listLabels(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_listLabels_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Archive_listLabels, string[]>(
                    (Callback_Archive_listLabels cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _listLabels_name, cookie, completedCallback);
                _iceI_listLabels(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ArchivePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ArchivePrx r = b as ArchivePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ArchivePrxHelper h = new ArchivePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ArchivePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ArchivePrx r = b as ArchivePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ArchivePrxHelper h = new ArchivePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ArchivePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ArchivePrxHelper h = new ArchivePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ArchivePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ArchivePrxHelper h = new ArchivePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ArchivePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ArchivePrx r = b as ArchivePrx;
                if(r == null)
                {
                    ArchivePrxHelper h = new ArchivePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ArchivePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ArchivePrxHelper h = new ArchivePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::NetworkArchive::Archive",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ArchivePrx v)
            {
                ostr.writeProxy(v);
            }

            public static ArchivePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ArchivePrxHelper result = new ArchivePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ferda
{
    namespace NetworkArchive
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class ArchiveDisp_ : global::Ice.ObjectImpl, Archive
        {
            #region Slice operations

            public abstract void addBox(Box boxValue, string label, global::Ice.Current current = null);

            public abstract void removeBox(string label, global::Ice.Current current = null);

            public abstract Box getBox(string label, global::Ice.Current current = null);

            public abstract string[] listLabels(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::NetworkArchive::Archive",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_addBox(Archive obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Box iceP_boxValue;
                iceP_boxValue = null;
                string iceP_label;
                istr.readValue((Box v) => {iceP_boxValue = v; });
                iceP_label = istr.readString();
                istr.readPendingValues();
                inS.endReadParams();
                obj.addBox(iceP_boxValue, iceP_label, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_removeBox(Archive obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_label;
                iceP_label = istr.readString();
                inS.endReadParams();
                obj.removeBox(iceP_label, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getBox(Archive obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_label;
                iceP_label = istr.readString();
                inS.endReadParams();
                var ret = obj.getBox(iceP_label, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_listLabels(Archive obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.listLabels(current);
                var ostr = inS.startWriteParams();
                global::Ferda.Modules.StringSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "addBox",
                "getBox",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "listLabels",
                "removeBox"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_addBox(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getBox(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_listLabels(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_removeBox(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
