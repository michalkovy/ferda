//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `OtherPropertyTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ferda
{
    namespace Modules
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface StringSeqTInterface : global::Ice.Object, StringSeqTInterfaceOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1012")]
        public partial class StringSeqT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string[] stringSeqValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public StringSeqT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public StringSeqT(string[] stringSeqValue)
            {
                this.stringSeqValue = stringSeqValue;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::StringSeqT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                StringSeqHelper.write(ostr_, stringSeqValue);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                stringSeqValue = StringSeqHelper.read(istr_);
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_StringSeqTInterface_getStringSeq(string[] ret);
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface StringSeqTInterfacePrx : global::Ice.ObjectPrx
        {
            string[] getStringSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string[]> getStringSeqAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_StringSeqTInterface_getStringSeq> begin_getStringSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getStringSeq(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getStringSeq(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            string[] end_getStringSeq(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface StringSeqTPrx : StringSeqTInterfacePrx
        {
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface StringSeqTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string[] getStringSeq(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface StringSeqTOperations_ : StringSeqTInterfaceOperations_
        {
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class StringSeqTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, StringSeqTInterfacePrx
        {
            public StringSeqTInterfacePrxHelper()
            {
            }

            public StringSeqTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string[] getStringSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringSeqAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string[]> getStringSeqAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringSeqAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getStringSeqAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getStringSeq(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringSeq_name = "getStringSeq";

            private void _iceI_getStringSeq(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getStringSeq_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringSeqTInterface_getStringSeq> begin_getStringSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringSeq(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringSeq(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringSeq(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringSeq(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringSeq(context, callback, cookie, false);
            }

            public string[] end_getStringSeq(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringSeqTInterface_getStringSeq> begin_getStringSeq(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringSeqTInterface_getStringSeq, string[]>(
                    (Callback_StringSeqTInterface_getStringSeq cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringSeq_name, cookie, completedCallback);
                _iceI_getStringSeq(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static StringSeqTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                StringSeqTInterfacePrx r = b as StringSeqTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    StringSeqTInterfacePrxHelper h = new StringSeqTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringSeqTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                StringSeqTInterfacePrx r = b as StringSeqTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    StringSeqTInterfacePrxHelper h = new StringSeqTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringSeqTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        StringSeqTInterfacePrxHelper h = new StringSeqTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static StringSeqTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        StringSeqTInterfacePrxHelper h = new StringSeqTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static StringSeqTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                StringSeqTInterfacePrx r = b as StringSeqTInterfacePrx;
                if(r == null)
                {
                    StringSeqTInterfacePrxHelper h = new StringSeqTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringSeqTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                StringSeqTInterfacePrxHelper h = new StringSeqTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::StringSeqTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, StringSeqTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static StringSeqTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    StringSeqTInterfacePrxHelper result = new StringSeqTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class StringSeqTPrxHelper : global::Ice.ObjectPrxHelperBase, StringSeqTPrx
        {
            public StringSeqTPrxHelper()
            {
            }

            public StringSeqTPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string[] getStringSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringSeqAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string[]> getStringSeqAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringSeqAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getStringSeqAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getStringSeq(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringSeq_name = "getStringSeq";

            private void _iceI_getStringSeq(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getStringSeq_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringSeqTInterface_getStringSeq> begin_getStringSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringSeq(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringSeq(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringSeq(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringSeq(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringSeq(context, callback, cookie, false);
            }

            public string[] end_getStringSeq(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringSeqTInterface_getStringSeq> begin_getStringSeq(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringSeqTInterface_getStringSeq, string[]>(
                    (Callback_StringSeqTInterface_getStringSeq cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringSeq_name, cookie, completedCallback);
                _iceI_getStringSeq(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static StringSeqTPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                StringSeqTPrx r = b as StringSeqTPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    StringSeqTPrxHelper h = new StringSeqTPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringSeqTPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                StringSeqTPrx r = b as StringSeqTPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    StringSeqTPrxHelper h = new StringSeqTPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringSeqTPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        StringSeqTPrxHelper h = new StringSeqTPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static StringSeqTPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        StringSeqTPrxHelper h = new StringSeqTPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static StringSeqTPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                StringSeqTPrx r = b as StringSeqTPrx;
                if(r == null)
                {
                    StringSeqTPrxHelper h = new StringSeqTPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringSeqTPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                StringSeqTPrxHelper h = new StringSeqTPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::PropertyValue",
                "::Ferda::Modules::StringSeqT",
                "::Ferda::Modules::StringSeqTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, StringSeqTPrx v)
            {
                ostr.writeProxy(v);
            }

            public static StringSeqTPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    StringSeqTPrxHelper result = new StringSeqTPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class StringSeqTInterfaceDisp_ : global::Ice.ObjectImpl, StringSeqTInterface
        {
            #region Slice operations

            public abstract string[] getStringSeq(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::StringSeqTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getStringSeq(StringSeqTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getStringSeq(current);
                var ostr = inS.startWriteParams();
                StringSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getStringSeq",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getStringSeq(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class StringSeqTDisp_ : global::Ice.ObjectImpl, StringSeqTOperations_, StringSeqTInterface
        {
            #region Inherited Slice operations

            public abstract string[] getStringSeq(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            private static readonly string[] _ids =
            {
                "::Ferda::Modules::PropertyValue",
                "::Ferda::Modules::StringSeqT",
                "::Ferda::Modules::StringSeqTInterface",
                "::Ice::Object"
            };

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            private static readonly string[] _all =
            {
                "getStringSeq",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return StringSeqTInterfaceDisp_.iceD_getStringSeq(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }
        }
    }
}
