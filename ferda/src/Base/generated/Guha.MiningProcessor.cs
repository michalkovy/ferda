//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Guha.MiningProcessor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace MiningProcessor
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class BitStringIce : global::Ice.Value
            {
                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BitStringIce()
                {
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::BitStringIce";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, true);
                    ostr_.endSlice();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    istr_.endSlice();
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class CrispBitStringIce : BitStringIce
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public long[] value;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int length;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CrispBitStringIce() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CrispBitStringIce(long[] value, int length)
                {
                    this.value = value;
                    this.length = length;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::CrispBitStringIce";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    global::Ferda.Modules.LongSeqHelper.write(ostr_, value);
                    ostr_.writeInt(length);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    value = global::Ferda.Modules.LongSeqHelper.read(istr_);
                    length = istr_.readInt();
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class FuzzyBitStringIce : BitStringIce
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public float[] value;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public FuzzyBitStringIce() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public FuzzyBitStringIce(float[] value)
                {
                    this.value = value;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::FuzzyBitStringIce";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    global::Ferda.Modules.FloatSeqHelper.write(ostr_, value);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    value = global::Ferda.Modules.FloatSeqHelper.read(istr_);
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class BitStringIceWithCategoryId : global::System.ICloneable
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BitStringIce bitString;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public string categoryId;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BitStringIceWithCategoryId()
                {
                    this.categoryId = "";
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BitStringIceWithCategoryId(BitStringIce bitString, string categoryId)
                {
                    this.bitString = bitString;
                    this.categoryId = categoryId;
                    ice_initialize();
                }

                #endregion

                #region ICloneable members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override int GetHashCode()
                {
                    int h_ = 5381;
                    global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::MiningProcessor::BitStringIceWithCategoryId");
                    global::IceInternal.HashUtil.hashAdd(ref h_, bitString);
                    global::IceInternal.HashUtil.hashAdd(ref h_, categoryId);
                    return h_;
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override bool Equals(object other)
                {
                    if(object.ReferenceEquals(this, other))
                    {
                        return true;
                    }
                    if(other == null)
                    {
                        return false;
                    }
                    if(GetType() != other.GetType())
                    {
                        return false;
                    }
                    BitStringIceWithCategoryId o = (BitStringIceWithCategoryId)other;
                    if(this.bitString == null)
                    {
                        if(o.bitString != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!this.bitString.Equals(o.bitString))
                        {
                            return false;
                        }
                    }
                    if(this.categoryId == null)
                    {
                        if(o.categoryId != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!this.categoryId.Equals(o.categoryId))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator==(BitStringIceWithCategoryId lhs, BitStringIceWithCategoryId rhs)
                {
                    return Equals(lhs, rhs);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator!=(BitStringIceWithCategoryId lhs, BitStringIceWithCategoryId rhs)
                {
                    return !Equals(lhs, rhs);
                }

                #endregion

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_writeMembers(global::Ice.OutputStream ostr)
                {
                    ostr.writeValue(this.bitString);
                    ostr.writeString(this.categoryId);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_readMembers(global::Ice.InputStream istr)
                {
                    istr.readValue((BitStringIce v) => { this.bitString = v; });
                    this.categoryId = istr.readString();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static void ice_write(global::Ice.OutputStream ostr, BitStringIceWithCategoryId v)
                {
                    if(v == null)
                    {
                        _nullMarshalValue.ice_writeMembers(ostr);
                    }
                    else
                    {
                        v.ice_writeMembers(ostr);
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static BitStringIceWithCategoryId ice_read(global::Ice.InputStream istr)
                {
                    var v = new BitStringIceWithCategoryId();
                    v.ice_readMembers(istr);
                    return v;
                }

                private static readonly BitStringIceWithCategoryId _nullMarshalValue = new BitStringIceWithCategoryId();

                #endregion
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class GuidAttributeNamePair : global::System.ICloneable
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public global::Ferda.Modules.GuidStruct id;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public string attributeName;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public GuidAttributeNamePair()
                {
                    this.id = new global::Ferda.Modules.GuidStruct();
                    this.attributeName = "";
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public GuidAttributeNamePair(global::Ferda.Modules.GuidStruct id, string attributeName)
                {
                    this.id = id;
                    this.attributeName = attributeName;
                    ice_initialize();
                }

                #endregion

                #region ICloneable members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override int GetHashCode()
                {
                    int h_ = 5381;
                    global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::MiningProcessor::GuidAttributeNamePair");
                    global::IceInternal.HashUtil.hashAdd(ref h_, id);
                    global::IceInternal.HashUtil.hashAdd(ref h_, attributeName);
                    return h_;
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override bool Equals(object other)
                {
                    if(object.ReferenceEquals(this, other))
                    {
                        return true;
                    }
                    if(other == null)
                    {
                        return false;
                    }
                    if(GetType() != other.GetType())
                    {
                        return false;
                    }
                    GuidAttributeNamePair o = (GuidAttributeNamePair)other;
                    if(this.id == null)
                    {
                        if(o.id != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!this.id.Equals(o.id))
                        {
                            return false;
                        }
                    }
                    if(this.attributeName == null)
                    {
                        if(o.attributeName != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!this.attributeName.Equals(o.attributeName))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator==(GuidAttributeNamePair lhs, GuidAttributeNamePair rhs)
                {
                    return Equals(lhs, rhs);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator!=(GuidAttributeNamePair lhs, GuidAttributeNamePair rhs)
                {
                    return !Equals(lhs, rhs);
                }

                #endregion

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_writeMembers(global::Ice.OutputStream ostr)
                {
                    global::Ferda.Modules.GuidStruct.ice_write(ostr, this.id);
                    ostr.writeString(this.attributeName);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_readMembers(global::Ice.InputStream istr)
                {
                    this.id = global::Ferda.Modules.GuidStruct.ice_read(istr);
                    this.attributeName = istr.readString();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static void ice_write(global::Ice.OutputStream ostr, GuidAttributeNamePair v)
                {
                    if(v == null)
                    {
                        _nullMarshalValue.ice_writeMembers(ostr);
                    }
                    else
                    {
                        v.ice_writeMembers(ostr);
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static GuidAttributeNamePair ice_read(global::Ice.InputStream istr)
                {
                    var v = new GuidAttributeNamePair();
                    v.ice_readMembers(istr);
                    return v;
                }

                private static readonly GuidAttributeNamePair _nullMarshalValue = new GuidAttributeNamePair();

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface SourceDataTableIdProvider : global::Ice.Object, SourceDataTableIdProviderOperations_
            {
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface AttributeNameProvider : global::Ice.Object, AttributeNameProviderOperations_, SourceDataTableIdProvider
            {
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface BitStringGenerator : global::Ice.Object, BitStringGeneratorOperations_, AttributeNameProvider
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum ImportanceEnum
            {
                Forced,
                Basic,
                Auxiliary
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class ImportanceEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, ImportanceEnum v)
                {
                    ostr.writeEnum((int)v, 2);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static ImportanceEnum read(global::Ice.InputStream istr)
                {
                    ImportanceEnum v;
                    v = (ImportanceEnum)istr.readEnum(2);
                    return v;
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class IEntitySetting : global::Ice.Value
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public global::Ferda.Modules.GuidStruct id;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ImportanceEnum importance;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public IEntitySetting()
                {
                    this.id = new global::Ferda.Modules.GuidStruct();
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public IEntitySetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance)
                {
                    this.id = id;
                    this.importance = importance;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::IEntitySetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, true);
                    global::Ferda.Modules.GuidStruct.ice_write(ostr_, id);
                    ostr_.writeEnum((int)importance, 2);
                    ostr_.endSlice();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    id = global::Ferda.Modules.GuidStruct.ice_read(istr_);
                    importance = (ImportanceEnum)istr_.readEnum(2);
                    istr_.endSlice();
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class ILeafEntitySetting : IEntitySetting
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BitStringGeneratorPrx generator;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ILeafEntitySetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ILeafEntitySetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, BitStringGeneratorPrx generator) : base(id, importance)
                {
                    this.generator = generator;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::ILeafEntitySetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    BitStringGeneratorPrxHelper.write(ostr_, generator);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    generator = BitStringGeneratorPrxHelper.read(istr_);
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class CoefficientFixedSetSetting : ILeafEntitySetting
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public string[] categoriesIds;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CoefficientFixedSetSetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CoefficientFixedSetSetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, BitStringGeneratorPrx generator, string[] categoriesIds) : base(id, importance, generator)
                {
                    this.categoriesIds = categoriesIds;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::CoefficientFixedSetSetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    global::Ferda.Modules.StringSeqHelper.write(ostr_, categoriesIds);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    categoriesIds = global::Ferda.Modules.StringSeqHelper.read(istr_);
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum CoefficientTypeEnum
            {
                Subsets,
                SubsetsOneOne,
                CyclicIntervals,
                Intervals,
                Cuts,
                LeftCuts,
                RightCuts
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class CoefficientTypeEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, CoefficientTypeEnum v)
                {
                    ostr.writeEnum((int)v, 6);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static CoefficientTypeEnum read(global::Ice.InputStream istr)
                {
                    CoefficientTypeEnum v;
                    v = (CoefficientTypeEnum)istr.readEnum(6);
                    return v;
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class CoefficientSetting : ILeafEntitySetting
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int minLength;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int maxLength;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CoefficientTypeEnum coefficientType;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CoefficientSetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CoefficientSetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, BitStringGeneratorPrx generator, int minLength, int maxLength, CoefficientTypeEnum coefficientType) : base(id, importance, generator)
                {
                    this.minLength = minLength;
                    this.maxLength = maxLength;
                    this.coefficientType = coefficientType;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::CoefficientSetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    ostr_.writeInt(minLength);
                    ostr_.writeInt(maxLength);
                    ostr_.writeEnum((int)coefficientType, 6);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    minLength = istr_.readInt();
                    maxLength = istr_.readInt();
                    coefficientType = (CoefficientTypeEnum)istr_.readEnum(6);
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class ISingleOperandEntitySetting : IEntitySetting
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public IEntitySetting operand;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ISingleOperandEntitySetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ISingleOperandEntitySetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, IEntitySetting operand) : base(id, importance)
                {
                    this.operand = operand;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::ISingleOperandEntitySetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    ostr_.writeValue(operand);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    istr_.readValue((IEntitySetting v) => { this.operand = v; });
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum SignTypeEnum
            {
                Positive,
                Negative,
                Both
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class SignTypeEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, SignTypeEnum v)
                {
                    ostr.writeEnum((int)v, 2);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static SignTypeEnum read(global::Ice.InputStream istr)
                {
                    SignTypeEnum v;
                    v = (SignTypeEnum)istr.readEnum(2);
                    return v;
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class NegationSetting : ISingleOperandEntitySetting
            {
                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public NegationSetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public NegationSetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, IEntitySetting operand) : base(id, importance, operand)
                {
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::NegationSetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class BothSignsSetting : ISingleOperandEntitySetting
            {
                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BothSignsSetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BothSignsSetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, IEntitySetting operand) : base(id, importance, operand)
                {
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::BothSignsSetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class IMultipleOperandEntitySetting : IEntitySetting
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public IEntitySetting[] operands;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int minLength;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int maxLength;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public IMultipleOperandEntitySetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public IMultipleOperandEntitySetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, IEntitySetting[] operands, int minLength, int maxLength) : base(id, importance)
                {
                    this.operands = operands;
                    this.minLength = minLength;
                    this.maxLength = maxLength;
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::IMultipleOperandEntitySetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    IEntitySettingSeqHelper.write(ostr_, operands);
                    ostr_.writeInt(minLength);
                    ostr_.writeInt(maxLength);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    operands = IEntitySettingSeqHelper.read(istr_);
                    minLength = istr_.readInt();
                    maxLength = istr_.readInt();
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class ConjunctionSetting : IMultipleOperandEntitySetting
            {
                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ConjunctionSetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ConjunctionSetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, IEntitySetting[] operands, int minLength, int maxLength) : base(id, importance, operands, minLength, maxLength)
                {
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::ConjunctionSetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class DisjunctionSetting : IMultipleOperandEntitySetting
            {
                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public DisjunctionSetting() : base()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public DisjunctionSetting(global::Ferda.Modules.GuidStruct id, ImportanceEnum importance, IEntitySetting[] operands, int minLength, int maxLength) : base(id, importance, operands, minLength, maxLength)
                {
                    ice_initialize();
                }

                #endregion

                private const string _id = "::Ferda::Guha::MiningProcessor::DisjunctionSetting";

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static new string ice_staticId()
                {
                    return _id;
                }
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override string ice_id()
                {
                    return _id;
                }

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
                {
                    ostr_.startSlice(ice_staticId(), -1, false);
                    ostr_.endSlice();
                    base.iceWriteImpl(ostr_);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                protected override void iceReadImpl(global::Ice.InputStream istr_)
                {
                    istr_.startSlice();
                    istr_.endSlice();
                    base.iceReadImpl(istr_);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface BitStringGeneratorProvider : global::Ice.Object, BitStringGeneratorProviderOperations_
            {
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface BooleanAttributeSettingFunctions : global::Ice.Object, BooleanAttributeSettingFunctionsOperations_, AttributeNameProvider, BitStringGeneratorProvider
            {
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface BooleanAttributeSettingWithBSGenerationAbilityFunctions : global::Ice.Object, BooleanAttributeSettingWithBSGenerationAbilityFunctionsOperations_, BooleanAttributeSettingFunctions, BitStringGenerator
            {
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface MiningTaskFunctions : global::Ice.Object, MiningTaskFunctionsOperations_, AttributeNameProvider, BitStringGeneratorProvider
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum TaskTypeEnum
            {
                FourFold,
                KL,
                CF,
                SDFourFold,
                SDKL,
                SDCF,
                ETree
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class TaskTypeEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, TaskTypeEnum v)
                {
                    ostr.writeEnum((int)v, 6);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static TaskTypeEnum read(global::Ice.InputStream istr)
                {
                    TaskTypeEnum v;
                    v = (TaskTypeEnum)istr.readEnum(6);
                    return v;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum ResultTypeEnum
            {
                Trace,
                TraceBoolean,
                TraceReal
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class ResultTypeEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, ResultTypeEnum v)
                {
                    ostr.writeEnum((int)v, 2);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static ResultTypeEnum read(global::Ice.InputStream istr)
                {
                    ResultTypeEnum v;
                    v = (ResultTypeEnum)istr.readEnum(2);
                    return v;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum MarkEnum
            {
                Antecedent,
                Succedent,
                Condition,
                RowAttribute,
                ColumnAttribute,
                Attribute,
                FirstSet,
                SecondSet,
                TargetClassificationAttribute,
                BranchingAttributes
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class MarkEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, MarkEnum v)
                {
                    ostr.writeEnum((int)v, 9);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static MarkEnum read(global::Ice.InputStream istr)
                {
                    MarkEnum v;
                    v = (MarkEnum)istr.readEnum(9);
                    return v;
                }
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class BooleanAttribute : global::System.ICloneable
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public MarkEnum mark;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public IEntitySetting setting;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BooleanAttribute()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BooleanAttribute(MarkEnum mark, IEntitySetting setting)
                {
                    this.mark = mark;
                    this.setting = setting;
                    ice_initialize();
                }

                #endregion

                #region ICloneable members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override int GetHashCode()
                {
                    int h_ = 5381;
                    global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::MiningProcessor::BooleanAttribute");
                    global::IceInternal.HashUtil.hashAdd(ref h_, mark);
                    global::IceInternal.HashUtil.hashAdd(ref h_, setting);
                    return h_;
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override bool Equals(object other)
                {
                    if(object.ReferenceEquals(this, other))
                    {
                        return true;
                    }
                    if(other == null)
                    {
                        return false;
                    }
                    if(GetType() != other.GetType())
                    {
                        return false;
                    }
                    BooleanAttribute o = (BooleanAttribute)other;
                    if(!this.mark.Equals(o.mark))
                    {
                        return false;
                    }
                    if(this.setting == null)
                    {
                        if(o.setting != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!this.setting.Equals(o.setting))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator==(BooleanAttribute lhs, BooleanAttribute rhs)
                {
                    return Equals(lhs, rhs);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator!=(BooleanAttribute lhs, BooleanAttribute rhs)
                {
                    return !Equals(lhs, rhs);
                }

                #endregion

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_writeMembers(global::Ice.OutputStream ostr)
                {
                    ostr.writeEnum((int)this.mark, 9);
                    ostr.writeValue(this.setting);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_readMembers(global::Ice.InputStream istr)
                {
                    this.mark = (MarkEnum)istr.readEnum(9);
                    istr.readValue((IEntitySetting v) => { this.setting = v; });
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static void ice_write(global::Ice.OutputStream ostr, BooleanAttribute v)
                {
                    if(v == null)
                    {
                        _nullMarshalValue.ice_writeMembers(ostr);
                    }
                    else
                    {
                        v.ice_writeMembers(ostr);
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static BooleanAttribute ice_read(global::Ice.InputStream istr)
                {
                    var v = new BooleanAttribute();
                    v.ice_readMembers(istr);
                    return v;
                }

                private static readonly BooleanAttribute _nullMarshalValue = new BooleanAttribute();

                #endregion
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class CategorialAttribute : global::System.ICloneable
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public MarkEnum mark;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BitStringGeneratorPrx setting;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CategorialAttribute()
                {
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CategorialAttribute(MarkEnum mark, BitStringGeneratorPrx setting)
                {
                    this.mark = mark;
                    this.setting = setting;
                    ice_initialize();
                }

                #endregion

                #region ICloneable members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override int GetHashCode()
                {
                    int h_ = 5381;
                    global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::MiningProcessor::CategorialAttribute");
                    global::IceInternal.HashUtil.hashAdd(ref h_, mark);
                    global::IceInternal.HashUtil.hashAdd(ref h_, setting);
                    return h_;
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override bool Equals(object other)
                {
                    if(object.ReferenceEquals(this, other))
                    {
                        return true;
                    }
                    if(other == null)
                    {
                        return false;
                    }
                    if(GetType() != other.GetType())
                    {
                        return false;
                    }
                    CategorialAttribute o = (CategorialAttribute)other;
                    if(!this.mark.Equals(o.mark))
                    {
                        return false;
                    }
                    if(this.setting == null)
                    {
                        if(o.setting != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!this.setting.Equals(o.setting))
                        {
                            return false;
                        }
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator==(CategorialAttribute lhs, CategorialAttribute rhs)
                {
                    return Equals(lhs, rhs);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator!=(CategorialAttribute lhs, CategorialAttribute rhs)
                {
                    return !Equals(lhs, rhs);
                }

                #endregion

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_writeMembers(global::Ice.OutputStream ostr)
                {
                    ostr.writeEnum((int)this.mark, 9);
                    BitStringGeneratorPrxHelper.write(ostr, this.setting);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_readMembers(global::Ice.InputStream istr)
                {
                    this.mark = (MarkEnum)istr.readEnum(9);
                    this.setting = BitStringGeneratorPrxHelper.read(istr);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static void ice_write(global::Ice.OutputStream ostr, CategorialAttribute v)
                {
                    if(v == null)
                    {
                        _nullMarshalValue.ice_writeMembers(ostr);
                    }
                    else
                    {
                        v.ice_writeMembers(ostr);
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static CategorialAttribute ice_read(global::Ice.InputStream istr)
                {
                    var v = new CategorialAttribute();
                    v.ice_readMembers(istr);
                    return v;
                }

                private static readonly CategorialAttribute _nullMarshalValue = new CategorialAttribute();

                #endregion
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum TaskEvaluationTypeEnum
            {
                FirstN
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class TaskEvaluationTypeEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, TaskEvaluationTypeEnum v)
                {
                    ostr.writeEnum((int)v, 0);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static TaskEvaluationTypeEnum read(global::Ice.InputStream istr)
                {
                    TaskEvaluationTypeEnum v;
                    v = (TaskEvaluationTypeEnum)istr.readEnum(0);
                    return v;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum WorkingWithSecondSetModeEnum
            {
                None,
                Cedent2,
                Cedent1AndCedent2
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class WorkingWithSecondSetModeEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, WorkingWithSecondSetModeEnum v)
                {
                    ostr.writeEnum((int)v, 2);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static WorkingWithSecondSetModeEnum read(global::Ice.InputStream istr)
                {
                    WorkingWithSecondSetModeEnum v;
                    v = (WorkingWithSecondSetModeEnum)istr.readEnum(2);
                    return v;
                }
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial struct TaskRunParams
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public TaskTypeEnum taskType;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ResultTypeEnum resultType;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public TaskEvaluationTypeEnum evaluationType;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public long maxSizeOfResult;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int skipFirstN;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public WorkingWithSecondSetModeEnum sdWorkingWithSecondSetMode;

                #endregion

                partial void ice_initialize();

                #region Constructor

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public TaskRunParams(TaskTypeEnum taskType, ResultTypeEnum resultType, TaskEvaluationTypeEnum evaluationType, long maxSizeOfResult, int skipFirstN, WorkingWithSecondSetModeEnum sdWorkingWithSecondSetMode)
                {
                    this.taskType = taskType;
                    this.resultType = resultType;
                    this.evaluationType = evaluationType;
                    this.maxSizeOfResult = maxSizeOfResult;
                    this.skipFirstN = skipFirstN;
                    this.sdWorkingWithSecondSetMode = sdWorkingWithSecondSetMode;
                    ice_initialize();
                }

                #endregion

                #region Object members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override int GetHashCode()
                {
                    int h_ = 5381;
                    global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::MiningProcessor::TaskRunParams");
                    global::IceInternal.HashUtil.hashAdd(ref h_, taskType);
                    global::IceInternal.HashUtil.hashAdd(ref h_, resultType);
                    global::IceInternal.HashUtil.hashAdd(ref h_, evaluationType);
                    global::IceInternal.HashUtil.hashAdd(ref h_, maxSizeOfResult);
                    global::IceInternal.HashUtil.hashAdd(ref h_, skipFirstN);
                    global::IceInternal.HashUtil.hashAdd(ref h_, sdWorkingWithSecondSetMode);
                    return h_;
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override bool Equals(object other)
                {
                    if(!(other is TaskRunParams))
                    {
                        return false;
                    }
                    TaskRunParams o = (TaskRunParams)other;
                    if(!this.taskType.Equals(o.taskType))
                    {
                        return false;
                    }
                    if(!this.resultType.Equals(o.resultType))
                    {
                        return false;
                    }
                    if(!this.evaluationType.Equals(o.evaluationType))
                    {
                        return false;
                    }
                    if(!this.maxSizeOfResult.Equals(o.maxSizeOfResult))
                    {
                        return false;
                    }
                    if(!this.skipFirstN.Equals(o.skipFirstN))
                    {
                        return false;
                    }
                    if(!this.sdWorkingWithSecondSetMode.Equals(o.sdWorkingWithSecondSetMode))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator==(TaskRunParams lhs, TaskRunParams rhs)
                {
                    return Equals(lhs, rhs);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator!=(TaskRunParams lhs, TaskRunParams rhs)
                {
                    return !Equals(lhs, rhs);
                }

                #endregion

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_writeMembers(global::Ice.OutputStream ostr)
                {
                    ostr.writeEnum((int)this.taskType, 6);
                    ostr.writeEnum((int)this.resultType, 2);
                    ostr.writeEnum((int)this.evaluationType, 0);
                    ostr.writeLong(this.maxSizeOfResult);
                    ostr.writeInt(this.skipFirstN);
                    ostr.writeEnum((int)this.sdWorkingWithSecondSetMode, 2);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_readMembers(global::Ice.InputStream istr)
                {
                    this.taskType = (TaskTypeEnum)istr.readEnum(6);
                    this.resultType = (ResultTypeEnum)istr.readEnum(2);
                    this.evaluationType = (TaskEvaluationTypeEnum)istr.readEnum(0);
                    this.maxSizeOfResult = istr.readLong();
                    this.skipFirstN = istr.readInt();
                    this.sdWorkingWithSecondSetMode = (WorkingWithSecondSetModeEnum)istr.readEnum(2);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static void ice_write(global::Ice.OutputStream ostr, TaskRunParams v)
                {
                    v.ice_writeMembers(ostr);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static TaskRunParams ice_read(global::Ice.InputStream istr)
                {
                    var v = new TaskRunParams();
                    v.ice_readMembers(istr);
                    return v;
                }

                #endregion
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public enum BranchingStoppingCriterionEnum
            {
                MinimalLeafPurity,
                MinimalNodeFrequency,
                MinimalNodeFrequencyORMinimalLeafPurity
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class BranchingStoppingCriterionEnumHelper
            {
                public static void write(global::Ice.OutputStream ostr, BranchingStoppingCriterionEnum v)
                {
                    ostr.writeEnum((int)v, 2);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static BranchingStoppingCriterionEnum read(global::Ice.InputStream istr)
                {
                    BranchingStoppingCriterionEnum v;
                    v = (BranchingStoppingCriterionEnum)istr.readEnum(2);
                    return v;
                }
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            [global::System.Serializable]
            public partial class ETreeTaskRunParams : global::System.ICloneable
            {
                #region Slice data members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CategorialAttribute[] branchingAttributes;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public CategorialAttribute targetClassificationAttribute;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public float minimalLeafPurity;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int minimalNodeFrequency;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public BranchingStoppingCriterionEnum branchingStoppingCriterion;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int maximalTreeDepth;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public int noAttributesForBranching;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public long maxNumberOfHypotheses;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public bool onlyFullTree;

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public bool individualNodesBranching;

                #endregion

                partial void ice_initialize();

                #region Constructors

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ETreeTaskRunParams()
                {
                    this.targetClassificationAttribute = new CategorialAttribute();
                    ice_initialize();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public ETreeTaskRunParams(CategorialAttribute[] branchingAttributes, CategorialAttribute targetClassificationAttribute, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, float minimalLeafPurity, int minimalNodeFrequency, BranchingStoppingCriterionEnum branchingStoppingCriterion, int maximalTreeDepth, int noAttributesForBranching, long maxNumberOfHypotheses, bool onlyFullTree, bool individualNodesBranching)
                {
                    this.branchingAttributes = branchingAttributes;
                    this.targetClassificationAttribute = targetClassificationAttribute;
                    this.quantifiers = quantifiers;
                    this.minimalLeafPurity = minimalLeafPurity;
                    this.minimalNodeFrequency = minimalNodeFrequency;
                    this.branchingStoppingCriterion = branchingStoppingCriterion;
                    this.maximalTreeDepth = maximalTreeDepth;
                    this.noAttributesForBranching = noAttributesForBranching;
                    this.maxNumberOfHypotheses = maxNumberOfHypotheses;
                    this.onlyFullTree = onlyFullTree;
                    this.individualNodesBranching = individualNodesBranching;
                    ice_initialize();
                }

                #endregion

                #region ICloneable members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public object Clone()
                {
                    return MemberwiseClone();
                }

                #endregion

                #region Object members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override int GetHashCode()
                {
                    int h_ = 5381;
                    global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::MiningProcessor::ETreeTaskRunParams");
                    global::IceInternal.HashUtil.hashAdd(ref h_, branchingAttributes);
                    global::IceInternal.HashUtil.hashAdd(ref h_, targetClassificationAttribute);
                    global::IceInternal.HashUtil.hashAdd(ref h_, quantifiers);
                    global::IceInternal.HashUtil.hashAdd(ref h_, minimalLeafPurity);
                    global::IceInternal.HashUtil.hashAdd(ref h_, minimalNodeFrequency);
                    global::IceInternal.HashUtil.hashAdd(ref h_, branchingStoppingCriterion);
                    global::IceInternal.HashUtil.hashAdd(ref h_, maximalTreeDepth);
                    global::IceInternal.HashUtil.hashAdd(ref h_, noAttributesForBranching);
                    global::IceInternal.HashUtil.hashAdd(ref h_, maxNumberOfHypotheses);
                    global::IceInternal.HashUtil.hashAdd(ref h_, onlyFullTree);
                    global::IceInternal.HashUtil.hashAdd(ref h_, individualNodesBranching);
                    return h_;
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public override bool Equals(object other)
                {
                    if(object.ReferenceEquals(this, other))
                    {
                        return true;
                    }
                    if(other == null)
                    {
                        return false;
                    }
                    if(GetType() != other.GetType())
                    {
                        return false;
                    }
                    ETreeTaskRunParams o = (ETreeTaskRunParams)other;
                    if(this.branchingAttributes == null)
                    {
                        if(o.branchingAttributes != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(this.branchingAttributes, o.branchingAttributes))
                        {
                            return false;
                        }
                    }
                    if(this.targetClassificationAttribute == null)
                    {
                        if(o.targetClassificationAttribute != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!this.targetClassificationAttribute.Equals(o.targetClassificationAttribute))
                        {
                            return false;
                        }
                    }
                    if(this.quantifiers == null)
                    {
                        if(o.quantifiers != null)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        if(!IceUtilInternal.Arrays.Equals(this.quantifiers, o.quantifiers))
                        {
                            return false;
                        }
                    }
                    if(!this.minimalLeafPurity.Equals(o.minimalLeafPurity))
                    {
                        return false;
                    }
                    if(!this.minimalNodeFrequency.Equals(o.minimalNodeFrequency))
                    {
                        return false;
                    }
                    if(!this.branchingStoppingCriterion.Equals(o.branchingStoppingCriterion))
                    {
                        return false;
                    }
                    if(!this.maximalTreeDepth.Equals(o.maximalTreeDepth))
                    {
                        return false;
                    }
                    if(!this.noAttributesForBranching.Equals(o.noAttributesForBranching))
                    {
                        return false;
                    }
                    if(!this.maxNumberOfHypotheses.Equals(o.maxNumberOfHypotheses))
                    {
                        return false;
                    }
                    if(!this.onlyFullTree.Equals(o.onlyFullTree))
                    {
                        return false;
                    }
                    if(!this.individualNodesBranching.Equals(o.individualNodesBranching))
                    {
                        return false;
                    }
                    return true;
                }

                #endregion

                #region Comparison members

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator==(ETreeTaskRunParams lhs, ETreeTaskRunParams rhs)
                {
                    return Equals(lhs, rhs);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static bool operator!=(ETreeTaskRunParams lhs, ETreeTaskRunParams rhs)
                {
                    return !Equals(lhs, rhs);
                }

                #endregion

                #region Marshaling support

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_writeMembers(global::Ice.OutputStream ostr)
                {
                    CategorialAttributeSeqHelper.write(ostr, this.branchingAttributes);
                    CategorialAttribute.ice_write(ostr, this.targetClassificationAttribute);
                    global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrxSeqHelper.write(ostr, this.quantifiers);
                    ostr.writeFloat(this.minimalLeafPurity);
                    ostr.writeInt(this.minimalNodeFrequency);
                    ostr.writeEnum((int)this.branchingStoppingCriterion, 2);
                    ostr.writeInt(this.maximalTreeDepth);
                    ostr.writeInt(this.noAttributesForBranching);
                    ostr.writeLong(this.maxNumberOfHypotheses);
                    ostr.writeBool(this.onlyFullTree);
                    ostr.writeBool(this.individualNodesBranching);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public void ice_readMembers(global::Ice.InputStream istr)
                {
                    this.branchingAttributes = CategorialAttributeSeqHelper.read(istr);
                    this.targetClassificationAttribute = CategorialAttribute.ice_read(istr);
                    this.quantifiers = global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrxSeqHelper.read(istr);
                    this.minimalLeafPurity = istr.readFloat();
                    this.minimalNodeFrequency = istr.readInt();
                    this.branchingStoppingCriterion = (BranchingStoppingCriterionEnum)istr.readEnum(2);
                    this.maximalTreeDepth = istr.readInt();
                    this.noAttributesForBranching = istr.readInt();
                    this.maxNumberOfHypotheses = istr.readLong();
                    this.onlyFullTree = istr.readBool();
                    this.individualNodesBranching = istr.readBool();
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static void ice_write(global::Ice.OutputStream ostr, ETreeTaskRunParams v)
                {
                    if(v == null)
                    {
                        _nullMarshalValue.ice_writeMembers(ostr);
                    }
                    else
                    {
                        v.ice_writeMembers(ostr);
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public static ETreeTaskRunParams ice_read(global::Ice.InputStream istr)
                {
                    var v = new ETreeTaskRunParams();
                    v.ice_readMembers(istr);
                    return v;
                }

                private static readonly ETreeTaskRunParams _nullMarshalValue = new ETreeTaskRunParams();

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface MiningProcessorFunctions : global::Ice.Object, MiningProcessorFunctionsOperations_
            {
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface ETreeClassifierFunctions : global::Ice.Object, ETreeClassifierFunctionsOperations_
            {
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace MiningProcessor
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_SourceDataTableIdProvider_GetSourceDataTableId(string ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_AttributeNameProvider_GetAttributeNames(GuidAttributeNamePair[] ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_getAttribute(string ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetColumnValuesAndFrequencies(global::Ferda.Guha.Data.ValuesAndFrequencies ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetAttributeId(global::Ferda.Modules.GuidStruct ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetAttributeCardinality(global::Ferda.Guha.Data.CardinalityEnum ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetCategoriesIds(string[] ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetCategoriesNumericValues(double[] ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetBitString(BitStringIce ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetMissingInformationCategoryId(string[] ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_getCategoriesAndFrequencies(global::Ferda.Guha.Data.ValuesAndFrequencies ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetColumnName(string ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetCountVector(int[] ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetNextBitString(bool ret, BitStringIceWithCategoryId bitString);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGenerator_GetMaxBitStringCount(long ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGeneratorProvider_GetBitStringGenerator(BitStringGeneratorPrx ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BitStringGeneratorProvider_GetBitStringGenerators(BitStringGeneratorPrx[] ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_BooleanAttributeSettingFunctions_GetEntitySetting(IEntitySetting ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_MiningTaskFunctions_GetQuantifiers(global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_MiningTaskFunctions_GetResult(string ret, string statistics);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_MiningProcessorFunctions_Run(string ret, string resultInfo);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_MiningProcessorFunctions_GetNextBitString(BitStringIceWithCategoryId ret);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_MiningProcessorFunctions_ETreeRun(string ret, string resultInfo);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_ETreeClassifierFunctions_HelloWorld(string ret);
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace MiningProcessor
        {
            public struct BitStringGenerator_GetNextBitStringResult
            {
                public BitStringGenerator_GetNextBitStringResult(bool returnValue, BitStringIceWithCategoryId bitString)
                {
                    this.returnValue = returnValue;
                    this.bitString = bitString;
                }

                public bool returnValue;
                public BitStringIceWithCategoryId bitString;
            }

            public struct MiningTaskFunctions_GetResultResult
            {
                public MiningTaskFunctions_GetResultResult(string returnValue, string statistics)
                {
                    this.returnValue = returnValue;
                    this.statistics = statistics;
                }

                public string returnValue;
                public string statistics;
            }

            public struct MiningProcessorFunctions_RunResult
            {
                public MiningProcessorFunctions_RunResult(string returnValue, string resultInfo)
                {
                    this.returnValue = returnValue;
                    this.resultInfo = resultInfo;
                }

                public string returnValue;
                public string resultInfo;
            }

            public struct MiningProcessorFunctions_ETreeRunResult
            {
                public MiningProcessorFunctions_ETreeRunResult(string returnValue, string resultInfo)
                {
                    this.returnValue = returnValue;
                    this.resultInfo = resultInfo;
                }

                public string returnValue;
                public string resultInfo;
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace MiningProcessor
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface SourceDataTableIdProviderPrx : global::Ice.ObjectPrx
            {
                string GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<string> GetSourceDataTableIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string end_GetSourceDataTableId(global::Ice.AsyncResult asyncResult);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface AttributeNameProviderPrx : SourceDataTableIdProviderPrx
            {
                GuidAttributeNamePair[] GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> GetAttributeNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                GuidAttributeNamePair[] end_GetAttributeNames(global::Ice.AsyncResult asyncResult);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface BitStringGeneratorPrx : AttributeNameProviderPrx
            {
                string getAttribute(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<string> getAttributeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_getAttribute> begin_getAttribute(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_getAttribute(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_getAttribute(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string end_getAttribute(global::Ice.AsyncResult asyncResult);

                global::Ferda.Guha.Data.ValuesAndFrequencies GetColumnValuesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> GetColumnValuesAndFrequenciesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnValuesAndFrequencies> begin_GetColumnValuesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetColumnValuesAndFrequencies(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetColumnValuesAndFrequencies(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                global::Ferda.Guha.Data.ValuesAndFrequencies end_GetColumnValuesAndFrequencies(global::Ice.AsyncResult asyncResult);

                global::Ferda.Modules.GuidStruct GetAttributeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<global::Ferda.Modules.GuidStruct> GetAttributeIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeId> begin_GetAttributeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetAttributeId(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetAttributeId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                global::Ferda.Modules.GuidStruct end_GetAttributeId(global::Ice.AsyncResult asyncResult);

                global::Ferda.Guha.Data.CardinalityEnum GetAttributeCardinality(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.CardinalityEnum> GetAttributeCardinalityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeCardinality> begin_GetAttributeCardinality(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetAttributeCardinality(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetAttributeCardinality(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                global::Ferda.Guha.Data.CardinalityEnum end_GetAttributeCardinality(global::Ice.AsyncResult asyncResult);

                string[] GetCategoriesIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<string[]> GetCategoriesIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesIds> begin_GetCategoriesIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetCategoriesIds(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetCategoriesIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string[] end_GetCategoriesIds(global::Ice.AsyncResult asyncResult);

                double[] GetCategoriesNumericValues(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<double[]> GetCategoriesNumericValuesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesNumericValues> begin_GetCategoriesNumericValues(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetCategoriesNumericValues(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetCategoriesNumericValues(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                double[] end_GetCategoriesNumericValues(global::Ice.AsyncResult asyncResult);

                BitStringIce GetBitString(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<BitStringIce> GetBitStringAsync(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetBitString> begin_GetBitString(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetBitString(string categoryId, global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetBitString(string categoryId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                BitStringIce end_GetBitString(global::Ice.AsyncResult asyncResult);

                string[] GetMissingInformationCategoryId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<string[]> GetMissingInformationCategoryIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetMissingInformationCategoryId> begin_GetMissingInformationCategoryId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetMissingInformationCategoryId(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetMissingInformationCategoryId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string[] end_GetMissingInformationCategoryId(global::Ice.AsyncResult asyncResult);

                global::Ferda.Guha.Data.ValuesAndFrequencies getCategoriesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> getCategoriesAndFrequenciesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_getCategoriesAndFrequencies> begin_getCategoriesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_getCategoriesAndFrequencies(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_getCategoriesAndFrequencies(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                global::Ferda.Guha.Data.ValuesAndFrequencies end_getCategoriesAndFrequencies(global::Ice.AsyncResult asyncResult);

                string GetColumnName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<string> GetColumnNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnName> begin_GetColumnName(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetColumnName(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetColumnName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string end_GetColumnName(global::Ice.AsyncResult asyncResult);

                int[] GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<int[]> GetCountVectorAsync(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetCountVector> begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                int[] end_GetCountVector(global::Ice.AsyncResult asyncResult);

                bool GetNextBitString(int skipFirstN, out BitStringIceWithCategoryId bitString, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<BitStringGenerator_GetNextBitStringResult> GetNextBitStringAsync(int skipFirstN, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetNextBitString> begin_GetNextBitString(int skipFirstN, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetNextBitString(int skipFirstN, global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetNextBitString(int skipFirstN, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                bool end_GetNextBitString(out BitStringIceWithCategoryId bitString, global::Ice.AsyncResult asyncResult);

                long GetMaxBitStringCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<long> GetMaxBitStringCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGenerator_GetMaxBitStringCount> begin_GetMaxBitStringCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetMaxBitStringCount(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetMaxBitStringCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                long end_GetMaxBitStringCount(global::Ice.AsyncResult asyncResult);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface BitStringGeneratorProviderPrx : global::Ice.ObjectPrx
            {
                BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<BitStringGeneratorPrx> GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                BitStringGeneratorPrx end_GetBitStringGenerator(global::Ice.AsyncResult asyncResult);

                BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> GetBitStringGeneratorsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                BitStringGeneratorPrx[] end_GetBitStringGenerators(global::Ice.AsyncResult asyncResult);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface BooleanAttributeSettingFunctionsPrx : AttributeNameProviderPrx, BitStringGeneratorProviderPrx
            {
                IEntitySetting GetEntitySetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<IEntitySetting> GetEntitySettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_BooleanAttributeSettingFunctions_GetEntitySetting> begin_GetEntitySetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetEntitySetting(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetEntitySetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                IEntitySetting end_GetEntitySetting(global::Ice.AsyncResult asyncResult);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx : BooleanAttributeSettingFunctionsPrx, BitStringGeneratorPrx
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface MiningTaskFunctionsPrx : AttributeNameProviderPrx, BitStringGeneratorProviderPrx
            {
                global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] GetQuantifiers(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[]> GetQuantifiersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_MiningTaskFunctions_GetQuantifiers> begin_GetQuantifiers(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetQuantifiers(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetQuantifiers(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] end_GetQuantifiers(global::Ice.AsyncResult asyncResult);

                string GetResult(out string statistics, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<MiningTaskFunctions_GetResultResult> GetResultAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_MiningTaskFunctions_GetResult> begin_GetResult(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetResult(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetResult(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string end_GetResult(out string statistics, global::Ice.AsyncResult asyncResult);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface MiningProcessorFunctionsPrx : global::Ice.ObjectPrx
            {
                string Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, out string resultInfo, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<MiningProcessorFunctions_RunResult> RunAsync(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_MiningProcessorFunctions_Run> begin_Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string end_Run(out string resultInfo, global::Ice.AsyncResult asyncResult);

                BitStringIceWithCategoryId GetNextBitString(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<BitStringIceWithCategoryId> GetNextBitStringAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_MiningProcessorFunctions_GetNextBitString> begin_GetNextBitString(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_GetNextBitString(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_GetNextBitString(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                BitStringIceWithCategoryId end_GetNextBitString(global::Ice.AsyncResult asyncResult);

                string ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, out string resultInfo, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<MiningProcessorFunctions_ETreeRunResult> ETreeRunAsync(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_MiningProcessorFunctions_ETreeRun> begin_ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string end_ETreeRun(out string resultInfo, global::Ice.AsyncResult asyncResult);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface ETreeClassifierFunctionsPrx : global::Ice.ObjectPrx
            {
                string HelloWorld(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<string> HelloWorldAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_ETreeClassifierFunctions_HelloWorld> begin_HelloWorld(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_HelloWorld(global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_HelloWorld(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                string end_HelloWorld(global::Ice.AsyncResult asyncResult);
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace MiningProcessor
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface SourceDataTableIdProviderOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string GetSourceDataTableId(global::Ice.Current current = null);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface AttributeNameProviderOperations_ : SourceDataTableIdProviderOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                GuidAttributeNamePair[] GetAttributeNames(global::Ice.Current current = null);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface BitStringGeneratorOperations_ : AttributeNameProviderOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string getAttribute(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                global::Ferda.Guha.Data.ValuesAndFrequencies GetColumnValuesAndFrequencies(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                global::Ferda.Modules.GuidStruct GetAttributeId(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                global::Ferda.Guha.Data.CardinalityEnum GetAttributeCardinality(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string[] GetCategoriesIds(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                double[] GetCategoriesNumericValues(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                BitStringIce GetBitString(string categoryId, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string[] GetMissingInformationCategoryId(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                global::Ferda.Guha.Data.ValuesAndFrequencies getCategoriesAndFrequencies(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string GetColumnName(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                int[] GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                bool GetNextBitString(int skipFirstN, out BitStringIceWithCategoryId bitString, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                long GetMaxBitStringCount(global::Ice.Current current = null);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface BitStringGeneratorProviderOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.Current current = null);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface BooleanAttributeSettingFunctionsOperations_ : AttributeNameProviderOperations_, BitStringGeneratorProviderOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                IEntitySetting GetEntitySetting(global::Ice.Current current = null);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface BooleanAttributeSettingWithBSGenerationAbilityFunctionsOperations_ : BooleanAttributeSettingFunctionsOperations_, BitStringGeneratorOperations_
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface MiningTaskFunctionsOperations_ : AttributeNameProviderOperations_, BitStringGeneratorProviderOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] GetQuantifiers(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string GetResult(out string statistics, global::Ice.Current current = null);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface MiningProcessorFunctionsOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, out string resultInfo, global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                BitStringIceWithCategoryId GetNextBitString(global::Ice.Current current = null);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, out string resultInfo, global::Ice.Current current = null);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface ETreeClassifierFunctionsOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                string HelloWorld(global::Ice.Current current = null);
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class QuantifierBaseFunctionsPrxSeqHelper
                {
                    public static void write(global::Ice.OutputStream ostr, QuantifierBaseFunctionsPrx[] v)
                    {
                        if(v == null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Length);
                            for(int ix = 0; ix < v.Length; ++ix)
                            {
                                QuantifierBaseFunctionsPrxHelper.write(ostr, v[ix]);
                            }
                        }
                    }

                    public static QuantifierBaseFunctionsPrx[] read(global::Ice.InputStream istr)
                    {
                        QuantifierBaseFunctionsPrx[] v;
                        {
                            int szx = istr.readAndCheckSeqSize(2);
                            v = new QuantifierBaseFunctionsPrx[szx];
                            for(int ix = 0; ix < szx; ++ix)
                            {
                                v[ix] = QuantifierBaseFunctionsPrxHelper.read(istr);
                            }
                        }
                        return v;
                    }
                }
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace MiningProcessor
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class GuidAttributeNamePairSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, GuidAttributeNamePair[] v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            (v[ix] == null ? new GuidAttributeNamePair() : v[ix]).ice_writeMembers(ostr);
                        }
                    }
                }

                public static GuidAttributeNamePair[] read(global::Ice.InputStream istr)
                {
                    GuidAttributeNamePair[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(2);
                        v = new GuidAttributeNamePair[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = new GuidAttributeNamePair();
                            v[ix].ice_readMembers(istr);
                        }
                    }
                    return v;
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class SourceDataTableIdProviderPrxHelper : global::Ice.ObjectPrxHelperBase, SourceDataTableIdProviderPrx
            {
                public SourceDataTableIdProviderPrxHelper()
                {
                }

                public SourceDataTableIdProviderPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public string GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetSourceDataTableIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<string> GetSourceDataTableIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetSourceDataTableIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_GetSourceDataTableIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetSourceDataTableId_name = "GetSourceDataTableId";

                private void _iceI_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _GetSourceDataTableId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetSourceDataTableId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(context, callback, cookie, false);
                }

                public string end_GetSourceDataTableId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetSourceDataTableId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SourceDataTableIdProvider_GetSourceDataTableId, string>(
                        (Callback_SourceDataTableIdProvider_GetSourceDataTableId cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetSourceDataTableId_name, cookie, completedCallback);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static SourceDataTableIdProviderPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SourceDataTableIdProviderPrx r = b as SourceDataTableIdProviderPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        SourceDataTableIdProviderPrxHelper h = new SourceDataTableIdProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static SourceDataTableIdProviderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SourceDataTableIdProviderPrx r = b as SourceDataTableIdProviderPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        SourceDataTableIdProviderPrxHelper h = new SourceDataTableIdProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static SourceDataTableIdProviderPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            SourceDataTableIdProviderPrxHelper h = new SourceDataTableIdProviderPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static SourceDataTableIdProviderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            SourceDataTableIdProviderPrxHelper h = new SourceDataTableIdProviderPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static SourceDataTableIdProviderPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    SourceDataTableIdProviderPrx r = b as SourceDataTableIdProviderPrx;
                    if(r == null)
                    {
                        SourceDataTableIdProviderPrxHelper h = new SourceDataTableIdProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static SourceDataTableIdProviderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    SourceDataTableIdProviderPrxHelper h = new SourceDataTableIdProviderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, SourceDataTableIdProviderPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static SourceDataTableIdProviderPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        SourceDataTableIdProviderPrxHelper result = new SourceDataTableIdProviderPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class AttributeNameProviderPrxHelper : global::Ice.ObjectPrxHelperBase, AttributeNameProviderPrx
            {
                public AttributeNameProviderPrxHelper()
                {
                }

                public AttributeNameProviderPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public string GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetSourceDataTableIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public GuidAttributeNamePair[] GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<string> GetSourceDataTableIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetSourceDataTableIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_GetSourceDataTableIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetSourceDataTableId_name = "GetSourceDataTableId";

                private void _iceI_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _GetSourceDataTableId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> GetAttributeNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeNamesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> _iceI_GetAttributeNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<GuidAttributeNamePair[]>(progress, cancel);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeNames_name = "GetAttributeNames";

                private void _iceI_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<GuidAttributeNamePair[]>(completed);
                    outAsync.invoke(
                        _GetAttributeNames_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            GuidAttributeNamePair[] ret;
                            ret = GuidAttributeNamePairSeqHelper.read(istr);
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetSourceDataTableId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(context, callback, cookie, false);
                }

                public string end_GetSourceDataTableId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetSourceDataTableId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SourceDataTableIdProvider_GetSourceDataTableId, string>(
                        (Callback_SourceDataTableIdProvider_GetSourceDataTableId cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetSourceDataTableId_name, cookie, completedCallback);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeNames(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(context, callback, cookie, false);
                }

                public GuidAttributeNamePair[] end_GetAttributeNames(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeNames_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<GuidAttributeNamePair[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_AttributeNameProvider_GetAttributeNames, GuidAttributeNamePair[]>(
                        (Callback_AttributeNameProvider_GetAttributeNames cb, GuidAttributeNamePair[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeNames_name, cookie, completedCallback);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static AttributeNameProviderPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    AttributeNameProviderPrx r = b as AttributeNameProviderPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        AttributeNameProviderPrxHelper h = new AttributeNameProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static AttributeNameProviderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    AttributeNameProviderPrx r = b as AttributeNameProviderPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        AttributeNameProviderPrxHelper h = new AttributeNameProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static AttributeNameProviderPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            AttributeNameProviderPrxHelper h = new AttributeNameProviderPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static AttributeNameProviderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            AttributeNameProviderPrxHelper h = new AttributeNameProviderPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static AttributeNameProviderPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    AttributeNameProviderPrx r = b as AttributeNameProviderPrx;
                    if(r == null)
                    {
                        AttributeNameProviderPrxHelper h = new AttributeNameProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static AttributeNameProviderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    AttributeNameProviderPrxHelper h = new AttributeNameProviderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, AttributeNameProviderPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static AttributeNameProviderPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        AttributeNameProviderPrxHelper result = new AttributeNameProviderPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class BitStringGeneratorPrxHelper : global::Ice.ObjectPrxHelperBase, BitStringGeneratorPrx
            {
                public BitStringGeneratorPrxHelper()
                {
                }

                public BitStringGeneratorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public string GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetSourceDataTableIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public GuidAttributeNamePair[] GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string getAttribute(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_getAttributeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Guha.Data.ValuesAndFrequencies GetColumnValuesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetColumnValuesAndFrequenciesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Modules.GuidStruct GetAttributeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Guha.Data.CardinalityEnum GetAttributeCardinality(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeCardinalityAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string[] GetCategoriesIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetCategoriesIdsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public double[] GetCategoriesNumericValues(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetCategoriesNumericValuesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringIce GetBitString(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringAsync(categoryId, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string[] GetMissingInformationCategoryId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetMissingInformationCategoryIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Guha.Data.ValuesAndFrequencies getCategoriesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_getCategoriesAndFrequenciesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string GetColumnName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetColumnNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public int[] GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetCountVectorAsync(masterIdColumn, masterDataTableName, detailIdColumn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public bool GetNextBitString(int skipFirstN, out BitStringIceWithCategoryId bitString, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        var result_ = _iceI_GetNextBitStringAsync(skipFirstN, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        bitString = result_.bitString;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public long GetMaxBitStringCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetMaxBitStringCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<string> GetSourceDataTableIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetSourceDataTableIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_GetSourceDataTableIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetSourceDataTableId_name = "GetSourceDataTableId";

                private void _iceI_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _GetSourceDataTableId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> GetAttributeNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeNamesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> _iceI_GetAttributeNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<GuidAttributeNamePair[]>(progress, cancel);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeNames_name = "GetAttributeNames";

                private void _iceI_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<GuidAttributeNamePair[]>(completed);
                    outAsync.invoke(
                        _GetAttributeNames_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            GuidAttributeNamePair[] ret;
                            ret = GuidAttributeNamePairSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<string> getAttributeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_getAttributeAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_getAttributeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_getAttribute_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_getAttribute(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _getAttribute_name = "getAttribute";

                private void _iceI_getAttribute(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _getAttribute_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> GetColumnValuesAndFrequenciesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetColumnValuesAndFrequenciesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> _iceI_GetColumnValuesAndFrequenciesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetColumnValuesAndFrequencies_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Guha.Data.ValuesAndFrequencies>(progress, cancel);
                    _iceI_GetColumnValuesAndFrequencies(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetColumnValuesAndFrequencies_name = "GetColumnValuesAndFrequencies";

                private void _iceI_GetColumnValuesAndFrequencies(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Guha.Data.ValuesAndFrequencies>(completed);
                    outAsync.invoke(
                        _GetColumnValuesAndFrequencies_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Guha.Data.ValuesAndFrequencies ret = null;
                            ret = global::Ferda.Guha.Data.ValuesAndFrequencies.ice_read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Modules.GuidStruct> GetAttributeIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Modules.GuidStruct> _iceI_GetAttributeIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.GuidStruct>(progress, cancel);
                    _iceI_GetAttributeId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeId_name = "GetAttributeId";

                private void _iceI_GetAttributeId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Modules.GuidStruct>(completed);
                    outAsync.invoke(
                        _GetAttributeId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Modules.GuidStruct ret = null;
                            ret = global::Ferda.Modules.GuidStruct.ice_read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.CardinalityEnum> GetAttributeCardinalityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeCardinalityAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.CardinalityEnum> _iceI_GetAttributeCardinalityAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeCardinality_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Guha.Data.CardinalityEnum>(progress, cancel);
                    _iceI_GetAttributeCardinality(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeCardinality_name = "GetAttributeCardinality";

                private void _iceI_GetAttributeCardinality(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Guha.Data.CardinalityEnum>(completed);
                    outAsync.invoke(
                        _GetAttributeCardinality_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Guha.Data.CardinalityEnum ret;
                            ret = (global::Ferda.Guha.Data.CardinalityEnum)istr.readEnum(3);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<string[]> GetCategoriesIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetCategoriesIdsAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string[]> _iceI_GetCategoriesIdsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetCategoriesIds_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                    _iceI_GetCategoriesIds(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetCategoriesIds_name = "GetCategoriesIds";

                private void _iceI_GetCategoriesIds(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string[]>(completed);
                    outAsync.invoke(
                        _GetCategoriesIds_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string[] ret;
                            ret = global::Ferda.Modules.StringSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<double[]> GetCategoriesNumericValuesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetCategoriesNumericValuesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<double[]> _iceI_GetCategoriesNumericValuesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetCategoriesNumericValues_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<double[]>(progress, cancel);
                    _iceI_GetCategoriesNumericValues(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetCategoriesNumericValues_name = "GetCategoriesNumericValues";

                private void _iceI_GetCategoriesNumericValues(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<double[]>(completed);
                    outAsync.invoke(
                        _GetCategoriesNumericValues_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            double[] ret;
                            ret = global::Ferda.Modules.DoubleSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringIce> GetBitStringAsync(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringAsync(categoryId, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringIce> _iceI_GetBitStringAsync(string iceP_categoryId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitString_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringIce>(progress, cancel);
                    _iceI_GetBitString(iceP_categoryId, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitString_name = "GetBitString";

                private void _iceI_GetBitString(string iceP_categoryId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringIce>(completed);
                    outAsync.invoke(
                        _GetBitString_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeString(iceP_categoryId);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringIce ret = null;
                            istr.readValue((BitStringIce v) => {ret = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<string[]> GetMissingInformationCategoryIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetMissingInformationCategoryIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string[]> _iceI_GetMissingInformationCategoryIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetMissingInformationCategoryId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                    _iceI_GetMissingInformationCategoryId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetMissingInformationCategoryId_name = "GetMissingInformationCategoryId";

                private void _iceI_GetMissingInformationCategoryId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string[]>(completed);
                    outAsync.invoke(
                        _GetMissingInformationCategoryId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string[] ret;
                            ret = global::Ferda.Modules.StringOptHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> getCategoriesAndFrequenciesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_getCategoriesAndFrequenciesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> _iceI_getCategoriesAndFrequenciesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_getCategoriesAndFrequencies_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Guha.Data.ValuesAndFrequencies>(progress, cancel);
                    _iceI_getCategoriesAndFrequencies(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _getCategoriesAndFrequencies_name = "getCategoriesAndFrequencies";

                private void _iceI_getCategoriesAndFrequencies(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Guha.Data.ValuesAndFrequencies>(completed);
                    outAsync.invoke(
                        _getCategoriesAndFrequencies_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Guha.Data.ValuesAndFrequencies ret = null;
                            ret = global::Ferda.Guha.Data.ValuesAndFrequencies.ice_read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<string> GetColumnNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetColumnNameAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_GetColumnNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetColumnName_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_GetColumnName(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetColumnName_name = "GetColumnName";

                private void _iceI_GetColumnName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _GetColumnName_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<int[]> GetCountVectorAsync(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetCountVectorAsync(masterIdColumn, masterDataTableName, detailIdColumn, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<int[]> _iceI_GetCountVectorAsync(string iceP_masterIdColumn, string iceP_masterDataTableName, string iceP_detailIdColumn, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetCountVector_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<int[]>(progress, cancel);
                    _iceI_GetCountVector(iceP_masterIdColumn, iceP_masterDataTableName, iceP_detailIdColumn, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetCountVector_name = "GetCountVector";

                private void _iceI_GetCountVector(string iceP_masterIdColumn, string iceP_masterDataTableName, string iceP_detailIdColumn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<int[]>(completed);
                    outAsync.invoke(
                        _GetCountVector_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeString(iceP_masterIdColumn);
                            ostr.writeString(iceP_masterDataTableName);
                            ostr.writeString(iceP_detailIdColumn);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            int[] ret;
                            ret = global::Ferda.Modules.IntSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGenerator_GetNextBitStringResult> GetNextBitStringAsync(int skipFirstN, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetNextBitStringAsync(skipFirstN, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGenerator_GetNextBitStringResult> _iceI_GetNextBitStringAsync(int iceP_skipFirstN, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetNextBitString_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGenerator_GetNextBitStringResult>(progress, cancel);
                    _iceI_GetNextBitString(iceP_skipFirstN, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetNextBitString_name = "GetNextBitString";

                private void _iceI_GetNextBitString(int iceP_skipFirstN, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGenerator_GetNextBitStringResult>(completed);
                    outAsync.invoke(
                        _GetNextBitString_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeInt(iceP_skipFirstN);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGenerator_GetNextBitStringResult ret = new BitStringGenerator_GetNextBitStringResult();
                            ret.bitString = BitStringIceWithCategoryId.ice_read(istr);
                            ret.returnValue = istr.readBool();
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<long> GetMaxBitStringCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetMaxBitStringCountAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<long> _iceI_GetMaxBitStringCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetMaxBitStringCount_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                    _iceI_GetMaxBitStringCount(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetMaxBitStringCount_name = "GetMaxBitStringCount";

                private void _iceI_GetMaxBitStringCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<long>(completed);
                    outAsync.invoke(
                        _GetMaxBitStringCount_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            long ret;
                            ret = istr.readLong();
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetSourceDataTableId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(context, callback, cookie, false);
                }

                public string end_GetSourceDataTableId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetSourceDataTableId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SourceDataTableIdProvider_GetSourceDataTableId, string>(
                        (Callback_SourceDataTableIdProvider_GetSourceDataTableId cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetSourceDataTableId_name, cookie, completedCallback);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeNames(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(context, callback, cookie, false);
                }

                public GuidAttributeNamePair[] end_GetAttributeNames(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeNames_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<GuidAttributeNamePair[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_AttributeNameProvider_GetAttributeNames, GuidAttributeNamePair[]>(
                        (Callback_AttributeNameProvider_GetAttributeNames cb, GuidAttributeNamePair[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeNames_name, cookie, completedCallback);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_getAttribute> begin_getAttribute(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_getAttribute(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_getAttribute(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_getAttribute(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_getAttribute(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_getAttribute(context, callback, cookie, false);
                }

                public string end_getAttribute(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAttribute_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_getAttribute> begin_getAttribute(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_getAttribute_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_getAttribute, string>(
                        (Callback_BitStringGenerator_getAttribute cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getAttribute_name, cookie, completedCallback);
                    _iceI_getAttribute(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnValuesAndFrequencies> begin_GetColumnValuesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetColumnValuesAndFrequencies(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetColumnValuesAndFrequencies(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetColumnValuesAndFrequencies(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetColumnValuesAndFrequencies(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetColumnValuesAndFrequencies(context, callback, cookie, false);
                }

                public global::Ferda.Guha.Data.ValuesAndFrequencies end_GetColumnValuesAndFrequencies(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetColumnValuesAndFrequencies_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Guha.Data.ValuesAndFrequencies>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnValuesAndFrequencies> begin_GetColumnValuesAndFrequencies(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetColumnValuesAndFrequencies_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetColumnValuesAndFrequencies, global::Ferda.Guha.Data.ValuesAndFrequencies>(
                        (Callback_BitStringGenerator_GetColumnValuesAndFrequencies cb, global::Ferda.Guha.Data.ValuesAndFrequencies ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetColumnValuesAndFrequencies_name, cookie, completedCallback);
                    _iceI_GetColumnValuesAndFrequencies(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeId> begin_GetAttributeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeId(context, callback, cookie, false);
                }

                public global::Ferda.Modules.GuidStruct end_GetAttributeId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.GuidStruct>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeId> begin_GetAttributeId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetAttributeId, global::Ferda.Modules.GuidStruct>(
                        (Callback_BitStringGenerator_GetAttributeId cb, global::Ferda.Modules.GuidStruct ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeId_name, cookie, completedCallback);
                    _iceI_GetAttributeId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeCardinality> begin_GetAttributeCardinality(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeCardinality(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeCardinality(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeCardinality(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeCardinality(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeCardinality(context, callback, cookie, false);
                }

                public global::Ferda.Guha.Data.CardinalityEnum end_GetAttributeCardinality(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeCardinality_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Guha.Data.CardinalityEnum>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeCardinality> begin_GetAttributeCardinality(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeCardinality_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetAttributeCardinality, global::Ferda.Guha.Data.CardinalityEnum>(
                        (Callback_BitStringGenerator_GetAttributeCardinality cb, global::Ferda.Guha.Data.CardinalityEnum ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeCardinality_name, cookie, completedCallback);
                    _iceI_GetAttributeCardinality(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesIds> begin_GetCategoriesIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetCategoriesIds(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetCategoriesIds(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCategoriesIds(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetCategoriesIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCategoriesIds(context, callback, cookie, false);
                }

                public string[] end_GetCategoriesIds(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetCategoriesIds_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesIds> begin_GetCategoriesIds(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetCategoriesIds_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetCategoriesIds, string[]>(
                        (Callback_BitStringGenerator_GetCategoriesIds cb, string[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetCategoriesIds_name, cookie, completedCallback);
                    _iceI_GetCategoriesIds(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesNumericValues> begin_GetCategoriesNumericValues(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetCategoriesNumericValues(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetCategoriesNumericValues(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCategoriesNumericValues(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetCategoriesNumericValues(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCategoriesNumericValues(context, callback, cookie, false);
                }

                public double[] end_GetCategoriesNumericValues(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetCategoriesNumericValues_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<double[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesNumericValues> begin_GetCategoriesNumericValues(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetCategoriesNumericValues_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetCategoriesNumericValues, double[]>(
                        (Callback_BitStringGenerator_GetCategoriesNumericValues cb, double[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetCategoriesNumericValues_name, cookie, completedCallback);
                    _iceI_GetCategoriesNumericValues(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetBitString> begin_GetBitString(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitString(categoryId, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitString(string categoryId, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitString(categoryId, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitString(string categoryId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitString(categoryId, context, callback, cookie, false);
                }

                public BitStringIce end_GetBitString(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitString_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringIce>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetBitString> begin_GetBitString(string iceP_categoryId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitString_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetBitString, BitStringIce>(
                        (Callback_BitStringGenerator_GetBitString cb, BitStringIce ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitString_name, cookie, completedCallback);
                    _iceI_GetBitString(iceP_categoryId, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetMissingInformationCategoryId> begin_GetMissingInformationCategoryId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetMissingInformationCategoryId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetMissingInformationCategoryId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetMissingInformationCategoryId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetMissingInformationCategoryId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetMissingInformationCategoryId(context, callback, cookie, false);
                }

                public string[] end_GetMissingInformationCategoryId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetMissingInformationCategoryId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetMissingInformationCategoryId> begin_GetMissingInformationCategoryId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetMissingInformationCategoryId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetMissingInformationCategoryId, string[]>(
                        (Callback_BitStringGenerator_GetMissingInformationCategoryId cb, string[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetMissingInformationCategoryId_name, cookie, completedCallback);
                    _iceI_GetMissingInformationCategoryId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_getCategoriesAndFrequencies> begin_getCategoriesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_getCategoriesAndFrequencies(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_getCategoriesAndFrequencies(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_getCategoriesAndFrequencies(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_getCategoriesAndFrequencies(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_getCategoriesAndFrequencies(context, callback, cookie, false);
                }

                public global::Ferda.Guha.Data.ValuesAndFrequencies end_getCategoriesAndFrequencies(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getCategoriesAndFrequencies_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Guha.Data.ValuesAndFrequencies>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_getCategoriesAndFrequencies> begin_getCategoriesAndFrequencies(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_getCategoriesAndFrequencies_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_getCategoriesAndFrequencies, global::Ferda.Guha.Data.ValuesAndFrequencies>(
                        (Callback_BitStringGenerator_getCategoriesAndFrequencies cb, global::Ferda.Guha.Data.ValuesAndFrequencies ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getCategoriesAndFrequencies_name, cookie, completedCallback);
                    _iceI_getCategoriesAndFrequencies(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnName> begin_GetColumnName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetColumnName(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetColumnName(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetColumnName(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetColumnName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetColumnName(context, callback, cookie, false);
                }

                public string end_GetColumnName(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetColumnName_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnName> begin_GetColumnName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetColumnName_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetColumnName, string>(
                        (Callback_BitStringGenerator_GetColumnName cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetColumnName_name, cookie, completedCallback);
                    _iceI_GetColumnName(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetCountVector> begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetCountVector(masterIdColumn, masterDataTableName, detailIdColumn, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCountVector(masterIdColumn, masterDataTableName, detailIdColumn, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCountVector(masterIdColumn, masterDataTableName, detailIdColumn, context, callback, cookie, false);
                }

                public int[] end_GetCountVector(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetCountVector_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<int[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetCountVector> begin_GetCountVector(string iceP_masterIdColumn, string iceP_masterDataTableName, string iceP_detailIdColumn, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetCountVector_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetCountVector, int[]>(
                        (Callback_BitStringGenerator_GetCountVector cb, int[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetCountVector_name, cookie, completedCallback);
                    _iceI_GetCountVector(iceP_masterIdColumn, iceP_masterDataTableName, iceP_detailIdColumn, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetNextBitString> begin_GetNextBitString(int skipFirstN, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetNextBitString(skipFirstN, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetNextBitString(int skipFirstN, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetNextBitString(skipFirstN, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetNextBitString(int skipFirstN, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetNextBitString(skipFirstN, context, callback, cookie, false);
                }

                public bool end_GetNextBitString(out BitStringIceWithCategoryId bitString, global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetNextBitString_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGenerator_GetNextBitStringResult>)resultI_.OutgoingAsync;
                    var result_ = outgoing_.getResult(resultI_.wait());
                    bitString = result_.bitString;
                    return result_.returnValue;
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetNextBitString> begin_GetNextBitString(int iceP_skipFirstN, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetNextBitString_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetNextBitString, BitStringGenerator_GetNextBitStringResult>(
                        (Callback_BitStringGenerator_GetNextBitString cb, BitStringGenerator_GetNextBitStringResult ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret.returnValue, ret.bitString);
                            }
                        },
                        this, _GetNextBitString_name, cookie, completedCallback);
                    _iceI_GetNextBitString(iceP_skipFirstN, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetMaxBitStringCount> begin_GetMaxBitStringCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetMaxBitStringCount(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetMaxBitStringCount(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetMaxBitStringCount(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetMaxBitStringCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetMaxBitStringCount(context, callback, cookie, false);
                }

                public long end_GetMaxBitStringCount(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetMaxBitStringCount_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetMaxBitStringCount> begin_GetMaxBitStringCount(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetMaxBitStringCount_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetMaxBitStringCount, long>(
                        (Callback_BitStringGenerator_GetMaxBitStringCount cb, long ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetMaxBitStringCount_name, cookie, completedCallback);
                    _iceI_GetMaxBitStringCount(context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static BitStringGeneratorPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BitStringGeneratorPrx r = b as BitStringGeneratorPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        BitStringGeneratorPrxHelper h = new BitStringGeneratorPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BitStringGeneratorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BitStringGeneratorPrx r = b as BitStringGeneratorPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        BitStringGeneratorPrxHelper h = new BitStringGeneratorPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BitStringGeneratorPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            BitStringGeneratorPrxHelper h = new BitStringGeneratorPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static BitStringGeneratorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            BitStringGeneratorPrxHelper h = new BitStringGeneratorPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static BitStringGeneratorPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BitStringGeneratorPrx r = b as BitStringGeneratorPrx;
                    if(r == null)
                    {
                        BitStringGeneratorPrxHelper h = new BitStringGeneratorPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BitStringGeneratorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    BitStringGeneratorPrxHelper h = new BitStringGeneratorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::BitStringGenerator",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[1];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, BitStringGeneratorPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static BitStringGeneratorPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        BitStringGeneratorPrxHelper result = new BitStringGeneratorPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class BitStringGeneratorSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, BitStringGeneratorPrx[] v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            BitStringGeneratorPrxHelper.write(ostr, v[ix]);
                        }
                    }
                }

                public static BitStringGeneratorPrx[] read(global::Ice.InputStream istr)
                {
                    BitStringGeneratorPrx[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(2);
                        v = new BitStringGeneratorPrx[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = BitStringGeneratorPrxHelper.read(istr);
                        }
                    }
                    return v;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class IEntitySettingSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, IEntitySetting[] v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            ostr.writeValue(v[ix]);
                        }
                    }
                }

                public static IEntitySetting[] read(global::Ice.InputStream istr)
                {
                    IEntitySetting[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(1);
                        v = new IEntitySetting[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            istr.readValue(global::IceInternal.Patcher.arrayReadValue<IEntitySetting>(v, ix));
                        }
                    }
                    return v;
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class BitStringGeneratorProviderPrxHelper : global::Ice.ObjectPrxHelperBase, BitStringGeneratorProviderPrx
            {
                public BitStringGeneratorProviderPrxHelper()
                {
                }

                public BitStringGeneratorProviderPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringGeneratorAsync(attributeId, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringGeneratorsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<BitStringGeneratorPrx> GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringGeneratorAsync(attributeId, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGeneratorPrx> _iceI_GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct iceP_attributeId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitStringGenerator_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGeneratorPrx>(progress, cancel);
                    _iceI_GetBitStringGenerator(iceP_attributeId, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitStringGenerator_name = "GetBitStringGenerator";

                private void _iceI_GetBitStringGenerator(global::Ferda.Modules.GuidStruct iceP_attributeId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGeneratorPrx>(completed);
                    outAsync.invoke(
                        _GetBitStringGenerator_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ferda.Modules.GuidStruct.ice_write(ostr, iceP_attributeId);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGeneratorPrx ret;
                            ret = BitStringGeneratorPrxHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> GetBitStringGeneratorsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringGeneratorsAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> _iceI_GetBitStringGeneratorsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitStringGenerators_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGeneratorPrx[]>(progress, cancel);
                    _iceI_GetBitStringGenerators(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitStringGenerators_name = "GetBitStringGenerators";

                private void _iceI_GetBitStringGenerators(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGeneratorPrx[]>(completed);
                    outAsync.invoke(
                        _GetBitStringGenerators_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGeneratorPrx[] ret;
                            ret = BitStringGeneratorSeqHelper.read(istr);
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitStringGenerator(attributeId, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerator(attributeId, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerator(attributeId, context, callback, cookie, false);
                }

                public BitStringGeneratorPrx end_GetBitStringGenerator(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitStringGenerator_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGeneratorPrx>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct iceP_attributeId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitStringGenerator_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGeneratorProvider_GetBitStringGenerator, BitStringGeneratorPrx>(
                        (Callback_BitStringGeneratorProvider_GetBitStringGenerator cb, BitStringGeneratorPrx ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitStringGenerator_name, cookie, completedCallback);
                    _iceI_GetBitStringGenerator(iceP_attributeId, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitStringGenerators(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerators(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerators(context, callback, cookie, false);
                }

                public BitStringGeneratorPrx[] end_GetBitStringGenerators(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitStringGenerators_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGeneratorPrx[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitStringGenerators_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGeneratorProvider_GetBitStringGenerators, BitStringGeneratorPrx[]>(
                        (Callback_BitStringGeneratorProvider_GetBitStringGenerators cb, BitStringGeneratorPrx[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitStringGenerators_name, cookie, completedCallback);
                    _iceI_GetBitStringGenerators(context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static BitStringGeneratorProviderPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BitStringGeneratorProviderPrx r = b as BitStringGeneratorProviderPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        BitStringGeneratorProviderPrxHelper h = new BitStringGeneratorProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BitStringGeneratorProviderPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BitStringGeneratorProviderPrx r = b as BitStringGeneratorProviderPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        BitStringGeneratorProviderPrxHelper h = new BitStringGeneratorProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BitStringGeneratorProviderPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            BitStringGeneratorProviderPrxHelper h = new BitStringGeneratorProviderPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static BitStringGeneratorProviderPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            BitStringGeneratorProviderPrxHelper h = new BitStringGeneratorProviderPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static BitStringGeneratorProviderPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BitStringGeneratorProviderPrx r = b as BitStringGeneratorProviderPrx;
                    if(r == null)
                    {
                        BitStringGeneratorProviderPrxHelper h = new BitStringGeneratorProviderPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BitStringGeneratorProviderPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    BitStringGeneratorProviderPrxHelper h = new BitStringGeneratorProviderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::BitStringGeneratorProvider",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, BitStringGeneratorProviderPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static BitStringGeneratorProviderPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        BitStringGeneratorProviderPrxHelper result = new BitStringGeneratorProviderPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class BooleanAttributeSettingFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, BooleanAttributeSettingFunctionsPrx
            {
                public BooleanAttributeSettingFunctionsPrxHelper()
                {
                }

                public BooleanAttributeSettingFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public string GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetSourceDataTableIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public GuidAttributeNamePair[] GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringGeneratorAsync(attributeId, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringGeneratorsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public IEntitySetting GetEntitySetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetEntitySettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<string> GetSourceDataTableIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetSourceDataTableIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_GetSourceDataTableIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetSourceDataTableId_name = "GetSourceDataTableId";

                private void _iceI_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _GetSourceDataTableId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> GetAttributeNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeNamesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> _iceI_GetAttributeNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<GuidAttributeNamePair[]>(progress, cancel);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeNames_name = "GetAttributeNames";

                private void _iceI_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<GuidAttributeNamePair[]>(completed);
                    outAsync.invoke(
                        _GetAttributeNames_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            GuidAttributeNamePair[] ret;
                            ret = GuidAttributeNamePairSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGeneratorPrx> GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringGeneratorAsync(attributeId, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGeneratorPrx> _iceI_GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct iceP_attributeId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitStringGenerator_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGeneratorPrx>(progress, cancel);
                    _iceI_GetBitStringGenerator(iceP_attributeId, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitStringGenerator_name = "GetBitStringGenerator";

                private void _iceI_GetBitStringGenerator(global::Ferda.Modules.GuidStruct iceP_attributeId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGeneratorPrx>(completed);
                    outAsync.invoke(
                        _GetBitStringGenerator_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ferda.Modules.GuidStruct.ice_write(ostr, iceP_attributeId);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGeneratorPrx ret;
                            ret = BitStringGeneratorPrxHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> GetBitStringGeneratorsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringGeneratorsAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> _iceI_GetBitStringGeneratorsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitStringGenerators_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGeneratorPrx[]>(progress, cancel);
                    _iceI_GetBitStringGenerators(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitStringGenerators_name = "GetBitStringGenerators";

                private void _iceI_GetBitStringGenerators(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGeneratorPrx[]>(completed);
                    outAsync.invoke(
                        _GetBitStringGenerators_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGeneratorPrx[] ret;
                            ret = BitStringGeneratorSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<IEntitySetting> GetEntitySettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetEntitySettingAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<IEntitySetting> _iceI_GetEntitySettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetEntitySetting_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<IEntitySetting>(progress, cancel);
                    _iceI_GetEntitySetting(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetEntitySetting_name = "GetEntitySetting";

                private void _iceI_GetEntitySetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<IEntitySetting>(completed);
                    outAsync.invoke(
                        _GetEntitySetting_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            IEntitySetting ret = null;
                            istr.readValue((IEntitySetting v) => {ret = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetSourceDataTableId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(context, callback, cookie, false);
                }

                public string end_GetSourceDataTableId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetSourceDataTableId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SourceDataTableIdProvider_GetSourceDataTableId, string>(
                        (Callback_SourceDataTableIdProvider_GetSourceDataTableId cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetSourceDataTableId_name, cookie, completedCallback);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeNames(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(context, callback, cookie, false);
                }

                public GuidAttributeNamePair[] end_GetAttributeNames(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeNames_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<GuidAttributeNamePair[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_AttributeNameProvider_GetAttributeNames, GuidAttributeNamePair[]>(
                        (Callback_AttributeNameProvider_GetAttributeNames cb, GuidAttributeNamePair[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeNames_name, cookie, completedCallback);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitStringGenerator(attributeId, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerator(attributeId, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerator(attributeId, context, callback, cookie, false);
                }

                public BitStringGeneratorPrx end_GetBitStringGenerator(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitStringGenerator_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGeneratorPrx>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct iceP_attributeId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitStringGenerator_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGeneratorProvider_GetBitStringGenerator, BitStringGeneratorPrx>(
                        (Callback_BitStringGeneratorProvider_GetBitStringGenerator cb, BitStringGeneratorPrx ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitStringGenerator_name, cookie, completedCallback);
                    _iceI_GetBitStringGenerator(iceP_attributeId, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitStringGenerators(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerators(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerators(context, callback, cookie, false);
                }

                public BitStringGeneratorPrx[] end_GetBitStringGenerators(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitStringGenerators_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGeneratorPrx[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitStringGenerators_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGeneratorProvider_GetBitStringGenerators, BitStringGeneratorPrx[]>(
                        (Callback_BitStringGeneratorProvider_GetBitStringGenerators cb, BitStringGeneratorPrx[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitStringGenerators_name, cookie, completedCallback);
                    _iceI_GetBitStringGenerators(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BooleanAttributeSettingFunctions_GetEntitySetting> begin_GetEntitySetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetEntitySetting(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetEntitySetting(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetEntitySetting(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetEntitySetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetEntitySetting(context, callback, cookie, false);
                }

                public IEntitySetting end_GetEntitySetting(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEntitySetting_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<IEntitySetting>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BooleanAttributeSettingFunctions_GetEntitySetting> begin_GetEntitySetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetEntitySetting_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BooleanAttributeSettingFunctions_GetEntitySetting, IEntitySetting>(
                        (Callback_BooleanAttributeSettingFunctions_GetEntitySetting cb, IEntitySetting ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetEntitySetting_name, cookie, completedCallback);
                    _iceI_GetEntitySetting(context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static BooleanAttributeSettingFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BooleanAttributeSettingFunctionsPrx r = b as BooleanAttributeSettingFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        BooleanAttributeSettingFunctionsPrxHelper h = new BooleanAttributeSettingFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BooleanAttributeSettingFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BooleanAttributeSettingFunctionsPrx r = b as BooleanAttributeSettingFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        BooleanAttributeSettingFunctionsPrxHelper h = new BooleanAttributeSettingFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BooleanAttributeSettingFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            BooleanAttributeSettingFunctionsPrxHelper h = new BooleanAttributeSettingFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static BooleanAttributeSettingFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            BooleanAttributeSettingFunctionsPrxHelper h = new BooleanAttributeSettingFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static BooleanAttributeSettingFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BooleanAttributeSettingFunctionsPrx r = b as BooleanAttributeSettingFunctionsPrx;
                    if(r == null)
                    {
                        BooleanAttributeSettingFunctionsPrxHelper h = new BooleanAttributeSettingFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BooleanAttributeSettingFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    BooleanAttributeSettingFunctionsPrxHelper h = new BooleanAttributeSettingFunctionsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::BitStringGeneratorProvider",
                    "::Ferda::Guha::MiningProcessor::BooleanAttributeSettingFunctions",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[2];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, BooleanAttributeSettingFunctionsPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static BooleanAttributeSettingFunctionsPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        BooleanAttributeSettingFunctionsPrxHelper result = new BooleanAttributeSettingFunctionsPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx
            {
                public BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper()
                {
                }

                public BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public string GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetSourceDataTableIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public GuidAttributeNamePair[] GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringGeneratorAsync(attributeId, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringGeneratorsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public IEntitySetting GetEntitySetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetEntitySettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string getAttribute(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_getAttributeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Guha.Data.ValuesAndFrequencies GetColumnValuesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetColumnValuesAndFrequenciesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Modules.GuidStruct GetAttributeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Guha.Data.CardinalityEnum GetAttributeCardinality(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeCardinalityAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string[] GetCategoriesIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetCategoriesIdsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public double[] GetCategoriesNumericValues(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetCategoriesNumericValuesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringIce GetBitString(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringAsync(categoryId, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string[] GetMissingInformationCategoryId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetMissingInformationCategoryIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Guha.Data.ValuesAndFrequencies getCategoriesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_getCategoriesAndFrequenciesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string GetColumnName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetColumnNameAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public int[] GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetCountVectorAsync(masterIdColumn, masterDataTableName, detailIdColumn, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public bool GetNextBitString(int skipFirstN, out BitStringIceWithCategoryId bitString, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        var result_ = _iceI_GetNextBitStringAsync(skipFirstN, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        bitString = result_.bitString;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public long GetMaxBitStringCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetMaxBitStringCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<string> GetSourceDataTableIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetSourceDataTableIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_GetSourceDataTableIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetSourceDataTableId_name = "GetSourceDataTableId";

                private void _iceI_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _GetSourceDataTableId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> GetAttributeNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeNamesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> _iceI_GetAttributeNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<GuidAttributeNamePair[]>(progress, cancel);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeNames_name = "GetAttributeNames";

                private void _iceI_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<GuidAttributeNamePair[]>(completed);
                    outAsync.invoke(
                        _GetAttributeNames_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            GuidAttributeNamePair[] ret;
                            ret = GuidAttributeNamePairSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGeneratorPrx> GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringGeneratorAsync(attributeId, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGeneratorPrx> _iceI_GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct iceP_attributeId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitStringGenerator_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGeneratorPrx>(progress, cancel);
                    _iceI_GetBitStringGenerator(iceP_attributeId, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitStringGenerator_name = "GetBitStringGenerator";

                private void _iceI_GetBitStringGenerator(global::Ferda.Modules.GuidStruct iceP_attributeId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGeneratorPrx>(completed);
                    outAsync.invoke(
                        _GetBitStringGenerator_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ferda.Modules.GuidStruct.ice_write(ostr, iceP_attributeId);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGeneratorPrx ret;
                            ret = BitStringGeneratorPrxHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> GetBitStringGeneratorsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringGeneratorsAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> _iceI_GetBitStringGeneratorsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitStringGenerators_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGeneratorPrx[]>(progress, cancel);
                    _iceI_GetBitStringGenerators(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitStringGenerators_name = "GetBitStringGenerators";

                private void _iceI_GetBitStringGenerators(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGeneratorPrx[]>(completed);
                    outAsync.invoke(
                        _GetBitStringGenerators_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGeneratorPrx[] ret;
                            ret = BitStringGeneratorSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<IEntitySetting> GetEntitySettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetEntitySettingAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<IEntitySetting> _iceI_GetEntitySettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetEntitySetting_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<IEntitySetting>(progress, cancel);
                    _iceI_GetEntitySetting(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetEntitySetting_name = "GetEntitySetting";

                private void _iceI_GetEntitySetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<IEntitySetting>(completed);
                    outAsync.invoke(
                        _GetEntitySetting_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            IEntitySetting ret = null;
                            istr.readValue((IEntitySetting v) => {ret = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<string> getAttributeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_getAttributeAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_getAttributeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_getAttribute_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_getAttribute(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _getAttribute_name = "getAttribute";

                private void _iceI_getAttribute(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _getAttribute_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> GetColumnValuesAndFrequenciesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetColumnValuesAndFrequenciesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> _iceI_GetColumnValuesAndFrequenciesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetColumnValuesAndFrequencies_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Guha.Data.ValuesAndFrequencies>(progress, cancel);
                    _iceI_GetColumnValuesAndFrequencies(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetColumnValuesAndFrequencies_name = "GetColumnValuesAndFrequencies";

                private void _iceI_GetColumnValuesAndFrequencies(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Guha.Data.ValuesAndFrequencies>(completed);
                    outAsync.invoke(
                        _GetColumnValuesAndFrequencies_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Guha.Data.ValuesAndFrequencies ret = null;
                            ret = global::Ferda.Guha.Data.ValuesAndFrequencies.ice_read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Modules.GuidStruct> GetAttributeIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Modules.GuidStruct> _iceI_GetAttributeIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.GuidStruct>(progress, cancel);
                    _iceI_GetAttributeId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeId_name = "GetAttributeId";

                private void _iceI_GetAttributeId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Modules.GuidStruct>(completed);
                    outAsync.invoke(
                        _GetAttributeId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Modules.GuidStruct ret = null;
                            ret = global::Ferda.Modules.GuidStruct.ice_read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.CardinalityEnum> GetAttributeCardinalityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeCardinalityAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.CardinalityEnum> _iceI_GetAttributeCardinalityAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeCardinality_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Guha.Data.CardinalityEnum>(progress, cancel);
                    _iceI_GetAttributeCardinality(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeCardinality_name = "GetAttributeCardinality";

                private void _iceI_GetAttributeCardinality(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Guha.Data.CardinalityEnum>(completed);
                    outAsync.invoke(
                        _GetAttributeCardinality_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Guha.Data.CardinalityEnum ret;
                            ret = (global::Ferda.Guha.Data.CardinalityEnum)istr.readEnum(3);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<string[]> GetCategoriesIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetCategoriesIdsAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string[]> _iceI_GetCategoriesIdsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetCategoriesIds_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                    _iceI_GetCategoriesIds(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetCategoriesIds_name = "GetCategoriesIds";

                private void _iceI_GetCategoriesIds(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string[]>(completed);
                    outAsync.invoke(
                        _GetCategoriesIds_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string[] ret;
                            ret = global::Ferda.Modules.StringSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<double[]> GetCategoriesNumericValuesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetCategoriesNumericValuesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<double[]> _iceI_GetCategoriesNumericValuesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetCategoriesNumericValues_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<double[]>(progress, cancel);
                    _iceI_GetCategoriesNumericValues(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetCategoriesNumericValues_name = "GetCategoriesNumericValues";

                private void _iceI_GetCategoriesNumericValues(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<double[]>(completed);
                    outAsync.invoke(
                        _GetCategoriesNumericValues_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            double[] ret;
                            ret = global::Ferda.Modules.DoubleSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringIce> GetBitStringAsync(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringAsync(categoryId, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringIce> _iceI_GetBitStringAsync(string iceP_categoryId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitString_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringIce>(progress, cancel);
                    _iceI_GetBitString(iceP_categoryId, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitString_name = "GetBitString";

                private void _iceI_GetBitString(string iceP_categoryId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringIce>(completed);
                    outAsync.invoke(
                        _GetBitString_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeString(iceP_categoryId);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringIce ret = null;
                            istr.readValue((BitStringIce v) => {ret = v; });
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<string[]> GetMissingInformationCategoryIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetMissingInformationCategoryIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string[]> _iceI_GetMissingInformationCategoryIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetMissingInformationCategoryId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                    _iceI_GetMissingInformationCategoryId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetMissingInformationCategoryId_name = "GetMissingInformationCategoryId";

                private void _iceI_GetMissingInformationCategoryId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string[]>(completed);
                    outAsync.invoke(
                        _GetMissingInformationCategoryId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string[] ret;
                            ret = global::Ferda.Modules.StringOptHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> getCategoriesAndFrequenciesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_getCategoriesAndFrequenciesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Guha.Data.ValuesAndFrequencies> _iceI_getCategoriesAndFrequenciesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_getCategoriesAndFrequencies_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Guha.Data.ValuesAndFrequencies>(progress, cancel);
                    _iceI_getCategoriesAndFrequencies(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _getCategoriesAndFrequencies_name = "getCategoriesAndFrequencies";

                private void _iceI_getCategoriesAndFrequencies(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Guha.Data.ValuesAndFrequencies>(completed);
                    outAsync.invoke(
                        _getCategoriesAndFrequencies_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Guha.Data.ValuesAndFrequencies ret = null;
                            ret = global::Ferda.Guha.Data.ValuesAndFrequencies.ice_read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<string> GetColumnNameAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetColumnNameAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_GetColumnNameAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetColumnName_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_GetColumnName(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetColumnName_name = "GetColumnName";

                private void _iceI_GetColumnName(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _GetColumnName_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<int[]> GetCountVectorAsync(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetCountVectorAsync(masterIdColumn, masterDataTableName, detailIdColumn, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<int[]> _iceI_GetCountVectorAsync(string iceP_masterIdColumn, string iceP_masterDataTableName, string iceP_detailIdColumn, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetCountVector_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<int[]>(progress, cancel);
                    _iceI_GetCountVector(iceP_masterIdColumn, iceP_masterDataTableName, iceP_detailIdColumn, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetCountVector_name = "GetCountVector";

                private void _iceI_GetCountVector(string iceP_masterIdColumn, string iceP_masterDataTableName, string iceP_detailIdColumn, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<int[]>(completed);
                    outAsync.invoke(
                        _GetCountVector_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeString(iceP_masterIdColumn);
                            ostr.writeString(iceP_masterDataTableName);
                            ostr.writeString(iceP_detailIdColumn);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            int[] ret;
                            ret = global::Ferda.Modules.IntSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGenerator_GetNextBitStringResult> GetNextBitStringAsync(int skipFirstN, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetNextBitStringAsync(skipFirstN, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGenerator_GetNextBitStringResult> _iceI_GetNextBitStringAsync(int iceP_skipFirstN, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetNextBitString_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGenerator_GetNextBitStringResult>(progress, cancel);
                    _iceI_GetNextBitString(iceP_skipFirstN, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetNextBitString_name = "GetNextBitString";

                private void _iceI_GetNextBitString(int iceP_skipFirstN, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGenerator_GetNextBitStringResult>(completed);
                    outAsync.invoke(
                        _GetNextBitString_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeInt(iceP_skipFirstN);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGenerator_GetNextBitStringResult ret = new BitStringGenerator_GetNextBitStringResult();
                            ret.bitString = BitStringIceWithCategoryId.ice_read(istr);
                            ret.returnValue = istr.readBool();
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<long> GetMaxBitStringCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetMaxBitStringCountAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<long> _iceI_GetMaxBitStringCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetMaxBitStringCount_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                    _iceI_GetMaxBitStringCount(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetMaxBitStringCount_name = "GetMaxBitStringCount";

                private void _iceI_GetMaxBitStringCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<long>(completed);
                    outAsync.invoke(
                        _GetMaxBitStringCount_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            long ret;
                            ret = istr.readLong();
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetSourceDataTableId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(context, callback, cookie, false);
                }

                public string end_GetSourceDataTableId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetSourceDataTableId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SourceDataTableIdProvider_GetSourceDataTableId, string>(
                        (Callback_SourceDataTableIdProvider_GetSourceDataTableId cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetSourceDataTableId_name, cookie, completedCallback);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeNames(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(context, callback, cookie, false);
                }

                public GuidAttributeNamePair[] end_GetAttributeNames(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeNames_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<GuidAttributeNamePair[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_AttributeNameProvider_GetAttributeNames, GuidAttributeNamePair[]>(
                        (Callback_AttributeNameProvider_GetAttributeNames cb, GuidAttributeNamePair[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeNames_name, cookie, completedCallback);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitStringGenerator(attributeId, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerator(attributeId, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerator(attributeId, context, callback, cookie, false);
                }

                public BitStringGeneratorPrx end_GetBitStringGenerator(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitStringGenerator_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGeneratorPrx>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct iceP_attributeId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitStringGenerator_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGeneratorProvider_GetBitStringGenerator, BitStringGeneratorPrx>(
                        (Callback_BitStringGeneratorProvider_GetBitStringGenerator cb, BitStringGeneratorPrx ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitStringGenerator_name, cookie, completedCallback);
                    _iceI_GetBitStringGenerator(iceP_attributeId, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitStringGenerators(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerators(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerators(context, callback, cookie, false);
                }

                public BitStringGeneratorPrx[] end_GetBitStringGenerators(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitStringGenerators_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGeneratorPrx[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitStringGenerators_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGeneratorProvider_GetBitStringGenerators, BitStringGeneratorPrx[]>(
                        (Callback_BitStringGeneratorProvider_GetBitStringGenerators cb, BitStringGeneratorPrx[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitStringGenerators_name, cookie, completedCallback);
                    _iceI_GetBitStringGenerators(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BooleanAttributeSettingFunctions_GetEntitySetting> begin_GetEntitySetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetEntitySetting(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetEntitySetting(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetEntitySetting(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetEntitySetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetEntitySetting(context, callback, cookie, false);
                }

                public IEntitySetting end_GetEntitySetting(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetEntitySetting_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<IEntitySetting>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BooleanAttributeSettingFunctions_GetEntitySetting> begin_GetEntitySetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetEntitySetting_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BooleanAttributeSettingFunctions_GetEntitySetting, IEntitySetting>(
                        (Callback_BooleanAttributeSettingFunctions_GetEntitySetting cb, IEntitySetting ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetEntitySetting_name, cookie, completedCallback);
                    _iceI_GetEntitySetting(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_getAttribute> begin_getAttribute(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_getAttribute(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_getAttribute(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_getAttribute(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_getAttribute(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_getAttribute(context, callback, cookie, false);
                }

                public string end_getAttribute(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAttribute_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_getAttribute> begin_getAttribute(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_getAttribute_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_getAttribute, string>(
                        (Callback_BitStringGenerator_getAttribute cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getAttribute_name, cookie, completedCallback);
                    _iceI_getAttribute(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnValuesAndFrequencies> begin_GetColumnValuesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetColumnValuesAndFrequencies(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetColumnValuesAndFrequencies(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetColumnValuesAndFrequencies(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetColumnValuesAndFrequencies(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetColumnValuesAndFrequencies(context, callback, cookie, false);
                }

                public global::Ferda.Guha.Data.ValuesAndFrequencies end_GetColumnValuesAndFrequencies(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetColumnValuesAndFrequencies_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Guha.Data.ValuesAndFrequencies>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnValuesAndFrequencies> begin_GetColumnValuesAndFrequencies(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetColumnValuesAndFrequencies_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetColumnValuesAndFrequencies, global::Ferda.Guha.Data.ValuesAndFrequencies>(
                        (Callback_BitStringGenerator_GetColumnValuesAndFrequencies cb, global::Ferda.Guha.Data.ValuesAndFrequencies ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetColumnValuesAndFrequencies_name, cookie, completedCallback);
                    _iceI_GetColumnValuesAndFrequencies(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeId> begin_GetAttributeId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeId(context, callback, cookie, false);
                }

                public global::Ferda.Modules.GuidStruct end_GetAttributeId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.GuidStruct>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeId> begin_GetAttributeId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetAttributeId, global::Ferda.Modules.GuidStruct>(
                        (Callback_BitStringGenerator_GetAttributeId cb, global::Ferda.Modules.GuidStruct ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeId_name, cookie, completedCallback);
                    _iceI_GetAttributeId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeCardinality> begin_GetAttributeCardinality(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeCardinality(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeCardinality(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeCardinality(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeCardinality(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeCardinality(context, callback, cookie, false);
                }

                public global::Ferda.Guha.Data.CardinalityEnum end_GetAttributeCardinality(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeCardinality_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Guha.Data.CardinalityEnum>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetAttributeCardinality> begin_GetAttributeCardinality(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeCardinality_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetAttributeCardinality, global::Ferda.Guha.Data.CardinalityEnum>(
                        (Callback_BitStringGenerator_GetAttributeCardinality cb, global::Ferda.Guha.Data.CardinalityEnum ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeCardinality_name, cookie, completedCallback);
                    _iceI_GetAttributeCardinality(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesIds> begin_GetCategoriesIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetCategoriesIds(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetCategoriesIds(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCategoriesIds(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetCategoriesIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCategoriesIds(context, callback, cookie, false);
                }

                public string[] end_GetCategoriesIds(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetCategoriesIds_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesIds> begin_GetCategoriesIds(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetCategoriesIds_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetCategoriesIds, string[]>(
                        (Callback_BitStringGenerator_GetCategoriesIds cb, string[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetCategoriesIds_name, cookie, completedCallback);
                    _iceI_GetCategoriesIds(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesNumericValues> begin_GetCategoriesNumericValues(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetCategoriesNumericValues(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetCategoriesNumericValues(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCategoriesNumericValues(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetCategoriesNumericValues(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCategoriesNumericValues(context, callback, cookie, false);
                }

                public double[] end_GetCategoriesNumericValues(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetCategoriesNumericValues_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<double[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetCategoriesNumericValues> begin_GetCategoriesNumericValues(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetCategoriesNumericValues_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetCategoriesNumericValues, double[]>(
                        (Callback_BitStringGenerator_GetCategoriesNumericValues cb, double[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetCategoriesNumericValues_name, cookie, completedCallback);
                    _iceI_GetCategoriesNumericValues(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetBitString> begin_GetBitString(string categoryId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitString(categoryId, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitString(string categoryId, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitString(categoryId, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitString(string categoryId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitString(categoryId, context, callback, cookie, false);
                }

                public BitStringIce end_GetBitString(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitString_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringIce>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetBitString> begin_GetBitString(string iceP_categoryId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitString_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetBitString, BitStringIce>(
                        (Callback_BitStringGenerator_GetBitString cb, BitStringIce ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitString_name, cookie, completedCallback);
                    _iceI_GetBitString(iceP_categoryId, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetMissingInformationCategoryId> begin_GetMissingInformationCategoryId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetMissingInformationCategoryId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetMissingInformationCategoryId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetMissingInformationCategoryId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetMissingInformationCategoryId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetMissingInformationCategoryId(context, callback, cookie, false);
                }

                public string[] end_GetMissingInformationCategoryId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetMissingInformationCategoryId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetMissingInformationCategoryId> begin_GetMissingInformationCategoryId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetMissingInformationCategoryId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetMissingInformationCategoryId, string[]>(
                        (Callback_BitStringGenerator_GetMissingInformationCategoryId cb, string[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetMissingInformationCategoryId_name, cookie, completedCallback);
                    _iceI_GetMissingInformationCategoryId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_getCategoriesAndFrequencies> begin_getCategoriesAndFrequencies(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_getCategoriesAndFrequencies(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_getCategoriesAndFrequencies(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_getCategoriesAndFrequencies(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_getCategoriesAndFrequencies(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_getCategoriesAndFrequencies(context, callback, cookie, false);
                }

                public global::Ferda.Guha.Data.ValuesAndFrequencies end_getCategoriesAndFrequencies(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getCategoriesAndFrequencies_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Guha.Data.ValuesAndFrequencies>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_getCategoriesAndFrequencies> begin_getCategoriesAndFrequencies(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_getCategoriesAndFrequencies_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_getCategoriesAndFrequencies, global::Ferda.Guha.Data.ValuesAndFrequencies>(
                        (Callback_BitStringGenerator_getCategoriesAndFrequencies cb, global::Ferda.Guha.Data.ValuesAndFrequencies ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getCategoriesAndFrequencies_name, cookie, completedCallback);
                    _iceI_getCategoriesAndFrequencies(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnName> begin_GetColumnName(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetColumnName(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetColumnName(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetColumnName(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetColumnName(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetColumnName(context, callback, cookie, false);
                }

                public string end_GetColumnName(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetColumnName_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetColumnName> begin_GetColumnName(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetColumnName_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetColumnName, string>(
                        (Callback_BitStringGenerator_GetColumnName cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetColumnName_name, cookie, completedCallback);
                    _iceI_GetColumnName(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetCountVector> begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetCountVector(masterIdColumn, masterDataTableName, detailIdColumn, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCountVector(masterIdColumn, masterDataTableName, detailIdColumn, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetCountVector(masterIdColumn, masterDataTableName, detailIdColumn, context, callback, cookie, false);
                }

                public int[] end_GetCountVector(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetCountVector_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<int[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetCountVector> begin_GetCountVector(string iceP_masterIdColumn, string iceP_masterDataTableName, string iceP_detailIdColumn, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetCountVector_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetCountVector, int[]>(
                        (Callback_BitStringGenerator_GetCountVector cb, int[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetCountVector_name, cookie, completedCallback);
                    _iceI_GetCountVector(iceP_masterIdColumn, iceP_masterDataTableName, iceP_detailIdColumn, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetNextBitString> begin_GetNextBitString(int skipFirstN, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetNextBitString(skipFirstN, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetNextBitString(int skipFirstN, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetNextBitString(skipFirstN, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetNextBitString(int skipFirstN, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetNextBitString(skipFirstN, context, callback, cookie, false);
                }

                public bool end_GetNextBitString(out BitStringIceWithCategoryId bitString, global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetNextBitString_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGenerator_GetNextBitStringResult>)resultI_.OutgoingAsync;
                    var result_ = outgoing_.getResult(resultI_.wait());
                    bitString = result_.bitString;
                    return result_.returnValue;
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetNextBitString> begin_GetNextBitString(int iceP_skipFirstN, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetNextBitString_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetNextBitString, BitStringGenerator_GetNextBitStringResult>(
                        (Callback_BitStringGenerator_GetNextBitString cb, BitStringGenerator_GetNextBitStringResult ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret.returnValue, ret.bitString);
                            }
                        },
                        this, _GetNextBitString_name, cookie, completedCallback);
                    _iceI_GetNextBitString(iceP_skipFirstN, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGenerator_GetMaxBitStringCount> begin_GetMaxBitStringCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetMaxBitStringCount(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetMaxBitStringCount(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetMaxBitStringCount(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetMaxBitStringCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetMaxBitStringCount(context, callback, cookie, false);
                }

                public long end_GetMaxBitStringCount(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetMaxBitStringCount_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGenerator_GetMaxBitStringCount> begin_GetMaxBitStringCount(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetMaxBitStringCount_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGenerator_GetMaxBitStringCount, long>(
                        (Callback_BitStringGenerator_GetMaxBitStringCount cb, long ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetMaxBitStringCount_name, cookie, completedCallback);
                    _iceI_GetMaxBitStringCount(context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx r = b as BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper h = new BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx r = b as BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper h = new BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper h = new BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper h = new BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx r = b as BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx;
                    if(r == null)
                    {
                        BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper h = new BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper h = new BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::BitStringGenerator",
                    "::Ferda::Guha::MiningProcessor::BitStringGeneratorProvider",
                    "::Ferda::Guha::MiningProcessor::BooleanAttributeSettingFunctions",
                    "::Ferda::Guha::MiningProcessor::BooleanAttributeSettingWithBSGenerationAbilityFunctions",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[4];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper result = new BooleanAttributeSettingWithBSGenerationAbilityFunctionsPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class MiningTaskFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, MiningTaskFunctionsPrx
            {
                public MiningTaskFunctionsPrxHelper()
                {
                }

                public MiningTaskFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public string GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetSourceDataTableIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public GuidAttributeNamePair[] GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetAttributeNamesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringGeneratorAsync(attributeId, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetBitStringGeneratorsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] GetQuantifiers(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetQuantifiersAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string GetResult(out string statistics, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        var result_ = _iceI_GetResultAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        statistics = result_.statistics;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<string> GetSourceDataTableIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetSourceDataTableIdAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_GetSourceDataTableIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetSourceDataTableId_name = "GetSourceDataTableId";

                private void _iceI_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _GetSourceDataTableId_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> GetAttributeNamesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetAttributeNamesAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<GuidAttributeNamePair[]> _iceI_GetAttributeNamesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<GuidAttributeNamePair[]>(progress, cancel);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetAttributeNames_name = "GetAttributeNames";

                private void _iceI_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<GuidAttributeNamePair[]>(completed);
                    outAsync.invoke(
                        _GetAttributeNames_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            GuidAttributeNamePair[] ret;
                            ret = GuidAttributeNamePairSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGeneratorPrx> GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringGeneratorAsync(attributeId, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGeneratorPrx> _iceI_GetBitStringGeneratorAsync(global::Ferda.Modules.GuidStruct iceP_attributeId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitStringGenerator_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGeneratorPrx>(progress, cancel);
                    _iceI_GetBitStringGenerator(iceP_attributeId, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitStringGenerator_name = "GetBitStringGenerator";

                private void _iceI_GetBitStringGenerator(global::Ferda.Modules.GuidStruct iceP_attributeId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGeneratorPrx>(completed);
                    outAsync.invoke(
                        _GetBitStringGenerator_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ferda.Modules.GuidStruct.ice_write(ostr, iceP_attributeId);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGeneratorPrx ret;
                            ret = BitStringGeneratorPrxHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> GetBitStringGeneratorsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetBitStringGeneratorsAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringGeneratorPrx[]> _iceI_GetBitStringGeneratorsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetBitStringGenerators_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringGeneratorPrx[]>(progress, cancel);
                    _iceI_GetBitStringGenerators(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetBitStringGenerators_name = "GetBitStringGenerators";

                private void _iceI_GetBitStringGenerators(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringGeneratorPrx[]>(completed);
                    outAsync.invoke(
                        _GetBitStringGenerators_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringGeneratorPrx[] ret;
                            ret = BitStringGeneratorSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[]> GetQuantifiersAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetQuantifiersAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[]> _iceI_GetQuantifiersAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetQuantifiers_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[]>(progress, cancel);
                    _iceI_GetQuantifiers(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetQuantifiers_name = "GetQuantifiers";

                private void _iceI_GetQuantifiers(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[]>(completed);
                    outAsync.invoke(
                        _GetQuantifiers_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] ret;
                            ret = global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrxSeqHelper.read(istr);
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<MiningTaskFunctions_GetResultResult> GetResultAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetResultAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<MiningTaskFunctions_GetResultResult> _iceI_GetResultAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetResult_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<MiningTaskFunctions_GetResultResult>(progress, cancel);
                    _iceI_GetResult(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetResult_name = "GetResult";

                private void _iceI_GetResult(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<MiningTaskFunctions_GetResultResult>(completed);
                    outAsync.invoke(
                        _GetResult_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            MiningTaskFunctions_GetResultResult ret = new MiningTaskFunctions_GetResultResult();
                            ret.statistics = istr.readString();
                            ret.returnValue = istr.readString();
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetSourceDataTableId(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetSourceDataTableId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetSourceDataTableId(context, callback, cookie, false);
                }

                public string end_GetSourceDataTableId(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetSourceDataTableId_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_SourceDataTableIdProvider_GetSourceDataTableId> begin_GetSourceDataTableId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetSourceDataTableId_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SourceDataTableIdProvider_GetSourceDataTableId, string>(
                        (Callback_SourceDataTableIdProvider_GetSourceDataTableId cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetSourceDataTableId_name, cookie, completedCallback);
                    _iceI_GetSourceDataTableId(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetAttributeNames(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetAttributeNames(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetAttributeNames(context, callback, cookie, false);
                }

                public GuidAttributeNamePair[] end_GetAttributeNames(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetAttributeNames_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<GuidAttributeNamePair[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_AttributeNameProvider_GetAttributeNames> begin_GetAttributeNames(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetAttributeNames_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_AttributeNameProvider_GetAttributeNames, GuidAttributeNamePair[]>(
                        (Callback_AttributeNameProvider_GetAttributeNames cb, GuidAttributeNamePair[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetAttributeNames_name, cookie, completedCallback);
                    _iceI_GetAttributeNames(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitStringGenerator(attributeId, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerator(attributeId, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerator(attributeId, context, callback, cookie, false);
                }

                public BitStringGeneratorPrx end_GetBitStringGenerator(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitStringGenerator_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGeneratorPrx>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerator> begin_GetBitStringGenerator(global::Ferda.Modules.GuidStruct iceP_attributeId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitStringGenerator_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGeneratorProvider_GetBitStringGenerator, BitStringGeneratorPrx>(
                        (Callback_BitStringGeneratorProvider_GetBitStringGenerator cb, BitStringGeneratorPrx ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitStringGenerator_name, cookie, completedCallback);
                    _iceI_GetBitStringGenerator(iceP_attributeId, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetBitStringGenerators(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerators(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetBitStringGenerators(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetBitStringGenerators(context, callback, cookie, false);
                }

                public BitStringGeneratorPrx[] end_GetBitStringGenerators(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetBitStringGenerators_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringGeneratorPrx[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_BitStringGeneratorProvider_GetBitStringGenerators> begin_GetBitStringGenerators(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetBitStringGenerators_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BitStringGeneratorProvider_GetBitStringGenerators, BitStringGeneratorPrx[]>(
                        (Callback_BitStringGeneratorProvider_GetBitStringGenerators cb, BitStringGeneratorPrx[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetBitStringGenerators_name, cookie, completedCallback);
                    _iceI_GetBitStringGenerators(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_MiningTaskFunctions_GetQuantifiers> begin_GetQuantifiers(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetQuantifiers(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetQuantifiers(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetQuantifiers(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetQuantifiers(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetQuantifiers(context, callback, cookie, false);
                }

                public global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] end_GetQuantifiers(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifiers_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[]>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_MiningTaskFunctions_GetQuantifiers> begin_GetQuantifiers(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetQuantifiers_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_MiningTaskFunctions_GetQuantifiers, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[]>(
                        (Callback_MiningTaskFunctions_GetQuantifiers cb, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetQuantifiers_name, cookie, completedCallback);
                    _iceI_GetQuantifiers(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_MiningTaskFunctions_GetResult> begin_GetResult(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetResult(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetResult(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetResult(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetResult(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetResult(context, callback, cookie, false);
                }

                public string end_GetResult(out string statistics, global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetResult_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<MiningTaskFunctions_GetResultResult>)resultI_.OutgoingAsync;
                    var result_ = outgoing_.getResult(resultI_.wait());
                    statistics = result_.statistics;
                    return result_.returnValue;
                }

                private global::Ice.AsyncResult<Callback_MiningTaskFunctions_GetResult> begin_GetResult(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetResult_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_MiningTaskFunctions_GetResult, MiningTaskFunctions_GetResultResult>(
                        (Callback_MiningTaskFunctions_GetResult cb, MiningTaskFunctions_GetResultResult ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret.returnValue, ret.statistics);
                            }
                        },
                        this, _GetResult_name, cookie, completedCallback);
                    _iceI_GetResult(context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static MiningTaskFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    MiningTaskFunctionsPrx r = b as MiningTaskFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        MiningTaskFunctionsPrxHelper h = new MiningTaskFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static MiningTaskFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    MiningTaskFunctionsPrx r = b as MiningTaskFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        MiningTaskFunctionsPrxHelper h = new MiningTaskFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static MiningTaskFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            MiningTaskFunctionsPrxHelper h = new MiningTaskFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static MiningTaskFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            MiningTaskFunctionsPrxHelper h = new MiningTaskFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static MiningTaskFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    MiningTaskFunctionsPrx r = b as MiningTaskFunctionsPrx;
                    if(r == null)
                    {
                        MiningTaskFunctionsPrxHelper h = new MiningTaskFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static MiningTaskFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    MiningTaskFunctionsPrxHelper h = new MiningTaskFunctionsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::BitStringGeneratorProvider",
                    "::Ferda::Guha::MiningProcessor::MiningTaskFunctions",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[2];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, MiningTaskFunctionsPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static MiningTaskFunctionsPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        MiningTaskFunctionsPrxHelper result = new MiningTaskFunctionsPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class BooleanAttributeSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, BooleanAttribute[] v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            (v[ix] == null ? new BooleanAttribute() : v[ix]).ice_writeMembers(ostr);
                        }
                    }
                }

                public static BooleanAttribute[] read(global::Ice.InputStream istr)
                {
                    BooleanAttribute[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(2);
                        v = new BooleanAttribute[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = new BooleanAttribute();
                            v[ix].ice_readMembers(istr);
                        }
                    }
                    return v;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public sealed class CategorialAttributeSeqHelper
            {
                public static void write(global::Ice.OutputStream ostr, CategorialAttribute[] v)
                {
                    if(v == null)
                    {
                        ostr.writeSize(0);
                    }
                    else
                    {
                        ostr.writeSize(v.Length);
                        for(int ix = 0; ix < v.Length; ++ix)
                        {
                            (v[ix] == null ? new CategorialAttribute() : v[ix]).ice_writeMembers(ostr);
                        }
                    }
                }

                public static CategorialAttribute[] read(global::Ice.InputStream istr)
                {
                    CategorialAttribute[] v;
                    {
                        int szx = istr.readAndCheckSeqSize(3);
                        v = new CategorialAttribute[szx];
                        for(int ix = 0; ix < szx; ++ix)
                        {
                            v[ix] = new CategorialAttribute();
                            v[ix].ice_readMembers(istr);
                        }
                    }
                    return v;
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class MiningProcessorFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, MiningProcessorFunctionsPrx
            {
                public MiningProcessorFunctionsPrxHelper()
                {
                }

                public MiningProcessorFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public string Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, out string resultInfo, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        var result_ = _iceI_RunAsync(taskBoxModule, booleanAttributes, categorialAttributes, quantifiers, taskParams, bitStringGenerator, output, attributeId, countVector, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        resultInfo = result_.resultInfo;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public BitStringIceWithCategoryId GetNextBitString(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_GetNextBitStringAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                public string ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, out string resultInfo, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        var result_ = _iceI_ETreeRunAsync(taskBoxModule, taskParams, output, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        resultInfo = result_.resultInfo;
                        return result_.returnValue;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<MiningProcessorFunctions_RunResult> RunAsync(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_RunAsync(taskBoxModule, booleanAttributes, categorialAttributes, quantifiers, taskParams, bitStringGenerator, output, attributeId, countVector, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<MiningProcessorFunctions_RunResult> _iceI_RunAsync(global::Ferda.Modules.BoxModulePrx iceP_taskBoxModule, BooleanAttribute[] iceP_booleanAttributes, CategorialAttribute[] iceP_categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] iceP_quantifiers, TaskRunParams iceP_taskParams, BitStringGeneratorProviderPrx iceP_bitStringGenerator, global::Ferda.ModulesManager.OutputPrx iceP_output, global::Ferda.Modules.GuidStruct iceP_attributeId, int[] iceP_countVector, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_Run_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<MiningProcessorFunctions_RunResult>(progress, cancel);
                    _iceI_Run(iceP_taskBoxModule, iceP_booleanAttributes, iceP_categorialAttributes, iceP_quantifiers, iceP_taskParams, iceP_bitStringGenerator, iceP_output, iceP_attributeId, iceP_countVector, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _Run_name = "Run";

                private void _iceI_Run(global::Ferda.Modules.BoxModulePrx iceP_taskBoxModule, BooleanAttribute[] iceP_booleanAttributes, CategorialAttribute[] iceP_categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] iceP_quantifiers, TaskRunParams iceP_taskParams, BitStringGeneratorProviderPrx iceP_bitStringGenerator, global::Ferda.ModulesManager.OutputPrx iceP_output, global::Ferda.Modules.GuidStruct iceP_attributeId, int[] iceP_countVector, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<MiningProcessorFunctions_RunResult>(completed);
                    outAsync.invoke(
                        _Run_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ferda.Modules.BoxModulePrxHelper.write(ostr, iceP_taskBoxModule);
                            BooleanAttributeSeqHelper.write(ostr, iceP_booleanAttributes);
                            CategorialAttributeSeqHelper.write(ostr, iceP_categorialAttributes);
                            global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrxSeqHelper.write(ostr, iceP_quantifiers);
                            iceP_taskParams.ice_writeMembers(ostr);
                            BitStringGeneratorProviderPrxHelper.write(ostr, iceP_bitStringGenerator);
                            global::Ferda.ModulesManager.OutputPrxHelper.write(ostr, iceP_output);
                            global::Ferda.Modules.GuidStruct.ice_write(ostr, iceP_attributeId);
                            global::Ferda.Modules.IntSeqHelper.write(ostr, iceP_countVector);
                            ostr.writePendingValues();
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            MiningProcessorFunctions_RunResult ret = new MiningProcessorFunctions_RunResult();
                            ret.resultInfo = istr.readString();
                            ret.returnValue = istr.readString();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<BitStringIceWithCategoryId> GetNextBitStringAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_GetNextBitStringAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<BitStringIceWithCategoryId> _iceI_GetNextBitStringAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_GetNextBitString_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<BitStringIceWithCategoryId>(progress, cancel);
                    _iceI_GetNextBitString(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _GetNextBitString_name = "GetNextBitString";

                private void _iceI_GetNextBitString(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<BitStringIceWithCategoryId>(completed);
                    outAsync.invoke(
                        _GetNextBitString_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            BitStringIceWithCategoryId ret = null;
                            ret = BitStringIceWithCategoryId.ice_read(istr);
                            istr.readPendingValues();
                            return ret;
                        });
                }

                public global::System.Threading.Tasks.Task<MiningProcessorFunctions_ETreeRunResult> ETreeRunAsync(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_ETreeRunAsync(taskBoxModule, taskParams, output, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<MiningProcessorFunctions_ETreeRunResult> _iceI_ETreeRunAsync(global::Ferda.Modules.BoxModulePrx iceP_taskBoxModule, ETreeTaskRunParams iceP_taskParams, global::Ferda.ModulesManager.OutputPrx iceP_output, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_ETreeRun_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<MiningProcessorFunctions_ETreeRunResult>(progress, cancel);
                    _iceI_ETreeRun(iceP_taskBoxModule, iceP_taskParams, iceP_output, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _ETreeRun_name = "ETreeRun";

                private void _iceI_ETreeRun(global::Ferda.Modules.BoxModulePrx iceP_taskBoxModule, ETreeTaskRunParams iceP_taskParams, global::Ferda.ModulesManager.OutputPrx iceP_output, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<MiningProcessorFunctions_ETreeRunResult>(completed);
                    outAsync.invoke(
                        _ETreeRun_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            global::Ferda.Modules.BoxModulePrxHelper.write(ostr, iceP_taskBoxModule);
                            ETreeTaskRunParams.ice_write(ostr, iceP_taskParams);
                            global::Ferda.ModulesManager.OutputPrxHelper.write(ostr, iceP_output);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.Modules.BoxRuntimeError)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            MiningProcessorFunctions_ETreeRunResult ret = new MiningProcessorFunctions_ETreeRunResult();
                            ret.resultInfo = istr.readString();
                            ret.returnValue = istr.readString();
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_MiningProcessorFunctions_Run> begin_Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_Run(taskBoxModule, booleanAttributes, categorialAttributes, quantifiers, taskParams, bitStringGenerator, output, attributeId, countVector, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_Run(taskBoxModule, booleanAttributes, categorialAttributes, quantifiers, taskParams, bitStringGenerator, output, attributeId, countVector, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_Run(taskBoxModule, booleanAttributes, categorialAttributes, quantifiers, taskParams, bitStringGenerator, output, attributeId, countVector, context, callback, cookie, false);
                }

                public string end_Run(out string resultInfo, global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Run_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<MiningProcessorFunctions_RunResult>)resultI_.OutgoingAsync;
                    var result_ = outgoing_.getResult(resultI_.wait());
                    resultInfo = result_.resultInfo;
                    return result_.returnValue;
                }

                private global::Ice.AsyncResult<Callback_MiningProcessorFunctions_Run> begin_Run(global::Ferda.Modules.BoxModulePrx iceP_taskBoxModule, BooleanAttribute[] iceP_booleanAttributes, CategorialAttribute[] iceP_categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] iceP_quantifiers, TaskRunParams iceP_taskParams, BitStringGeneratorProviderPrx iceP_bitStringGenerator, global::Ferda.ModulesManager.OutputPrx iceP_output, global::Ferda.Modules.GuidStruct iceP_attributeId, int[] iceP_countVector, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_Run_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_MiningProcessorFunctions_Run, MiningProcessorFunctions_RunResult>(
                        (Callback_MiningProcessorFunctions_Run cb, MiningProcessorFunctions_RunResult ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret.returnValue, ret.resultInfo);
                            }
                        },
                        this, _Run_name, cookie, completedCallback);
                    _iceI_Run(iceP_taskBoxModule, iceP_booleanAttributes, iceP_categorialAttributes, iceP_quantifiers, iceP_taskParams, iceP_bitStringGenerator, iceP_output, iceP_attributeId, iceP_countVector, context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_MiningProcessorFunctions_GetNextBitString> begin_GetNextBitString(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_GetNextBitString(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_GetNextBitString(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetNextBitString(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_GetNextBitString(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_GetNextBitString(context, callback, cookie, false);
                }

                public BitStringIceWithCategoryId end_GetNextBitString(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetNextBitString_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<BitStringIceWithCategoryId>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_MiningProcessorFunctions_GetNextBitString> begin_GetNextBitString(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_GetNextBitString_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_MiningProcessorFunctions_GetNextBitString, BitStringIceWithCategoryId>(
                        (Callback_MiningProcessorFunctions_GetNextBitString cb, BitStringIceWithCategoryId ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _GetNextBitString_name, cookie, completedCallback);
                    _iceI_GetNextBitString(context, synchronous, completed);
                    return completed;
                }

                public global::Ice.AsyncResult<Callback_MiningProcessorFunctions_ETreeRun> begin_ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_ETreeRun(taskBoxModule, taskParams, output, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_ETreeRun(taskBoxModule, taskParams, output, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_ETreeRun(taskBoxModule, taskParams, output, context, callback, cookie, false);
                }

                public string end_ETreeRun(out string resultInfo, global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ETreeRun_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<MiningProcessorFunctions_ETreeRunResult>)resultI_.OutgoingAsync;
                    var result_ = outgoing_.getResult(resultI_.wait());
                    resultInfo = result_.resultInfo;
                    return result_.returnValue;
                }

                private global::Ice.AsyncResult<Callback_MiningProcessorFunctions_ETreeRun> begin_ETreeRun(global::Ferda.Modules.BoxModulePrx iceP_taskBoxModule, ETreeTaskRunParams iceP_taskParams, global::Ferda.ModulesManager.OutputPrx iceP_output, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_ETreeRun_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_MiningProcessorFunctions_ETreeRun, MiningProcessorFunctions_ETreeRunResult>(
                        (Callback_MiningProcessorFunctions_ETreeRun cb, MiningProcessorFunctions_ETreeRunResult ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret.returnValue, ret.resultInfo);
                            }
                        },
                        this, _ETreeRun_name, cookie, completedCallback);
                    _iceI_ETreeRun(iceP_taskBoxModule, iceP_taskParams, iceP_output, context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static MiningProcessorFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    MiningProcessorFunctionsPrx r = b as MiningProcessorFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        MiningProcessorFunctionsPrxHelper h = new MiningProcessorFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static MiningProcessorFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    MiningProcessorFunctionsPrx r = b as MiningProcessorFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        MiningProcessorFunctionsPrxHelper h = new MiningProcessorFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static MiningProcessorFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            MiningProcessorFunctionsPrxHelper h = new MiningProcessorFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static MiningProcessorFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            MiningProcessorFunctionsPrxHelper h = new MiningProcessorFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static MiningProcessorFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    MiningProcessorFunctionsPrx r = b as MiningProcessorFunctionsPrx;
                    if(r == null)
                    {
                        MiningProcessorFunctionsPrxHelper h = new MiningProcessorFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static MiningProcessorFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    MiningProcessorFunctionsPrxHelper h = new MiningProcessorFunctionsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::MiningProcessorFunctions",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, MiningProcessorFunctionsPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static MiningProcessorFunctionsPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        MiningProcessorFunctionsPrxHelper result = new MiningProcessorFunctionsPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class ETreeClassifierFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, ETreeClassifierFunctionsPrx
            {
                public ETreeClassifierFunctionsPrxHelper()
                {
                }

                public ETreeClassifierFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public string HelloWorld(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_HelloWorldAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<string> HelloWorldAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_HelloWorldAsync(context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<string> _iceI_HelloWorldAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_HelloWorld_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                    _iceI_HelloWorld(context, synchronous, completed);
                    return completed.Task;
                }

                private const string _HelloWorld_name = "HelloWorld";

                private void _iceI_HelloWorld(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<string>(completed);
                    outAsync.invoke(
                        _HelloWorld_name,
                        global::Ice.OperationMode.Idempotent,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        read: (global::Ice.InputStream istr) =>
                        {
                            string ret;
                            ret = istr.readString();
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_ETreeClassifierFunctions_HelloWorld> begin_HelloWorld(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_HelloWorld(context, null, null, false);
                }

                public global::Ice.AsyncResult begin_HelloWorld(global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_HelloWorld(new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_HelloWorld(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_HelloWorld(context, callback, cookie, false);
                }

                public string end_HelloWorld(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _HelloWorld_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_ETreeClassifierFunctions_HelloWorld> begin_HelloWorld(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_HelloWorld_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ETreeClassifierFunctions_HelloWorld, string>(
                        (Callback_ETreeClassifierFunctions_HelloWorld cb, string ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _HelloWorld_name, cookie, completedCallback);
                    _iceI_HelloWorld(context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static ETreeClassifierFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ETreeClassifierFunctionsPrx r = b as ETreeClassifierFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        ETreeClassifierFunctionsPrxHelper h = new ETreeClassifierFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static ETreeClassifierFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ETreeClassifierFunctionsPrx r = b as ETreeClassifierFunctionsPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        ETreeClassifierFunctionsPrxHelper h = new ETreeClassifierFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static ETreeClassifierFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            ETreeClassifierFunctionsPrxHelper h = new ETreeClassifierFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static ETreeClassifierFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            ETreeClassifierFunctionsPrxHelper h = new ETreeClassifierFunctionsPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static ETreeClassifierFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    ETreeClassifierFunctionsPrx r = b as ETreeClassifierFunctionsPrx;
                    if(r == null)
                    {
                        ETreeClassifierFunctionsPrxHelper h = new ETreeClassifierFunctionsPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static ETreeClassifierFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    ETreeClassifierFunctionsPrxHelper h = new ETreeClassifierFunctionsPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::ETreeClassifierFunctions",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, ETreeClassifierFunctionsPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static ETreeClassifierFunctionsPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        ETreeClassifierFunctionsPrxHelper result = new ETreeClassifierFunctionsPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace MiningProcessor
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class SourceDataTableIdProviderDisp_ : global::Ice.ObjectImpl, SourceDataTableIdProvider
            {
                #region Slice operations

                public abstract string GetSourceDataTableId(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[0];
                }

                public static new string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetSourceDataTableId(SourceDataTableIdProvider obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetSourceDataTableId(current);
                    var ostr = inS.startWriteParams();
                    ostr.writeString(ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "GetSourceDataTableId",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return iceD_GetSourceDataTableId(this, inS, current);
                        }
                        case 1:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 2:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 3:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 4:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class AttributeNameProviderDisp_ : global::Ice.ObjectImpl, AttributeNameProvider
            {
                #region Slice operations

                public abstract GuidAttributeNamePair[] GetAttributeNames(global::Ice.Current current = null);

                #endregion

                #region Inherited Slice operations

                public abstract string GetSourceDataTableId(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[0];
                }

                public static new string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetAttributeNames(AttributeNameProvider obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetAttributeNames(current);
                    var ostr = inS.startWriteParams();
                    GuidAttributeNamePairSeqHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "GetAttributeNames",
                    "GetSourceDataTableId",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return iceD_GetAttributeNames(this, inS, current);
                        }
                        case 1:
                        {
                            return SourceDataTableIdProviderDisp_.iceD_GetSourceDataTableId(this, inS, current);
                        }
                        case 2:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 3:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 4:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 5:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class BitStringGeneratorDisp_ : global::Ice.ObjectImpl, BitStringGenerator
            {
                #region Slice operations

                public abstract string getAttribute(global::Ice.Current current = null);

                public abstract global::Ferda.Guha.Data.ValuesAndFrequencies GetColumnValuesAndFrequencies(global::Ice.Current current = null);

                public abstract global::Ferda.Modules.GuidStruct GetAttributeId(global::Ice.Current current = null);

                public abstract global::Ferda.Guha.Data.CardinalityEnum GetAttributeCardinality(global::Ice.Current current = null);

                public abstract string[] GetCategoriesIds(global::Ice.Current current = null);

                public abstract double[] GetCategoriesNumericValues(global::Ice.Current current = null);

                public abstract BitStringIce GetBitString(string categoryId, global::Ice.Current current = null);

                public abstract string[] GetMissingInformationCategoryId(global::Ice.Current current = null);

                public abstract global::Ferda.Guha.Data.ValuesAndFrequencies getCategoriesAndFrequencies(global::Ice.Current current = null);

                public abstract string GetColumnName(global::Ice.Current current = null);

                public abstract int[] GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.Current current = null);

                public abstract bool GetNextBitString(int skipFirstN, out BitStringIceWithCategoryId bitString, global::Ice.Current current = null);

                public abstract long GetMaxBitStringCount(global::Ice.Current current = null);

                #endregion

                #region Inherited Slice operations

                public abstract GuidAttributeNamePair[] GetAttributeNames(global::Ice.Current current = null);

                public abstract string GetSourceDataTableId(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::BitStringGenerator",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[1];
                }

                public static new string ice_staticId()
                {
                    return _ids[1];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_getAttribute(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.getAttribute(current);
                    var ostr = inS.startWriteParams();
                    ostr.writeString(ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetColumnValuesAndFrequencies(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetColumnValuesAndFrequencies(current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.Guha.Data.ValuesAndFrequencies.ice_write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetAttributeId(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetAttributeId(current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.Modules.GuidStruct.ice_write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetAttributeCardinality(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetAttributeCardinality(current);
                    var ostr = inS.startWriteParams();
                    ostr.writeEnum((int)ret, 3);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetCategoriesIds(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetCategoriesIds(current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.Modules.StringSeqHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetCategoriesNumericValues(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetCategoriesNumericValues(current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.Modules.DoubleSeqHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetBitString(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    string iceP_categoryId;
                    iceP_categoryId = istr.readString();
                    inS.endReadParams();
                    var ret = obj.GetBitString(iceP_categoryId, current);
                    var ostr = inS.startWriteParams();
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetMissingInformationCategoryId(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetMissingInformationCategoryId(current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.Modules.StringOptHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_getCategoriesAndFrequencies(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.getCategoriesAndFrequencies(current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.Guha.Data.ValuesAndFrequencies.ice_write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetColumnName(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetColumnName(current);
                    var ostr = inS.startWriteParams();
                    ostr.writeString(ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetCountVector(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    string iceP_masterIdColumn;
                    string iceP_masterDataTableName;
                    string iceP_detailIdColumn;
                    iceP_masterIdColumn = istr.readString();
                    iceP_masterDataTableName = istr.readString();
                    iceP_detailIdColumn = istr.readString();
                    inS.endReadParams();
                    var ret = obj.GetCountVector(iceP_masterIdColumn, iceP_masterDataTableName, iceP_detailIdColumn, current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.Modules.IntSeqHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetNextBitString(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    int iceP_skipFirstN;
                    iceP_skipFirstN = istr.readInt();
                    inS.endReadParams();
                    BitStringIceWithCategoryId iceP_bitString;
                    var ret = obj.GetNextBitString(iceP_skipFirstN, out iceP_bitString, current);
                    var ostr = inS.startWriteParams();
                    BitStringIceWithCategoryId.ice_write(ostr, iceP_bitString);
                    ostr.writeBool(ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetMaxBitStringCount(BitStringGenerator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetMaxBitStringCount(current);
                    var ostr = inS.startWriteParams();
                    ostr.writeLong(ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "GetAttributeCardinality",
                    "GetAttributeId",
                    "GetAttributeNames",
                    "GetBitString",
                    "GetCategoriesIds",
                    "GetCategoriesNumericValues",
                    "GetColumnName",
                    "GetColumnValuesAndFrequencies",
                    "GetCountVector",
                    "GetMaxBitStringCount",
                    "GetMissingInformationCategoryId",
                    "GetNextBitString",
                    "GetSourceDataTableId",
                    "getAttribute",
                    "getCategoriesAndFrequencies",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return iceD_GetAttributeCardinality(this, inS, current);
                        }
                        case 1:
                        {
                            return iceD_GetAttributeId(this, inS, current);
                        }
                        case 2:
                        {
                            return AttributeNameProviderDisp_.iceD_GetAttributeNames(this, inS, current);
                        }
                        case 3:
                        {
                            return iceD_GetBitString(this, inS, current);
                        }
                        case 4:
                        {
                            return iceD_GetCategoriesIds(this, inS, current);
                        }
                        case 5:
                        {
                            return iceD_GetCategoriesNumericValues(this, inS, current);
                        }
                        case 6:
                        {
                            return iceD_GetColumnName(this, inS, current);
                        }
                        case 7:
                        {
                            return iceD_GetColumnValuesAndFrequencies(this, inS, current);
                        }
                        case 8:
                        {
                            return iceD_GetCountVector(this, inS, current);
                        }
                        case 9:
                        {
                            return iceD_GetMaxBitStringCount(this, inS, current);
                        }
                        case 10:
                        {
                            return iceD_GetMissingInformationCategoryId(this, inS, current);
                        }
                        case 11:
                        {
                            return iceD_GetNextBitString(this, inS, current);
                        }
                        case 12:
                        {
                            return SourceDataTableIdProviderDisp_.iceD_GetSourceDataTableId(this, inS, current);
                        }
                        case 13:
                        {
                            return iceD_getAttribute(this, inS, current);
                        }
                        case 14:
                        {
                            return iceD_getCategoriesAndFrequencies(this, inS, current);
                        }
                        case 15:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 16:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 17:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 18:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class BitStringGeneratorProviderDisp_ : global::Ice.ObjectImpl, BitStringGeneratorProvider
            {
                #region Slice operations

                public abstract BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.Current current = null);

                public abstract BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::BitStringGeneratorProvider",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[0];
                }

                public static new string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetBitStringGenerator(BitStringGeneratorProvider obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                    var istr = inS.startReadParams();
                    global::Ferda.Modules.GuidStruct iceP_attributeId;
                    iceP_attributeId = null;
                    iceP_attributeId = global::Ferda.Modules.GuidStruct.ice_read(istr);
                    inS.endReadParams();
                    var ret = obj.GetBitStringGenerator(iceP_attributeId, current);
                    var ostr = inS.startWriteParams();
                    BitStringGeneratorPrxHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetBitStringGenerators(BitStringGeneratorProvider obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetBitStringGenerators(current);
                    var ostr = inS.startWriteParams();
                    BitStringGeneratorSeqHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "GetBitStringGenerator",
                    "GetBitStringGenerators",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return iceD_GetBitStringGenerator(this, inS, current);
                        }
                        case 1:
                        {
                            return iceD_GetBitStringGenerators(this, inS, current);
                        }
                        case 2:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 3:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 4:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 5:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class BooleanAttributeSettingFunctionsDisp_ : global::Ice.ObjectImpl, BooleanAttributeSettingFunctions
            {
                #region Slice operations

                public abstract IEntitySetting GetEntitySetting(global::Ice.Current current = null);

                #endregion

                #region Inherited Slice operations

                public abstract GuidAttributeNamePair[] GetAttributeNames(global::Ice.Current current = null);

                public abstract BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.Current current = null);

                public abstract BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.Current current = null);

                public abstract string GetSourceDataTableId(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::BitStringGeneratorProvider",
                    "::Ferda::Guha::MiningProcessor::BooleanAttributeSettingFunctions",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[2];
                }

                public static new string ice_staticId()
                {
                    return _ids[2];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetEntitySetting(BooleanAttributeSettingFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetEntitySetting(current);
                    var ostr = inS.startWriteParams();
                    ostr.writeValue(ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "GetAttributeNames",
                    "GetBitStringGenerator",
                    "GetBitStringGenerators",
                    "GetEntitySetting",
                    "GetSourceDataTableId",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return AttributeNameProviderDisp_.iceD_GetAttributeNames(this, inS, current);
                        }
                        case 1:
                        {
                            return BitStringGeneratorProviderDisp_.iceD_GetBitStringGenerator(this, inS, current);
                        }
                        case 2:
                        {
                            return BitStringGeneratorProviderDisp_.iceD_GetBitStringGenerators(this, inS, current);
                        }
                        case 3:
                        {
                            return iceD_GetEntitySetting(this, inS, current);
                        }
                        case 4:
                        {
                            return SourceDataTableIdProviderDisp_.iceD_GetSourceDataTableId(this, inS, current);
                        }
                        case 5:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 6:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 7:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 8:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class BooleanAttributeSettingWithBSGenerationAbilityFunctionsDisp_ : global::Ice.ObjectImpl, BooleanAttributeSettingWithBSGenerationAbilityFunctions
            {
                #region Inherited Slice operations

                public abstract GuidAttributeNamePair[] GetAttributeNames(global::Ice.Current current = null);

                public abstract global::Ferda.Guha.Data.CardinalityEnum GetAttributeCardinality(global::Ice.Current current = null);

                public abstract global::Ferda.Modules.GuidStruct GetAttributeId(global::Ice.Current current = null);

                public abstract BitStringIce GetBitString(string categoryId, global::Ice.Current current = null);

                public abstract string[] GetCategoriesIds(global::Ice.Current current = null);

                public abstract double[] GetCategoriesNumericValues(global::Ice.Current current = null);

                public abstract string GetColumnName(global::Ice.Current current = null);

                public abstract global::Ferda.Guha.Data.ValuesAndFrequencies GetColumnValuesAndFrequencies(global::Ice.Current current = null);

                public abstract int[] GetCountVector(string masterIdColumn, string masterDataTableName, string detailIdColumn, global::Ice.Current current = null);

                public abstract long GetMaxBitStringCount(global::Ice.Current current = null);

                public abstract string[] GetMissingInformationCategoryId(global::Ice.Current current = null);

                public abstract bool GetNextBitString(int skipFirstN, out BitStringIceWithCategoryId bitString, global::Ice.Current current = null);

                public abstract string getAttribute(global::Ice.Current current = null);

                public abstract global::Ferda.Guha.Data.ValuesAndFrequencies getCategoriesAndFrequencies(global::Ice.Current current = null);

                public abstract BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.Current current = null);

                public abstract BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.Current current = null);

                public abstract IEntitySetting GetEntitySetting(global::Ice.Current current = null);

                public abstract string GetSourceDataTableId(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::BitStringGenerator",
                    "::Ferda::Guha::MiningProcessor::BitStringGeneratorProvider",
                    "::Ferda::Guha::MiningProcessor::BooleanAttributeSettingFunctions",
                    "::Ferda::Guha::MiningProcessor::BooleanAttributeSettingWithBSGenerationAbilityFunctions",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[4];
                }

                public static new string ice_staticId()
                {
                    return _ids[4];
                }

                #endregion

                private static readonly string[] _all =
                {
                    "GetAttributeCardinality",
                    "GetAttributeId",
                    "GetAttributeNames",
                    "GetBitString",
                    "GetBitStringGenerator",
                    "GetBitStringGenerators",
                    "GetCategoriesIds",
                    "GetCategoriesNumericValues",
                    "GetColumnName",
                    "GetColumnValuesAndFrequencies",
                    "GetCountVector",
                    "GetEntitySetting",
                    "GetMaxBitStringCount",
                    "GetMissingInformationCategoryId",
                    "GetNextBitString",
                    "GetSourceDataTableId",
                    "getAttribute",
                    "getCategoriesAndFrequencies",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return BitStringGeneratorDisp_.iceD_GetAttributeCardinality(this, inS, current);
                        }
                        case 1:
                        {
                            return BitStringGeneratorDisp_.iceD_GetAttributeId(this, inS, current);
                        }
                        case 2:
                        {
                            return AttributeNameProviderDisp_.iceD_GetAttributeNames(this, inS, current);
                        }
                        case 3:
                        {
                            return BitStringGeneratorDisp_.iceD_GetBitString(this, inS, current);
                        }
                        case 4:
                        {
                            return BitStringGeneratorProviderDisp_.iceD_GetBitStringGenerator(this, inS, current);
                        }
                        case 5:
                        {
                            return BitStringGeneratorProviderDisp_.iceD_GetBitStringGenerators(this, inS, current);
                        }
                        case 6:
                        {
                            return BitStringGeneratorDisp_.iceD_GetCategoriesIds(this, inS, current);
                        }
                        case 7:
                        {
                            return BitStringGeneratorDisp_.iceD_GetCategoriesNumericValues(this, inS, current);
                        }
                        case 8:
                        {
                            return BitStringGeneratorDisp_.iceD_GetColumnName(this, inS, current);
                        }
                        case 9:
                        {
                            return BitStringGeneratorDisp_.iceD_GetColumnValuesAndFrequencies(this, inS, current);
                        }
                        case 10:
                        {
                            return BitStringGeneratorDisp_.iceD_GetCountVector(this, inS, current);
                        }
                        case 11:
                        {
                            return BooleanAttributeSettingFunctionsDisp_.iceD_GetEntitySetting(this, inS, current);
                        }
                        case 12:
                        {
                            return BitStringGeneratorDisp_.iceD_GetMaxBitStringCount(this, inS, current);
                        }
                        case 13:
                        {
                            return BitStringGeneratorDisp_.iceD_GetMissingInformationCategoryId(this, inS, current);
                        }
                        case 14:
                        {
                            return BitStringGeneratorDisp_.iceD_GetNextBitString(this, inS, current);
                        }
                        case 15:
                        {
                            return SourceDataTableIdProviderDisp_.iceD_GetSourceDataTableId(this, inS, current);
                        }
                        case 16:
                        {
                            return BitStringGeneratorDisp_.iceD_getAttribute(this, inS, current);
                        }
                        case 17:
                        {
                            return BitStringGeneratorDisp_.iceD_getCategoriesAndFrequencies(this, inS, current);
                        }
                        case 18:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 19:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 20:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 21:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class MiningTaskFunctionsDisp_ : global::Ice.ObjectImpl, MiningTaskFunctions
            {
                #region Slice operations

                public abstract global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] GetQuantifiers(global::Ice.Current current = null);

                public abstract string GetResult(out string statistics, global::Ice.Current current = null);

                #endregion

                #region Inherited Slice operations

                public abstract GuidAttributeNamePair[] GetAttributeNames(global::Ice.Current current = null);

                public abstract BitStringGeneratorPrx GetBitStringGenerator(global::Ferda.Modules.GuidStruct attributeId, global::Ice.Current current = null);

                public abstract BitStringGeneratorPrx[] GetBitStringGenerators(global::Ice.Current current = null);

                public abstract string GetSourceDataTableId(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::AttributeNameProvider",
                    "::Ferda::Guha::MiningProcessor::BitStringGeneratorProvider",
                    "::Ferda::Guha::MiningProcessor::MiningTaskFunctions",
                    "::Ferda::Guha::MiningProcessor::SourceDataTableIdProvider",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[2];
                }

                public static new string ice_staticId()
                {
                    return _ids[2];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetQuantifiers(MiningTaskFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetQuantifiers(current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrxSeqHelper.write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetResult(MiningTaskFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    string iceP_statistics;
                    var ret = obj.GetResult(out iceP_statistics, current);
                    var ostr = inS.startWriteParams();
                    ostr.writeString(iceP_statistics);
                    ostr.writeString(ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "GetAttributeNames",
                    "GetBitStringGenerator",
                    "GetBitStringGenerators",
                    "GetQuantifiers",
                    "GetResult",
                    "GetSourceDataTableId",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return AttributeNameProviderDisp_.iceD_GetAttributeNames(this, inS, current);
                        }
                        case 1:
                        {
                            return BitStringGeneratorProviderDisp_.iceD_GetBitStringGenerator(this, inS, current);
                        }
                        case 2:
                        {
                            return BitStringGeneratorProviderDisp_.iceD_GetBitStringGenerators(this, inS, current);
                        }
                        case 3:
                        {
                            return iceD_GetQuantifiers(this, inS, current);
                        }
                        case 4:
                        {
                            return iceD_GetResult(this, inS, current);
                        }
                        case 5:
                        {
                            return SourceDataTableIdProviderDisp_.iceD_GetSourceDataTableId(this, inS, current);
                        }
                        case 6:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 7:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 8:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 9:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class MiningProcessorFunctionsDisp_ : global::Ice.ObjectImpl, MiningProcessorFunctions
            {
                #region Slice operations

                public abstract string Run(global::Ferda.Modules.BoxModulePrx taskBoxModule, BooleanAttribute[] booleanAttributes, CategorialAttribute[] categorialAttributes, global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] quantifiers, TaskRunParams taskParams, BitStringGeneratorProviderPrx bitStringGenerator, global::Ferda.ModulesManager.OutputPrx output, global::Ferda.Modules.GuidStruct attributeId, int[] countVector, out string resultInfo, global::Ice.Current current = null);

                public abstract BitStringIceWithCategoryId GetNextBitString(global::Ice.Current current = null);

                public abstract string ETreeRun(global::Ferda.Modules.BoxModulePrx taskBoxModule, ETreeTaskRunParams taskParams, global::Ferda.ModulesManager.OutputPrx output, out string resultInfo, global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::MiningProcessorFunctions",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[0];
                }

                public static new string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_Run(MiningProcessorFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::Ferda.Modules.BoxModulePrx iceP_taskBoxModule;
                    BooleanAttribute[] iceP_booleanAttributes;
                    CategorialAttribute[] iceP_categorialAttributes;
                    global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrx[] iceP_quantifiers;
                    TaskRunParams iceP_taskParams;
                    iceP_taskParams = new TaskRunParams();
                    BitStringGeneratorProviderPrx iceP_bitStringGenerator;
                    global::Ferda.ModulesManager.OutputPrx iceP_output;
                    global::Ferda.Modules.GuidStruct iceP_attributeId;
                    iceP_attributeId = null;
                    int[] iceP_countVector;
                    iceP_taskBoxModule = global::Ferda.Modules.BoxModulePrxHelper.read(istr);
                    iceP_booleanAttributes = BooleanAttributeSeqHelper.read(istr);
                    iceP_categorialAttributes = CategorialAttributeSeqHelper.read(istr);
                    iceP_quantifiers = global::Ferda.Guha.Math.Quantifiers.QuantifierBaseFunctionsPrxSeqHelper.read(istr);
                    iceP_taskParams.ice_readMembers(istr);
                    iceP_bitStringGenerator = BitStringGeneratorProviderPrxHelper.read(istr);
                    iceP_output = global::Ferda.ModulesManager.OutputPrxHelper.read(istr);
                    iceP_attributeId = global::Ferda.Modules.GuidStruct.ice_read(istr);
                    iceP_countVector = global::Ferda.Modules.IntSeqHelper.read(istr);
                    istr.readPendingValues();
                    inS.endReadParams();
                    string iceP_resultInfo;
                    var ret = obj.Run(iceP_taskBoxModule, iceP_booleanAttributes, iceP_categorialAttributes, iceP_quantifiers, iceP_taskParams, iceP_bitStringGenerator, iceP_output, iceP_attributeId, iceP_countVector, out iceP_resultInfo, current);
                    var ostr = inS.startWriteParams();
                    ostr.writeString(iceP_resultInfo);
                    ostr.writeString(ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_GetNextBitString(MiningProcessorFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.GetNextBitString(current);
                    var ostr = inS.startWriteParams();
                    BitStringIceWithCategoryId.ice_write(ostr, ret);
                    ostr.writePendingValues();
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_ETreeRun(MiningProcessorFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    global::Ferda.Modules.BoxModulePrx iceP_taskBoxModule;
                    ETreeTaskRunParams iceP_taskParams;
                    iceP_taskParams = null;
                    global::Ferda.ModulesManager.OutputPrx iceP_output;
                    iceP_taskBoxModule = global::Ferda.Modules.BoxModulePrxHelper.read(istr);
                    iceP_taskParams = ETreeTaskRunParams.ice_read(istr);
                    iceP_output = global::Ferda.ModulesManager.OutputPrxHelper.read(istr);
                    inS.endReadParams();
                    string iceP_resultInfo;
                    var ret = obj.ETreeRun(iceP_taskBoxModule, iceP_taskParams, iceP_output, out iceP_resultInfo, current);
                    var ostr = inS.startWriteParams();
                    ostr.writeString(iceP_resultInfo);
                    ostr.writeString(ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "ETreeRun",
                    "GetNextBitString",
                    "Run",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return iceD_ETreeRun(this, inS, current);
                        }
                        case 1:
                        {
                            return iceD_GetNextBitString(this, inS, current);
                        }
                        case 2:
                        {
                            return iceD_Run(this, inS, current);
                        }
                        case 3:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 4:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 5:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 6:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }

            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class ETreeClassifierFunctionsDisp_ : global::Ice.ObjectImpl, ETreeClassifierFunctions
            {
                #region Slice operations

                public abstract string HelloWorld(global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::Guha::MiningProcessor::ETreeClassifierFunctions",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[0];
                }

                public static new string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_HelloWorld(ETreeClassifierFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                    inS.readEmptyParams();
                    var ret = obj.HelloWorld(current);
                    var ostr = inS.startWriteParams();
                    ostr.writeString(ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "HelloWorld",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return iceD_HelloWorld(this, inS, current);
                        }
                        case 1:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 2:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 3:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 4:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }
        }
    }
}
