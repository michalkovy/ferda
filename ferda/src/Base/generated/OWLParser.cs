//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `OWLParser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ferda
{
    namespace OntologyRelated
    {
        namespace generated
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
            public partial interface OWLParser : global::Ice.Object, OWLParserOperations_
            {
            }
        }
    }
}

namespace Ferda
{
    namespace OntologyRelated
    {
        namespace generated
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public delegate void Callback_OWLParser_parseOntology(global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure ret);
        }
    }
}

namespace Ferda
{
    namespace OntologyRelated
    {
        namespace generated
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface OWLParserPrx : global::Ice.ObjectPrx
            {
                global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure parseOntology(string ontologyURL, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::System.Threading.Tasks.Task<global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure> parseOntologyAsync(string ontologyURL, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                global::Ice.AsyncResult<Callback_OWLParser_parseOntology> begin_parseOntology(string ontologyURL, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                global::Ice.AsyncResult begin_parseOntology(string ontologyURL, global::Ice.AsyncCallback callback, object cookie);

                global::Ice.AsyncResult begin_parseOntology(string ontologyURL, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure end_parseOntology(global::Ice.AsyncResult asyncResult);
            }
        }
    }
}

namespace Ferda
{
    namespace OntologyRelated
    {
        namespace generated
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public interface OWLParserOperations_
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure parseOntology(string ontologyURL, global::Ice.Current current = null);
            }
        }
    }
}

namespace Ferda
{
    namespace OntologyRelated
    {
        namespace generated
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            [global::System.Serializable]
            public sealed class OWLParserPrxHelper : global::Ice.ObjectPrxHelperBase, OWLParserPrx
            {
                public OWLParserPrxHelper()
                {
                }

                public OWLParserPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                {
                }

                #region Synchronous operations

                public global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure parseOntology(string ontologyURL, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    try
                    {
                        return _iceI_parseOntologyAsync(ontologyURL, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    }
                    catch(global::System.AggregateException ex_)
                    {
                        throw ex_.InnerException;
                    }
                }

                #endregion

                #region Async Task operations

                public global::System.Threading.Tasks.Task<global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure> parseOntologyAsync(string ontologyURL, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                {
                    return _iceI_parseOntologyAsync(ontologyURL, context, progress, cancel, false);
                }

                private global::System.Threading.Tasks.Task<global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure> _iceI_parseOntologyAsync(string iceP_ontologyURL, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                {
                    iceCheckTwowayOnly(_parseOntology_name);
                    var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure>(progress, cancel);
                    _iceI_parseOntology(iceP_ontologyURL, context, synchronous, completed);
                    return completed.Task;
                }

                private const string _parseOntology_name = "parseOntology";

                private void _iceI_parseOntology(string iceP_ontologyURL, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                {
                    var outAsync = getOutgoingAsync<global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure>(completed);
                    outAsync.invoke(
                        _parseOntology_name,
                        global::Ice.OperationMode.Normal,
                        global::Ice.FormatType.DefaultFormat,
                        context,
                        synchronous,
                        write: (global::Ice.OutputStream ostr) =>
                        {
                            ostr.writeString(iceP_ontologyURL);
                        },
                        userException: (global::Ice.UserException ex) =>
                        {
                            try
                            {
                                throw ex;
                            }
                            catch(global::Ferda.OntologyRelated.generated.OntologyData.WrongOntologyURL)
                            {
                                throw;
                            }
                            catch(global::Ice.UserException)
                            {
                            }
                        },
                        read: (global::Ice.InputStream istr) =>
                        {
                            global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure ret = null;
                            ret = global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure.ice_read(istr);
                            return ret;
                        });
                }

                #endregion

                #region Asynchronous operations

                public global::Ice.AsyncResult<Callback_OWLParser_parseOntology> begin_parseOntology(string ontologyURL, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                {
                    return begin_parseOntology(ontologyURL, context, null, null, false);
                }

                public global::Ice.AsyncResult begin_parseOntology(string ontologyURL, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_parseOntology(ontologyURL, new global::Ice.OptionalContext(), callback, cookie, false);
                }

                public global::Ice.AsyncResult begin_parseOntology(string ontologyURL, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                {
                    return begin_parseOntology(ontologyURL, context, callback, cookie, false);
                }

                public global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure end_parseOntology(global::Ice.AsyncResult asyncResult)
                {
                    var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _parseOntology_name);
                    var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure>)resultI_.OutgoingAsync;
                    return outgoing_.getResult(resultI_.wait());
                }

                private global::Ice.AsyncResult<Callback_OWLParser_parseOntology> begin_parseOntology(string iceP_ontologyURL, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                {
                    iceCheckAsyncTwowayOnly(_parseOntology_name);
                    var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_OWLParser_parseOntology, global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure>(
                        (Callback_OWLParser_parseOntology cb, global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure ret) =>
                        {
                            if(cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _parseOntology_name, cookie, completedCallback);
                    _iceI_parseOntology(iceP_ontologyURL, context, synchronous, completed);
                    return completed;
                }

                #endregion

                #region Checked and unchecked cast operations

                public static OWLParserPrx checkedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    OWLParserPrx r = b as OWLParserPrx;
                    if((r == null) && b.ice_isA(ice_staticId()))
                    {
                        OWLParserPrxHelper h = new OWLParserPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static OWLParserPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    OWLParserPrx r = b as OWLParserPrx;
                    if((r == null) && b.ice_isA(ice_staticId(), ctx))
                    {
                        OWLParserPrxHelper h = new OWLParserPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static OWLParserPrx checkedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId()))
                        {
                            OWLParserPrxHelper h = new OWLParserPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static OWLParserPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    try
                    {
                        if(bb.ice_isA(ice_staticId(), ctx))
                        {
                            OWLParserPrxHelper h = new OWLParserPrxHelper();
                            h.iceCopyFrom(bb);
                            return h;
                        }
                    }
                    catch(global::Ice.FacetNotExistException)
                    {
                    }
                    return null;
                }

                public static OWLParserPrx uncheckedCast(global::Ice.ObjectPrx b)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    OWLParserPrx r = b as OWLParserPrx;
                    if(r == null)
                    {
                        OWLParserPrxHelper h = new OWLParserPrxHelper();
                        h.iceCopyFrom(b);
                        r = h;
                    }
                    return r;
                }

                public static OWLParserPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                {
                    if(b == null)
                    {
                        return null;
                    }
                    global::Ice.ObjectPrx bb = b.ice_facet(f);
                    OWLParserPrxHelper h = new OWLParserPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }

                private static readonly string[] _ids =
                {
                    "::Ferda::OntologyRelated::generated::OWLParser",
                    "::Ice::Object"
                };

                public static string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Marshaling support

                public static void write(global::Ice.OutputStream ostr, OWLParserPrx v)
                {
                    ostr.writeProxy(v);
                }

                public static OWLParserPrx read(global::Ice.InputStream istr)
                {
                    global::Ice.ObjectPrx proxy = istr.readProxy();
                    if(proxy != null)
                    {
                        OWLParserPrxHelper result = new OWLParserPrxHelper();
                        result.iceCopyFrom(proxy);
                        return result;
                    }
                    return null;
                }

                #endregion
            }
        }
    }
}

namespace Ferda
{
    namespace OntologyRelated
    {
        namespace generated
        {
            [global::System.Runtime.InteropServices.ComVisible(false)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public abstract class OWLParserDisp_ : global::Ice.ObjectImpl, OWLParser
            {
                #region Slice operations

                public abstract global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure parseOntology(string ontologyURL, global::Ice.Current current = null);

                #endregion

                #region Slice type-related members

                private static readonly string[] _ids =
                {
                    "::Ferda::OntologyRelated::generated::OWLParser",
                    "::Ice::Object"
                };

                public override bool ice_isA(string s, global::Ice.Current current = null)
                {
                    return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                }

                public override string[] ice_ids(global::Ice.Current current = null)
                {
                    return _ids;
                }

                public override string ice_id(global::Ice.Current current = null)
                {
                    return _ids[0];
                }

                public static new string ice_staticId()
                {
                    return _ids[0];
                }

                #endregion

                #region Operation dispatch

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_parseOntology(OWLParser obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                    var istr = inS.startReadParams();
                    string iceP_ontologyURL;
                    iceP_ontologyURL = istr.readString();
                    inS.endReadParams();
                    var ret = obj.parseOntology(iceP_ontologyURL, current);
                    var ostr = inS.startWriteParams();
                    global::Ferda.OntologyRelated.generated.OntologyData.OntologyStructure.ice_write(ostr, ret);
                    inS.endWriteParams(ostr);
                    return inS.setResult(ostr);
                }

                private static readonly string[] _all =
                {
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "parseOntology"
                };

                public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                {
                    int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                    if(pos < 0)
                    {
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    switch(pos)
                    {
                        case 0:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                        case 1:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                        case 2:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                        case 3:
                        {
                            return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                        case 4:
                        {
                            return iceD_parseOntology(this, inS, current);
                        }
                    }

                    global::System.Diagnostics.Debug.Assert(false);
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                #endregion
            }
        }
    }
}
