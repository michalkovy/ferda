//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Modules.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ferda
{
    namespace ModulesManager
    {
    }

    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class factoryRefreshTime
        {
            public const int value = 300000;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class factoryRefreshedTestTime
        {
            public const int value = 1000000;
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class ModulesConnection : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string socketName;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BoxModulePrx boxModuleParam;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ModulesConnection()
            {
                this.socketName = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ModulesConnection(string socketName, BoxModulePrx boxModuleParam)
            {
                this.socketName = socketName;
                this.boxModuleParam = boxModuleParam;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::ModulesConnection");
                global::IceInternal.HashUtil.hashAdd(ref h_, socketName);
                global::IceInternal.HashUtil.hashAdd(ref h_, boxModuleParam);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                ModulesConnection o = (ModulesConnection)other;
                if(this.socketName == null)
                {
                    if(o.socketName != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.socketName.Equals(o.socketName))
                    {
                        return false;
                    }
                }
                if(this.boxModuleParam == null)
                {
                    if(o.boxModuleParam != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.boxModuleParam.Equals(o.boxModuleParam))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(ModulesConnection lhs, ModulesConnection rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(ModulesConnection lhs, ModulesConnection rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.socketName);
                BoxModulePrxHelper.write(ostr, this.boxModuleParam);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.socketName = istr.readString();
                this.boxModuleParam = BoxModulePrxHelper.read(istr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, ModulesConnection v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static ModulesConnection ice_read(global::Ice.InputStream istr)
            {
                var v = new ModulesConnection();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly ModulesConnection _nullMarshalValue = new ModulesConnection();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class PropertySetting : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string propertyName;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PropertyValue value;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PropertySetting()
            {
                this.propertyName = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PropertySetting(string propertyName, PropertyValue value)
            {
                this.propertyName = propertyName;
                this.value = value;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::PropertySetting");
                global::IceInternal.HashUtil.hashAdd(ref h_, propertyName);
                global::IceInternal.HashUtil.hashAdd(ref h_, value);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                PropertySetting o = (PropertySetting)other;
                if(this.propertyName == null)
                {
                    if(o.propertyName != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.propertyName.Equals(o.propertyName))
                    {
                        return false;
                    }
                }
                if(this.value == null)
                {
                    if(o.value != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.value.Equals(o.value))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(PropertySetting lhs, PropertySetting rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(PropertySetting lhs, PropertySetting rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.propertyName);
                ostr.writeValue(this.value);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.propertyName = istr.readString();
                istr.readValue((PropertyValue v) => { this.value = v; });
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, PropertySetting v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static PropertySetting ice_read(global::Ice.InputStream istr)
            {
                var v = new PropertySetting();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly PropertySetting _nullMarshalValue = new PropertySetting();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class HelpFileInfo : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string identifier;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public int version;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string label;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public HelpFileInfo()
            {
                this.identifier = "";
                this.label = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public HelpFileInfo(string identifier, int version, string label)
            {
                this.identifier = identifier;
                this.version = version;
                this.label = label;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::HelpFileInfo");
                global::IceInternal.HashUtil.hashAdd(ref h_, identifier);
                global::IceInternal.HashUtil.hashAdd(ref h_, version);
                global::IceInternal.HashUtil.hashAdd(ref h_, label);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                HelpFileInfo o = (HelpFileInfo)other;
                if(this.identifier == null)
                {
                    if(o.identifier != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.identifier.Equals(o.identifier))
                    {
                        return false;
                    }
                }
                if(!this.version.Equals(o.version))
                {
                    return false;
                }
                if(this.label == null)
                {
                    if(o.label != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.label.Equals(o.label))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(HelpFileInfo lhs, HelpFileInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(HelpFileInfo lhs, HelpFileInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.identifier);
                ostr.writeInt(this.version);
                ostr.writeString(this.label);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.identifier = istr.readString();
                this.version = istr.readInt();
                this.label = istr.readString();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, HelpFileInfo v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static HelpFileInfo ice_read(global::Ice.InputStream istr)
            {
                var v = new HelpFileInfo();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly HelpFileInfo _nullMarshalValue = new HelpFileInfo();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class DynamicHelpItem : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string identifier;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string label;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string url;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DynamicHelpItem()
            {
                this.identifier = "";
                this.label = "";
                this.url = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DynamicHelpItem(string identifier, string label, string url)
            {
                this.identifier = identifier;
                this.label = label;
                this.url = url;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::DynamicHelpItem");
                global::IceInternal.HashUtil.hashAdd(ref h_, identifier);
                global::IceInternal.HashUtil.hashAdd(ref h_, label);
                global::IceInternal.HashUtil.hashAdd(ref h_, url);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                DynamicHelpItem o = (DynamicHelpItem)other;
                if(this.identifier == null)
                {
                    if(o.identifier != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.identifier.Equals(o.identifier))
                    {
                        return false;
                    }
                }
                if(this.label == null)
                {
                    if(o.label != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.label.Equals(o.label))
                    {
                        return false;
                    }
                }
                if(this.url == null)
                {
                    if(o.url != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.url.Equals(o.url))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(DynamicHelpItem lhs, DynamicHelpItem rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(DynamicHelpItem lhs, DynamicHelpItem rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.identifier);
                ostr.writeString(this.label);
                ostr.writeString(this.url);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.identifier = istr.readString();
                this.label = istr.readString();
                this.url = istr.readString();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, DynamicHelpItem v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static DynamicHelpItem ice_read(global::Ice.InputStream istr)
            {
                var v = new DynamicHelpItem();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly DynamicHelpItem _nullMarshalValue = new DynamicHelpItem();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class SelectString : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string name;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string label;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string[] disableProperties;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public SelectString()
            {
                this.name = "";
                this.label = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public SelectString(string name, string label, string[] disableProperties)
            {
                this.name = name;
                this.label = label;
                this.disableProperties = disableProperties;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::SelectString");
                global::IceInternal.HashUtil.hashAdd(ref h_, name);
                global::IceInternal.HashUtil.hashAdd(ref h_, label);
                global::IceInternal.HashUtil.hashAdd(ref h_, disableProperties);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                SelectString o = (SelectString)other;
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(this.label == null)
                {
                    if(o.label != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.label.Equals(o.label))
                    {
                        return false;
                    }
                }
                if(this.disableProperties == null)
                {
                    if(o.disableProperties != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.disableProperties, o.disableProperties))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(SelectString lhs, SelectString rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(SelectString lhs, SelectString rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.name);
                ostr.writeString(this.label);
                StringSeqHelper.write(ostr, this.disableProperties);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.name = istr.readString();
                this.label = istr.readString();
                this.disableProperties = StringSeqHelper.read(istr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, SelectString v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static SelectString ice_read(global::Ice.InputStream istr)
            {
                var v = new SelectString();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly SelectString _nullMarshalValue = new SelectString();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class SocketInfo : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string name;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string label;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string hint;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string design;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BoxType[] socketType;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string[] settingProperties;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public bool moreThanOne;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public SocketInfo()
            {
                this.name = "";
                this.label = "";
                this.hint = "";
                this.design = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public SocketInfo(string name, string label, string hint, string design, BoxType[] socketType, string[] settingProperties, bool moreThanOne)
            {
                this.name = name;
                this.label = label;
                this.hint = hint;
                this.design = design;
                this.socketType = socketType;
                this.settingProperties = settingProperties;
                this.moreThanOne = moreThanOne;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::SocketInfo");
                global::IceInternal.HashUtil.hashAdd(ref h_, name);
                global::IceInternal.HashUtil.hashAdd(ref h_, label);
                global::IceInternal.HashUtil.hashAdd(ref h_, hint);
                global::IceInternal.HashUtil.hashAdd(ref h_, design);
                global::IceInternal.HashUtil.hashAdd(ref h_, socketType);
                global::IceInternal.HashUtil.hashAdd(ref h_, settingProperties);
                global::IceInternal.HashUtil.hashAdd(ref h_, moreThanOne);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                SocketInfo o = (SocketInfo)other;
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(this.label == null)
                {
                    if(o.label != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.label.Equals(o.label))
                    {
                        return false;
                    }
                }
                if(this.hint == null)
                {
                    if(o.hint != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.hint.Equals(o.hint))
                    {
                        return false;
                    }
                }
                if(this.design == null)
                {
                    if(o.design != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.design.Equals(o.design))
                    {
                        return false;
                    }
                }
                if(this.socketType == null)
                {
                    if(o.socketType != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.socketType, o.socketType))
                    {
                        return false;
                    }
                }
                if(this.settingProperties == null)
                {
                    if(o.settingProperties != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.settingProperties, o.settingProperties))
                    {
                        return false;
                    }
                }
                if(!this.moreThanOne.Equals(o.moreThanOne))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(SocketInfo lhs, SocketInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(SocketInfo lhs, SocketInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.name);
                ostr.writeString(this.label);
                ostr.writeString(this.hint);
                ostr.writeString(this.design);
                BoxTypeSeqHelper.write(ostr, this.socketType);
                StringSeqHelper.write(ostr, this.settingProperties);
                ostr.writeBool(this.moreThanOne);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.name = istr.readString();
                this.label = istr.readString();
                this.hint = istr.readString();
                this.design = istr.readString();
                this.socketType = BoxTypeSeqHelper.read(istr);
                this.settingProperties = StringSeqHelper.read(istr);
                this.moreThanOne = istr.readBool();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, SocketInfo v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static SocketInfo ice_read(global::Ice.InputStream istr)
            {
                var v = new SocketInfo();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly SocketInfo _nullMarshalValue = new SocketInfo();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class ActionInfo : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string name;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string label;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string hint;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public byte[] icon;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string[][] neededConnectedSockets;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ActionInfo()
            {
                this.name = "";
                this.label = "";
                this.hint = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ActionInfo(string name, string label, string hint, byte[] icon, string[][] neededConnectedSockets)
            {
                this.name = name;
                this.label = label;
                this.hint = hint;
                this.icon = icon;
                this.neededConnectedSockets = neededConnectedSockets;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::ActionInfo");
                global::IceInternal.HashUtil.hashAdd(ref h_, name);
                global::IceInternal.HashUtil.hashAdd(ref h_, label);
                global::IceInternal.HashUtil.hashAdd(ref h_, hint);
                global::IceInternal.HashUtil.hashAdd(ref h_, icon);
                global::IceInternal.HashUtil.hashAdd(ref h_, neededConnectedSockets);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                ActionInfo o = (ActionInfo)other;
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(this.label == null)
                {
                    if(o.label != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.label.Equals(o.label))
                    {
                        return false;
                    }
                }
                if(this.hint == null)
                {
                    if(o.hint != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.hint.Equals(o.hint))
                    {
                        return false;
                    }
                }
                if(this.icon == null)
                {
                    if(o.icon != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.icon, o.icon))
                    {
                        return false;
                    }
                }
                if(this.neededConnectedSockets == null)
                {
                    if(o.neededConnectedSockets != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.neededConnectedSockets, o.neededConnectedSockets))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(ActionInfo lhs, ActionInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(ActionInfo lhs, ActionInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.name);
                ostr.writeString(this.label);
                ostr.writeString(this.hint);
                ByteSeqHelper.write(ostr, this.icon);
                StringSeqSeqHelper.write(ostr, this.neededConnectedSockets);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.name = istr.readString();
                this.label = istr.readString();
                this.hint = istr.readString();
                this.icon = ByteSeqHelper.read(istr);
                this.neededConnectedSockets = StringSeqSeqHelper.read(istr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, ActionInfo v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static ActionInfo ice_read(global::Ice.InputStream istr)
            {
                var v = new ActionInfo();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly ActionInfo _nullMarshalValue = new ActionInfo();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Restriction : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public long[] integral;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public double[] floating;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public bool min;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public bool including;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Restriction()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Restriction(long[] integral, double[] floating, bool min, bool including)
            {
                this.integral = integral;
                this.floating = floating;
                this.min = min;
                this.including = including;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::Restriction");
                global::IceInternal.HashUtil.hashAdd(ref h_, integral);
                global::IceInternal.HashUtil.hashAdd(ref h_, floating);
                global::IceInternal.HashUtil.hashAdd(ref h_, min);
                global::IceInternal.HashUtil.hashAdd(ref h_, including);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                Restriction o = (Restriction)other;
                if(this.integral == null)
                {
                    if(o.integral != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.integral, o.integral))
                    {
                        return false;
                    }
                }
                if(this.floating == null)
                {
                    if(o.floating != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.floating, o.floating))
                    {
                        return false;
                    }
                }
                if(!this.min.Equals(o.min))
                {
                    return false;
                }
                if(!this.including.Equals(o.including))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(Restriction lhs, Restriction rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(Restriction lhs, Restriction rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                LongOptHelper.write(ostr, this.integral);
                DoubleOptHelper.write(ostr, this.floating);
                ostr.writeBool(this.min);
                ostr.writeBool(this.including);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.integral = LongOptHelper.read(istr);
                this.floating = DoubleOptHelper.read(istr);
                this.min = istr.readBool();
                this.including = istr.readBool();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, Restriction v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static Restriction ice_read(global::Ice.InputStream istr)
            {
                var v = new Restriction();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly Restriction _nullMarshalValue = new Restriction();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class PropertyInfo : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string name;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string categoryName;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string typeClassIceId;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public SelectString[] selectBoxParams;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public bool visible;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public bool @readOnly;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Restriction[] numericalRestrictions;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string regexp;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string settingModuleIdentifier;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PropertyInfo()
            {
                this.name = "";
                this.categoryName = "";
                this.typeClassIceId = "";
                this.regexp = "";
                this.settingModuleIdentifier = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PropertyInfo(string name, string categoryName, string typeClassIceId, SelectString[] selectBoxParams, bool visible, bool @readOnly, Restriction[] numericalRestrictions, string regexp, string settingModuleIdentifier)
            {
                this.name = name;
                this.categoryName = categoryName;
                this.typeClassIceId = typeClassIceId;
                this.selectBoxParams = selectBoxParams;
                this.visible = visible;
                this.@readOnly = @readOnly;
                this.numericalRestrictions = numericalRestrictions;
                this.regexp = regexp;
                this.settingModuleIdentifier = settingModuleIdentifier;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::PropertyInfo");
                global::IceInternal.HashUtil.hashAdd(ref h_, name);
                global::IceInternal.HashUtil.hashAdd(ref h_, categoryName);
                global::IceInternal.HashUtil.hashAdd(ref h_, typeClassIceId);
                global::IceInternal.HashUtil.hashAdd(ref h_, selectBoxParams);
                global::IceInternal.HashUtil.hashAdd(ref h_, visible);
                global::IceInternal.HashUtil.hashAdd(ref h_, @readOnly);
                global::IceInternal.HashUtil.hashAdd(ref h_, numericalRestrictions);
                global::IceInternal.HashUtil.hashAdd(ref h_, regexp);
                global::IceInternal.HashUtil.hashAdd(ref h_, settingModuleIdentifier);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                PropertyInfo o = (PropertyInfo)other;
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(this.categoryName == null)
                {
                    if(o.categoryName != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.categoryName.Equals(o.categoryName))
                    {
                        return false;
                    }
                }
                if(this.typeClassIceId == null)
                {
                    if(o.typeClassIceId != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.typeClassIceId.Equals(o.typeClassIceId))
                    {
                        return false;
                    }
                }
                if(this.selectBoxParams == null)
                {
                    if(o.selectBoxParams != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.selectBoxParams, o.selectBoxParams))
                    {
                        return false;
                    }
                }
                if(!this.visible.Equals(o.visible))
                {
                    return false;
                }
                if(!this.@readOnly.Equals(o.@readOnly))
                {
                    return false;
                }
                if(this.numericalRestrictions == null)
                {
                    if(o.numericalRestrictions != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.numericalRestrictions, o.numericalRestrictions))
                    {
                        return false;
                    }
                }
                if(this.regexp == null)
                {
                    if(o.regexp != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.regexp.Equals(o.regexp))
                    {
                        return false;
                    }
                }
                if(this.settingModuleIdentifier == null)
                {
                    if(o.settingModuleIdentifier != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.settingModuleIdentifier.Equals(o.settingModuleIdentifier))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(PropertyInfo lhs, PropertyInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(PropertyInfo lhs, PropertyInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.name);
                ostr.writeString(this.categoryName);
                ostr.writeString(this.typeClassIceId);
                SelectStringSeqHelper.write(ostr, this.selectBoxParams);
                ostr.writeBool(this.visible);
                ostr.writeBool(this.@readOnly);
                RestrictionSeqHelper.write(ostr, this.numericalRestrictions);
                ostr.writeString(this.regexp);
                ostr.writeString(this.settingModuleIdentifier);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.name = istr.readString();
                this.categoryName = istr.readString();
                this.typeClassIceId = istr.readString();
                this.selectBoxParams = SelectStringSeqHelper.read(istr);
                this.visible = istr.readBool();
                this.@readOnly = istr.readBool();
                this.numericalRestrictions = RestrictionSeqHelper.read(istr);
                this.regexp = istr.readString();
                this.settingModuleIdentifier = istr.readString();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, PropertyInfo v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static PropertyInfo ice_read(global::Ice.InputStream istr)
            {
                var v = new PropertyInfo();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly PropertyInfo _nullMarshalValue = new PropertyInfo();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class ModuleAskingForCreation : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string newBoxModuleIdentifier;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string[] newBoxModuleUserLabel;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ModulesConnection[] modulesConnection;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PropertySetting[] propertySetting;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ModuleAskingForCreation()
            {
                this.newBoxModuleIdentifier = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ModuleAskingForCreation(string newBoxModuleIdentifier, string[] newBoxModuleUserLabel, ModulesConnection[] modulesConnection, PropertySetting[] propertySetting)
            {
                this.newBoxModuleIdentifier = newBoxModuleIdentifier;
                this.newBoxModuleUserLabel = newBoxModuleUserLabel;
                this.modulesConnection = modulesConnection;
                this.propertySetting = propertySetting;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::ModuleAskingForCreation");
                global::IceInternal.HashUtil.hashAdd(ref h_, newBoxModuleIdentifier);
                global::IceInternal.HashUtil.hashAdd(ref h_, newBoxModuleUserLabel);
                global::IceInternal.HashUtil.hashAdd(ref h_, modulesConnection);
                global::IceInternal.HashUtil.hashAdd(ref h_, propertySetting);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                ModuleAskingForCreation o = (ModuleAskingForCreation)other;
                if(this.newBoxModuleIdentifier == null)
                {
                    if(o.newBoxModuleIdentifier != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.newBoxModuleIdentifier.Equals(o.newBoxModuleIdentifier))
                    {
                        return false;
                    }
                }
                if(this.newBoxModuleUserLabel == null)
                {
                    if(o.newBoxModuleUserLabel != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.newBoxModuleUserLabel, o.newBoxModuleUserLabel))
                    {
                        return false;
                    }
                }
                if(this.modulesConnection == null)
                {
                    if(o.modulesConnection != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.modulesConnection, o.modulesConnection))
                    {
                        return false;
                    }
                }
                if(this.propertySetting == null)
                {
                    if(o.propertySetting != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.propertySetting, o.propertySetting))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(ModuleAskingForCreation lhs, ModuleAskingForCreation rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(ModuleAskingForCreation lhs, ModuleAskingForCreation rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.newBoxModuleIdentifier);
                StringOptHelper.write(ostr, this.newBoxModuleUserLabel);
                ModulesConnectionSeqHelper.write(ostr, this.modulesConnection);
                PropertySettingSeqHelper.write(ostr, this.propertySetting);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.newBoxModuleIdentifier = istr.readString();
                this.newBoxModuleUserLabel = StringOptHelper.read(istr);
                this.modulesConnection = ModulesConnectionSeqHelper.read(istr);
                this.propertySetting = PropertySettingSeqHelper.read(istr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, ModuleAskingForCreation v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static ModuleAskingForCreation ice_read(global::Ice.InputStream istr)
            {
                var v = new ModuleAskingForCreation();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly ModuleAskingForCreation _nullMarshalValue = new ModuleAskingForCreation();

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class ModulesAskingForCreation : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string label;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string hint;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DynamicHelpItem[] help;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ModuleAskingForCreation[] newModules;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ModulesAskingForCreation()
            {
                this.label = "";
                this.hint = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ModulesAskingForCreation(string label, string hint, DynamicHelpItem[] help, ModuleAskingForCreation[] newModules)
            {
                this.label = label;
                this.hint = hint;
                this.help = help;
                this.newModules = newModules;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Modules::ModulesAskingForCreation");
                global::IceInternal.HashUtil.hashAdd(ref h_, label);
                global::IceInternal.HashUtil.hashAdd(ref h_, hint);
                global::IceInternal.HashUtil.hashAdd(ref h_, help);
                global::IceInternal.HashUtil.hashAdd(ref h_, newModules);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                ModulesAskingForCreation o = (ModulesAskingForCreation)other;
                if(this.label == null)
                {
                    if(o.label != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.label.Equals(o.label))
                    {
                        return false;
                    }
                }
                if(this.hint == null)
                {
                    if(o.hint != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.hint.Equals(o.hint))
                    {
                        return false;
                    }
                }
                if(this.help == null)
                {
                    if(o.help != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.help, o.help))
                    {
                        return false;
                    }
                }
                if(this.newModules == null)
                {
                    if(o.newModules != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Arrays.Equals(this.newModules, o.newModules))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(ModulesAskingForCreation lhs, ModulesAskingForCreation rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(ModulesAskingForCreation lhs, ModulesAskingForCreation rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.label);
                ostr.writeString(this.hint);
                DynamicHelpItemSeqHelper.write(ostr, this.help);
                ModuleAskingForCreationSeqHelper.write(ostr, this.newModules);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.label = istr.readString();
                this.hint = istr.readString();
                this.help = DynamicHelpItemSeqHelper.read(istr);
                this.newModules = ModuleAskingForCreationSeqHelper.read(istr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, ModulesAskingForCreation v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static ModulesAskingForCreation ice_read(global::Ice.InputStream istr)
            {
                var v = new ModulesAskingForCreation();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly ModulesAskingForCreation _nullMarshalValue = new ModulesAskingForCreation();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BoxModule : global::Ice.Object, BoxModuleOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Entity : global::Ice.Object, EntityOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface ModuleForInteraction : global::Ice.Object, ModuleForInteractionOperations_, Entity
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface SettingModule : global::Ice.Object, SettingModuleOperations_, Entity
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface SettingModuleWithStringAbility : global::Ice.Object, SettingModuleWithStringAbilityOperations_, SettingModule
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BoxModuleFactory : global::Ice.Object, BoxModuleFactoryOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BoxModuleFactoryCreator : global::Ice.Object, BoxModuleFactoryCreatorOperations_, Entity
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface PropertyBoxModuleFactoryCreator : global::Ice.Object, PropertyBoxModuleFactoryCreatorOperations_, BoxModuleFactoryCreator
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface ProgressTask : global::Ice.Object, ProgressTaskOperations_
        {
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getDefaultUserLabel(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getDynamicHelpItems(DynamicHelpItem[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_runAction();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getAdditionalSockets(SocketInfo[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getAdditionalProperties(PropertyInfo[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_setConnection();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getConnections(BoxModulePrx[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_removeConnection();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_setProperty();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getProperty(PropertyValue ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getPropertyOptions(SelectString[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_isPropertySet(bool ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getModulesAskingForCreation(ModulesAskingForCreation[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getFunctionsIceIds(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getFunctions(global::Ice.ObjectPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_getMyFactory(BoxModuleFactoryPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModule_validate();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_Entity_getLabel(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ModuleForInteraction_getNeededConnectedSockets(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ModuleForInteraction_getAcceptedBoxTypes(BoxType[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ModuleForInteraction_getHint(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ModuleForInteraction_getHelpFile(byte[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ModuleForInteraction_getHelpFileInfoSeq(HelpFileInfo[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ModuleForInteraction_getDynamicHelpItems(DynamicHelpItem[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ModuleForInteraction_run();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ModuleForInteraction_getIcon(byte[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_SettingModule_getIdentifier(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_SettingModule_run(PropertyValue ret, string about);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_SettingModule_getPropertyAbout(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_SettingModuleWithStringAbility_convertFromStringAbout(PropertyValue ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_createBoxModule(BoxModulePrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_refresh();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_destroyIfEmpty(bool ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_destroyBoxModule();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_destroy();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_getSockets(SocketInfo[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_getActions(ActionInfo[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_getProperties(PropertyInfo[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_getHelpFileInfoSeq(HelpFileInfo[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactory_getMyFactoryCreator(BoxModuleFactoryCreatorPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_createBoxModuleFactory(BoxModuleFactoryPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_getIdentifier(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_getBoxCategories(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName(string[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_getHint(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_getHelpFile(byte[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_getIcon(byte[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleFactoryCreator_getDesign(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_PropertyBoxModuleFactoryCreator_getPropertyClassIceId(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ProgressTask_getValue(float ret, string message);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ProgressTask_stop();
    }
}

namespace Ferda
{
    namespace Modules
    {
        public struct SettingModule_RunResult
        {
            public SettingModule_RunResult(PropertyValue returnValue, string about)
            {
                this.returnValue = returnValue;
                this.about = about;
            }

            public PropertyValue returnValue;
            public string about;
        }

        public struct ProgressTask_GetValueResult
        {
            public ProgressTask_GetValueResult(float returnValue, string message)
            {
                this.returnValue = returnValue;
                this.message = message;
            }

            public float returnValue;
            public string message;
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        /// <summary>
        /// Box module`s interface.
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModulePrx : global::Ice.ObjectPrx
        {
            /// <summary>
            /// Gets default user label e.
            /// g. if some box
            /// module`s property drives user label.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            string[] getDefaultUserLabel(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets default user label e.
            /// g. if some box
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string[]> getDefaultUserLabelAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets default user label e.
            /// g. if some box
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getDefaultUserLabel> begin_getDefaultUserLabel(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets default user label e.
            /// g. if some box
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getDefaultUserLabel(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets default user label e.
            /// g. if some box
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getDefaultUserLabel(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets default user label e.
            /// g. if some box
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string[] end_getDefaultUserLabel(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Dynamically returns box module`s sequence of help items.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            DynamicHelpItem[] getDynamicHelpItems(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dynamically returns box module`s sequence of help items.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<DynamicHelpItem[]> getDynamicHelpItemsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dynamically returns box module`s sequence of help items.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getDynamicHelpItems> begin_getDynamicHelpItems(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dynamically returns box module`s sequence of help items.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getDynamicHelpItems(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dynamically returns box module`s sequence of help items.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getDynamicHelpItems(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dynamically returns box module`s sequence of help items.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            DynamicHelpItem[] end_getDynamicHelpItems(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Executes action of specified name.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            void runAction(string actionName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Executes action of specified name.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task runActionAsync(string actionName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Executes action of specified name.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_runAction> begin_runAction(string actionName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Executes action of specified name.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_runAction(string actionName, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Executes action of specified name.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_runAction(string actionName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Executes action of specified name.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_runAction(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            SocketInfo[] getAdditionalSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<SocketInfo[]> getAdditionalSocketsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getAdditionalSockets> begin_getAdditionalSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getAdditionalSockets(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getAdditionalSockets(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            SocketInfo[] end_getAdditionalSockets(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            PropertyInfo[] getAdditionalProperties(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<PropertyInfo[]> getAdditionalPropertiesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getAdditionalProperties> begin_getAdditionalProperties(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getAdditionalProperties(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getAdditionalProperties(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            PropertyInfo[] end_getAdditionalProperties(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="socketName">Name of the socket, where should be connected
            /// other otherModule.
            ///
            /// </param>
            /// <param name="otherModule">The proxy of other module, which should be
            /// connected to socket socketName.
            ///
            /// </param>
            /// <exception name="BadTypeError">This exception means bad type of functions.
            ///
            /// </exception>
            /// <exception name="NameNotExistError">Is thrown if socket with socketName does
            /// not exist in this BoxModule.
            ///
            /// </exception>
            /// <exception name="ConnectionExistsError">Is thrown if this connection alredy exists.</exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            void setConnection(string socketName, BoxModulePrx otherModule, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="socketName">Name of the socket, where should be connected
            /// other otherModule.
            ///
            /// </param>
            /// <param name="otherModule">The proxy of other module, which should be
            /// connected to socket socketName.
            ///
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task setConnectionAsync(string socketName, BoxModulePrx otherModule, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="socketName">Name of the socket, where should be connected
            /// other otherModule.
            ///
            /// </param>
            /// <param name="otherModule">The proxy of other module, which should be
            /// connected to socket socketName.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_setConnection> begin_setConnection(string socketName, BoxModulePrx otherModule, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="socketName">Name of the socket, where should be connected
            /// other otherModule.
            ///
            /// </param>
            /// <param name="otherModule">The proxy of other module, which should be
            /// connected to socket socketName.
            ///
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_setConnection(string socketName, BoxModulePrx otherModule, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="socketName">Name of the socket, where should be connected
            /// other otherModule.
            ///
            /// </param>
            /// <param name="otherModule">The proxy of other module, which should be
            /// connected to socket socketName.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_setConnection(string socketName, BoxModulePrx otherModule, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_setConnection(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets all connection in the socket.
            /// </summary>
            /// <param name="socketName">Name of the socket.
            ///
            /// </param>
            /// <exception name="NameNotExistError">Is thrown if socket with socketName does
            /// not exist in this BoxModule.</exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            BoxModulePrx[] getConnections(string socketName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets all connection in the socket.
            /// </summary>
            /// <param name="socketName">Name of the socket.
            ///
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<BoxModulePrx[]> getConnectionsAsync(string socketName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets all connection in the socket.
            /// </summary>
            /// <param name="socketName">Name of the socket.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getConnections> begin_getConnections(string socketName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets all connection in the socket.
            /// </summary>
            /// <param name="socketName">Name of the socket.
            ///
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getConnections(string socketName, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets all connection in the socket.
            /// </summary>
            /// <param name="socketName">Name of the socket.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getConnections(string socketName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets all connection in the socket.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            BoxModulePrx[] end_getConnections(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Removes connection with one BoxModule from socket.
            /// </summary>
            /// <param name="socketName">Name of socket from which to remove connection.
            ///
            /// </param>
            /// <param name="boxModuleIceIdentity">Ice identity of BoxModule which is
            /// connected to socket socketName and this connection is to be
            /// removed.
            ///
            /// </param>
            /// <exception name="NameNotExistError">Is thrown if socket with socketName does
            /// not exist in this BoxModule.
            ///
            /// </exception>
            /// <exception name="ConnectionNotExistError">Is thrown if BoxModule
            /// boxModuleIceIdentity is not connected to socket socketName.</exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            void removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Removes connection with one BoxModule from socket.
            /// </summary>
            /// <param name="socketName">Name of socket from which to remove connection.
            ///
            /// </param>
            /// <param name="boxModuleIceIdentity">Ice identity of BoxModule which is
            /// connected to socket socketName and this connection is to be
            /// removed.
            ///
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task removeConnectionAsync(string socketName, string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Removes connection with one BoxModule from socket.
            /// </summary>
            /// <param name="socketName">Name of socket from which to remove connection.
            ///
            /// </param>
            /// <param name="boxModuleIceIdentity">Ice identity of BoxModule which is
            /// connected to socket socketName and this connection is to be
            /// removed.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_removeConnection> begin_removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Removes connection with one BoxModule from socket.
            /// </summary>
            /// <param name="socketName">Name of socket from which to remove connection.
            ///
            /// </param>
            /// <param name="boxModuleIceIdentity">Ice identity of BoxModule which is
            /// connected to socket socketName and this connection is to be
            /// removed.
            ///
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Removes connection with one BoxModule from socket.
            /// </summary>
            /// <param name="socketName">Name of socket from which to remove connection.
            ///
            /// </param>
            /// <param name="boxModuleIceIdentity">Ice identity of BoxModule which is
            /// connected to socket socketName and this connection is to be
            /// removed.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Removes connection with one BoxModule from socket.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_removeConnection(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="propertyName">Name of the property.
            ///
            /// </param>
            /// <param name="value">New value of the property.
            ///
            /// </param>
            /// <exception name="BadTypeError">This exception means bad data type of value.
            ///
            /// </exception>
            /// <exception name="NameNotExistError">Is thrown if property with propertyName does
            /// not exist in this BoxModule.
            ///
            /// </exception>
            /// <exception name="ReadOnlyError">Is thrown if this property is only for reading.
            ///
            /// </exception>
            /// <exception name="BadValueError">This exception means bad value e. g. it is out
            /// of restrictions or regular expression conditions.</exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            void setProperty(string propertyName, PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="propertyName">Name of the property.
            ///
            /// </param>
            /// <param name="value">New value of the property.
            ///
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task setPropertyAsync(string propertyName, PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="propertyName">Name of the property.
            ///
            /// </param>
            /// <param name="value">New value of the property.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_setProperty> begin_setProperty(string propertyName, PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="propertyName">Name of the property.
            ///
            /// </param>
            /// <param name="value">New value of the property.
            ///
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_setProperty(string propertyName, PropertyValue value, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="propertyName">Name of the property.
            ///
            /// </param>
            /// <param name="value">New value of the property.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_setProperty(string propertyName, PropertyValue value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_setProperty(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets value of the property.
            /// Invocation of this method can be asynchronous.
            ///
            /// </summary>
            /// <exception name="NameNotExistError">Is thrown if property with propertyName does
            /// not exist in this BoxModule.</exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            PropertyValue getProperty(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets value of the property.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<PropertyValue> getPropertyAsync(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets value of the property.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getProperty> begin_getProperty(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets value of the property.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getProperty(string propertyName, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets value of the property.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getProperty(string propertyName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets value of the property.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            PropertyValue end_getProperty(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Used only for property of SelectOptT data type.
            /// </summary>
            /// <exception name="NameNotExistError">Is thrown if property with propertyName does
            /// not exist in this BoxModule.</exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            SelectString[] getPropertyOptions(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Used only for property of SelectOptT data type.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<SelectString[]> getPropertyOptionsAsync(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Used only for property of SelectOptT data type.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getPropertyOptions> begin_getPropertyOptions(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Used only for property of SelectOptT data type.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getPropertyOptions(string propertyName, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Used only for property of SelectOptT data type.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getPropertyOptions(string propertyName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Used only for property of SelectOptT data type.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            SelectString[] end_getPropertyOptions(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Useful for property of OtherT type and it`s neededProperty
            /// checking
            /// </summary>
            /// <exception name="NameNotExistError">Is thrown if property with propertyName does
            /// not exist in this BoxModule.
            ///
            /// </exception>
            /// <returns>True if this property was set by SettingModule</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            bool isPropertySet(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Useful for property of OtherT type and it`s neededProperty
            /// checking
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<bool> isPropertySetAsync(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Useful for property of OtherT type and it`s neededProperty
            /// checking
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_isPropertySet> begin_isPropertySet(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Useful for property of OtherT type and it`s neededProperty
            /// checking
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_isPropertySet(string propertyName, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Useful for property of OtherT type and it`s neededProperty
            /// checking
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_isPropertySet(string propertyName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Useful for property of OtherT type and it`s neededProperty
            /// checking
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>True if this property was set by SettingModule</returns>
            bool end_isPropertySet(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets sequence of possible modules asking for creation.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            ModulesAskingForCreation[] getModulesAskingForCreation(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets sequence of possible modules asking for creation.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<ModulesAskingForCreation[]> getModulesAskingForCreationAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets sequence of possible modules asking for creation.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getModulesAskingForCreation> begin_getModulesAskingForCreation(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets sequence of possible modules asking for creation.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getModulesAskingForCreation(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets sequence of possible modules asking for creation.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getModulesAskingForCreation(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets sequence of possible modules asking for creation.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            ModulesAskingForCreation[] end_getModulesAskingForCreation(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Returns ice_id of proxy which will be returned by getFunctions(),
            /// theoreticaly this can return something other than what returns
            /// BoxModuleFactoryCreator in function getBoxModuleFunctionsIceIds -
            /// specially lambda box module
            /// </summary>
            /// <returns>ice_id of proxy which will be returned by getFunctions
            ///
            /// </returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            string[] getFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Returns ice_id of proxy which will be returned by getFunctions(),
            /// theoreticaly this can return something other than what returns
            /// BoxModuleFactoryCreator in function getBoxModuleFunctionsIceIds -
            /// specially lambda box module
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string[]> getFunctionsIceIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Returns ice_id of proxy which will be returned by getFunctions(),
            /// theoreticaly this can return something other than what returns
            /// BoxModuleFactoryCreator in function getBoxModuleFunctionsIceIds -
            /// specially lambda box module
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getFunctionsIceIds> begin_getFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Returns ice_id of proxy which will be returned by getFunctions(),
            /// theoreticaly this can return something other than what returns
            /// BoxModuleFactoryCreator in function getBoxModuleFunctionsIceIds -
            /// specially lambda box module
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getFunctionsIceIds(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Returns ice_id of proxy which will be returned by getFunctions(),
            /// theoreticaly this can return something other than what returns
            /// BoxModuleFactoryCreator in function getBoxModuleFunctionsIceIds -
            /// specially lambda box module
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getFunctionsIceIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Returns ice_id of proxy which will be returned by getFunctions(),
            /// theoreticaly this can return something other than what returns
            /// BoxModuleFactoryCreator in function getBoxModuleFunctionsIceIds -
            /// specially lambda box module
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>ice_id of proxy which will be returned by getFunctions
            ///
            /// </returns>
            string[] end_getFunctionsIceIds(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Throught lambda abstraction is BoxModule interface separated
            /// from functions over this BoxModule.
            /// Functions is module (object)
            /// implementing some interface defined in it`s slice design.
            /// Functions can works with properties and sockets of this BoxModule
            ///
            /// </summary>
            /// <returns>Functions object proxy.</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            global::Ice.ObjectPrx getFunctions(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Throught lambda abstraction is BoxModule interface separated
            /// from functions over this BoxModule.
            /// Functions is module (object)
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getFunctionsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Throught lambda abstraction is BoxModule interface separated
            /// from functions over this BoxModule.
            /// Functions is module (object)
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getFunctions> begin_getFunctions(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Throught lambda abstraction is BoxModule interface separated
            /// from functions over this BoxModule.
            /// Functions is module (object)
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getFunctions(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Throught lambda abstraction is BoxModule interface separated
            /// from functions over this BoxModule.
            /// Functions is module (object)
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getFunctions(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Throught lambda abstraction is BoxModule interface separated
            /// from functions over this BoxModule.
            /// Functions is module (object)
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>Functions object proxy.</returns>
            global::Ice.ObjectPrx end_getFunctions(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets proxy of factory of this box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            BoxModuleFactoryPrx getMyFactory(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets proxy of factory of this box module.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<BoxModuleFactoryPrx> getMyFactoryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets proxy of factory of this box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_getMyFactory> begin_getMyFactory(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets proxy of factory of this box module.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getMyFactory(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets proxy of factory of this box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getMyFactory(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets proxy of factory of this box module.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            BoxModuleFactoryPrx end_getMyFactory(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Validates box module (e.g.
            /// its settings).
            ///
            /// </summary>
            /// <exception name="BoxRuntimeError">Is thrown if some runtime error ocured.</exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            void validate(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Validates box module (e.g.
            /// its settings).
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task validateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Validates box module (e.g.
            /// its settings).
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModule_validate> begin_validate(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Validates box module (e.g.
            /// its settings).
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_validate(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Validates box module (e.g.
            /// its settings).
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_validate(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Validates box module (e.g.
            /// its settings).
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_validate(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface EntityPrx : global::Ice.ObjectPrx
        {
            string getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string> getLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            string end_getLabel(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ModuleForInteractionPrx : EntityPrx
        {
            /// <summary>
            /// Gets conditions on box module`s socket, which has to be
            /// satisfied before the module for interaction can run.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            string[] getNeededConnectedSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets conditions on box module`s socket, which has to be
            /// satisfied before the module for interaction can run.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string[]> getNeededConnectedSocketsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets conditions on box module`s socket, which has to be
            /// satisfied before the module for interaction can run.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_ModuleForInteraction_getNeededConnectedSockets> begin_getNeededConnectedSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets conditions on box module`s socket, which has to be
            /// satisfied before the module for interaction can run.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getNeededConnectedSockets(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets conditions on box module`s socket, which has to be
            /// satisfied before the module for interaction can run.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getNeededConnectedSockets(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets conditions on box module`s socket, which has to be
            /// satisfied before the module for interaction can run.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string[] end_getNeededConnectedSockets(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets array of box types, which can use this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            BoxType[] getAcceptedBoxTypes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets array of box types, which can use this module for interaction.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<BoxType[]> getAcceptedBoxTypesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets array of box types, which can use this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_ModuleForInteraction_getAcceptedBoxTypes> begin_getAcceptedBoxTypes(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets array of box types, which can use this module for interaction.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getAcceptedBoxTypes(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets array of box types, which can use this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getAcceptedBoxTypes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets array of box types, which can use this module for interaction.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            BoxType[] end_getAcceptedBoxTypes(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets localized hint (short help) for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            string getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets localized hint (short help) for this module for interaction.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string> getHintAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets localized hint (short help) for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_ModuleForInteraction_getHint> begin_getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets localized hint (short help) for this module for interaction.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets localized hint (short help) for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets localized hint (short help) for this module for interaction.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string end_getHint(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets help file as aray of Bytes for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            byte[] getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets help file as aray of Bytes for this module for interaction.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<byte[]> getHelpFileAsync(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets help file as aray of Bytes for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_ModuleForInteraction_getHelpFile> begin_getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets help file as aray of Bytes for this module for interaction.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets help file as aray of Bytes for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets help file as aray of Bytes for this module for interaction.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            byte[] end_getHelpFile(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets information about help files for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            HelpFileInfo[] getHelpFileInfoSeq(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about help files for this module for interaction.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<HelpFileInfo[]> getHelpFileInfoSeqAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets information about help files for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_ModuleForInteraction_getHelpFileInfoSeq> begin_getHelpFileInfoSeq(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about help files for this module for interaction.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHelpFileInfoSeq(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about help files for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHelpFileInfoSeq(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about help files for this module for interaction.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            HelpFileInfo[] end_getHelpFileInfoSeq(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Dynamically gets help item for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            DynamicHelpItem[] getDynamicHelpItems(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dynamically gets help item for this module for interaction.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<DynamicHelpItem[]> getDynamicHelpItemsAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Dynamically gets help item for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_ModuleForInteraction_getDynamicHelpItems> begin_getDynamicHelpItems(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Dynamically gets help item for this module for interaction.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getDynamicHelpItems(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dynamically gets help item for this module for interaction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getDynamicHelpItems(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Dynamically gets help item for this module for interaction.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            DynamicHelpItem[] end_getDynamicHelpItems(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Runs the module for interaction.
            /// </summary>
            /// <param name="boxModuleParam">Proxy of the box module, over which this
            /// module for interaction runs.
            ///
            /// </param>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager.
            ///
            /// </param>
            /// <exception name="BoxRuntimeError">If there is any hard ModuleForInteraction problem
            /// of running it, this exception will be raised. Raise this exception
            /// only if it is really needed, it is still error of application this
            /// exception!</exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            void run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Runs the module for interaction.
            /// </summary>
            /// <param name="boxModuleParam">Proxy of the box module, over which this
            /// module for interaction runs.
            ///
            /// </param>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager.
            ///
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task runAsync(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Runs the module for interaction.
            /// </summary>
            /// <param name="boxModuleParam">Proxy of the box module, over which this
            /// module for interaction runs.
            ///
            /// </param>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_ModuleForInteraction_run> begin_run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Runs the module for interaction.
            /// </summary>
            /// <param name="boxModuleParam">Proxy of the box module, over which this
            /// module for interaction runs.
            ///
            /// </param>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager.
            ///
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Runs the module for interaction.
            /// </summary>
            /// <param name="boxModuleParam">Proxy of the box module, over which this
            /// module for interaction runs.
            ///
            /// </param>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Runs the module for interaction.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_run(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets icon (*.ico) as array of Bytes for this module for intraction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            byte[] getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets icon (*.ico) as array of Bytes for this module for intraction.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<byte[]> getIconAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets icon (*.ico) as array of Bytes for this module for intraction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_ModuleForInteraction_getIcon> begin_getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets icon (*.ico) as array of Bytes for this module for intraction.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getIcon(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets icon (*.ico) as array of Bytes for this module for intraction.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getIcon(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets icon (*.ico) as array of Bytes for this module for intraction.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            byte[] end_getIcon(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface SettingModulePrx : EntityPrx
        {
            string getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string> getIdentifierAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_SettingModule_getIdentifier> begin_getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getIdentifier(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getIdentifier(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            string end_getIdentifier(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Run this Module for setting property.
            /// </summary>
            /// <param name="valueBefore">Value of property (which this module set) before
            /// this action.
            ///
            /// </param>
            /// <param name="boxModuleParam">Over this Box Module SettingModule works.
            ///
            /// </param>
            /// <param name="about">String value which should be shown in property bar.
            ///
            /// </param>
            /// <returns>New value of property to be set.
            ///
            /// </returns>
            /// <exception name="CouldNotRunError">If there is any hard SettingModule problem
            /// of running it, this exception will be raised. Raise this exception
            /// only if it is really needed, it is still error of application this
            /// exception!
            ///
            /// </exception>
            /// <param name="context">The Context map to send with the invocation.</param>

            PropertyValue run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, out string about, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Run this Module for setting property.
            /// </summary>
            /// <param name="valueBefore">Value of property (which this module set) before
            /// this action.
            ///
            /// </param>
            /// <param name="boxModuleParam">Over this Box Module SettingModule works.
            ///
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<SettingModule_RunResult> runAsync(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Run this Module for setting property.
            /// </summary>
            /// <param name="valueBefore">Value of property (which this module set) before
            /// this action.
            ///
            /// </param>
            /// <param name="boxModuleParam">Over this Box Module SettingModule works.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_SettingModule_run> begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Run this Module for setting property.
            /// </summary>
            /// <param name="valueBefore">Value of property (which this module set) before
            /// this action.
            ///
            /// </param>
            /// <param name="boxModuleParam">Over this Box Module SettingModule works.
            ///
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Run this Module for setting property.
            /// </summary>
            /// <param name="valueBefore">Value of property (which this module set) before
            /// this action.
            ///
            /// </param>
            /// <param name="boxModuleParam">Over this Box Module SettingModule works.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Run this Module for setting property.
            /// </summary>
            /// <param name="about">String value which should be shown in property bar.
            ///
            /// </param>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>New value of property to be set.
            ///
            /// </returns>
            PropertyValue end_run(out string about, global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets "about" string from the PropertyValue.
            /// </summary>
            /// <param name="value">PropertyValue for generating the "about" string.
            ///
            /// </param>
            /// <returns>String, which describes specified
            /// PropertyValue as well as possible.</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            string getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets "about" string from the PropertyValue.
            /// </summary>
            /// <param name="value">PropertyValue for generating the "about" string.
            ///
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string> getPropertyAboutAsync(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets "about" string from the PropertyValue.
            /// </summary>
            /// <param name="value">PropertyValue for generating the "about" string.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_SettingModule_getPropertyAbout> begin_getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets "about" string from the PropertyValue.
            /// </summary>
            /// <param name="value">PropertyValue for generating the "about" string.
            ///
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getPropertyAbout(PropertyValue value, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets "about" string from the PropertyValue.
            /// </summary>
            /// <param name="value">PropertyValue for generating the "about" string.
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets "about" string from the PropertyValue.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>String, which describes specified
            /// PropertyValue as well as possible.</returns>
            string end_getPropertyAbout(global::Ice.AsyncResult asyncResult);
        }

        /// <summary>
        /// This type of module is used if about string in property grid can be
        /// converted to "involved" type (set by SettingModule) and vice versa.
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface SettingModuleWithStringAbilityPrx : SettingModulePrx
        {
            /// <summary>
            /// Gets PropertyValue form the "about" string.
            /// </summary>
            /// <param name="about">The about (input) string for conversion to PropertyValue.
            ///
            /// </param>
            /// <param name="localePrefs">Localization prefrences.</param>
            /// <param name="context">The Context map to send with the invocation.</param>

            PropertyValue convertFromStringAbout(string about, string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets PropertyValue form the "about" string.
            /// </summary>
            /// <param name="about">The about (input) string for conversion to PropertyValue.
            ///
            /// </param>
            /// <param name="localePrefs">Localization prefrences.</param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<PropertyValue> convertFromStringAboutAsync(string about, string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets PropertyValue form the "about" string.
            /// </summary>
            /// <param name="about">The about (input) string for conversion to PropertyValue.
            ///
            /// </param>
            /// <param name="localePrefs">Localization prefrences.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_SettingModuleWithStringAbility_convertFromStringAbout> begin_convertFromStringAbout(string about, string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets PropertyValue form the "about" string.
            /// </summary>
            /// <param name="about">The about (input) string for conversion to PropertyValue.
            ///
            /// </param>
            /// <param name="localePrefs">Localization prefrences.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_convertFromStringAbout(string about, string[] localePrefs, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets PropertyValue form the "about" string.
            /// </summary>
            /// <param name="about">The about (input) string for conversion to PropertyValue.
            ///
            /// </param>
            /// <param name="localePrefs">Localization prefrences.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_convertFromStringAbout(string about, string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets PropertyValue form the "about" string.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            PropertyValue end_convertFromStringAbout(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleFactoryPrx : global::Ice.ObjectPrx
        {
            /// <summary>
            /// Creates new box module in this factory.
            /// Proxy of newly created box module is returned.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            BoxModulePrx createBoxModule(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Creates new box module in this factory.
            /// Proxy of newly created box module is returned.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<BoxModulePrx> createBoxModuleAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Creates new box module in this factory.
            /// Proxy of newly created box module is returned.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_createBoxModule> begin_createBoxModule(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Creates new box module in this factory.
            /// Proxy of newly created box module is returned.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_createBoxModule(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Creates new box module in this factory.
            /// Proxy of newly created box module is returned.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_createBoxModule(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Creates new box module in this factory.
            /// Proxy of newly created box module is returned.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            BoxModulePrx end_createBoxModule(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// If client will not call this in 30 minutes, destroy will be called
            /// automaticly
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            void refresh(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// If client will not call this in 30 minutes, destroy will be called
            /// automaticly
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task refreshAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// If client will not call this in 30 minutes, destroy will be called
            /// automaticly
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_refresh> begin_refresh(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// If client will not call this in 30 minutes, destroy will be called
            /// automaticly
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_refresh(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// If client will not call this in 30 minutes, destroy will be called
            /// automaticly
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_refresh(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// If client will not call this in 30 minutes, destroy will be called
            /// automaticly
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_refresh(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// If the factory is empty it will be destroyed and true will be returned;
            /// othervise, false is returned.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            bool destroyIfEmpty(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// If the factory is empty it will be destroyed and true will be returned;
            /// othervise, false is returned.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<bool> destroyIfEmptyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// If the factory is empty it will be destroyed and true will be returned;
            /// othervise, false is returned.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_destroyIfEmpty> begin_destroyIfEmpty(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// If the factory is empty it will be destroyed and true will be returned;
            /// othervise, false is returned.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_destroyIfEmpty(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// If the factory is empty it will be destroyed and true will be returned;
            /// othervise, false is returned.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_destroyIfEmpty(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// If the factory is empty it will be destroyed and true will be returned;
            /// othervise, false is returned.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            bool end_destroyIfEmpty(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Destroys the box module witch specified boxIdentity.
            /// </summary>
            /// <param name="boxIdentity">Identity of box module, which should be destroyed.</param>
            /// <param name="context">The Context map to send with the invocation.</param>

            void destroyBoxModule(string boxIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Destroys the box module witch specified boxIdentity.
            /// </summary>
            /// <param name="boxIdentity">Identity of box module, which should be destroyed.</param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task destroyBoxModuleAsync(string boxIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Destroys the box module witch specified boxIdentity.
            /// </summary>
            /// <param name="boxIdentity">Identity of box module, which should be destroyed.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_destroyBoxModule> begin_destroyBoxModule(string boxIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Destroys the box module witch specified boxIdentity.
            /// </summary>
            /// <param name="boxIdentity">Identity of box module, which should be destroyed.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_destroyBoxModule(string boxIdentity, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Destroys the box module witch specified boxIdentity.
            /// </summary>
            /// <param name="boxIdentity">Identity of box module, which should be destroyed.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_destroyBoxModule(string boxIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Destroys the box module witch specified boxIdentity.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_destroyBoxModule(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Destroys this box module factory and all it`s box modules.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Destroys this box module factory and all it`s box modules.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Destroys this box module factory and all it`s box modules.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Destroys this box module factory and all it`s box modules.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Destroys this box module factory and all it`s box modules.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Destroys this box module factory and all it`s box modules.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            void end_destroy(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets information about the sockets of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            SocketInfo[] getSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about the sockets of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<SocketInfo[]> getSocketsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets information about the sockets of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_getSockets> begin_getSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about the sockets of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getSockets(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about the sockets of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getSockets(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about the sockets of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            SocketInfo[] end_getSockets(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets information about the actions of the box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            ActionInfo[] getActions(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about the actions of the box module.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<ActionInfo[]> getActionsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets information about the actions of the box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_getActions> begin_getActions(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about the actions of the box module.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getActions(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about the actions of the box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getActions(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about the actions of the box module.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            ActionInfo[] end_getActions(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets information about the properties of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            PropertyInfo[] getProperties(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about the properties of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<PropertyInfo[]> getPropertiesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets information about the properties of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_getProperties> begin_getProperties(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about the properties of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getProperties(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about the properties of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getProperties(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about the properties of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            PropertyInfo[] end_getProperties(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets information about the help files of the box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            HelpFileInfo[] getHelpFileInfoSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about the help files of the box module.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<HelpFileInfo[]> getHelpFileInfoSeqAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets information about the help files of the box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_getHelpFileInfoSeq> begin_getHelpFileInfoSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets information about the help files of the box module.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHelpFileInfoSeq(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about the help files of the box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHelpFileInfoSeq(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets information about the help files of the box module.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            HelpFileInfo[] end_getHelpFileInfoSeq(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets proxy of factory creator of this box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            BoxModuleFactoryCreatorPrx getMyFactoryCreator(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets proxy of factory creator of this box module.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<BoxModuleFactoryCreatorPrx> getMyFactoryCreatorAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets proxy of factory creator of this box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactory_getMyFactoryCreator> begin_getMyFactoryCreator(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets proxy of factory creator of this box module.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getMyFactoryCreator(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets proxy of factory creator of this box module.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getMyFactoryCreator(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets proxy of factory creator of this box module.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            BoxModuleFactoryCreatorPrx end_getMyFactoryCreator(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleFactoryCreatorPrx : EntityPrx
        {
            /// <summary>
            /// Creates new factory for box modules.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager, to which this
            /// newly created factory belongs to.</param>
            /// <param name="context">The Context map to send with the invocation.</param>

            BoxModuleFactoryPrx createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Creates new factory for box modules.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager, to which this
            /// newly created factory belongs to.</param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<BoxModuleFactoryPrx> createBoxModuleFactoryAsync(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Creates new factory for box modules.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager, to which this
            /// newly created factory belongs to.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_createBoxModuleFactory> begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Creates new factory for box modules.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager, to which this
            /// newly created factory belongs to.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Creates new factory for box modules.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager, to which this
            /// newly created factory belongs to.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Creates new factory for box modules.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            BoxModuleFactoryPrx end_createBoxModuleFactory(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets identifier of BoxModule witch can be created by the
            /// BoxModuleFactory created by this BoxModuleFactoryCreator.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            string getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets identifier of BoxModule witch can be created by the
            /// BoxModuleFactory created by this BoxModuleFactoryCreator.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string> getIdentifierAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets identifier of BoxModule witch can be created by the
            /// BoxModuleFactory created by this BoxModuleFactoryCreator.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIdentifier> begin_getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets identifier of BoxModule witch can be created by the
            /// BoxModuleFactory created by this BoxModuleFactoryCreator.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getIdentifier(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets identifier of BoxModule witch can be created by the
            /// BoxModuleFactory created by this BoxModuleFactoryCreator.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getIdentifier(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets identifier of BoxModule witch can be created by the
            /// BoxModuleFactory created by this BoxModuleFactoryCreator.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string end_getIdentifier(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets ice_ids (array of strings) of functions provided
            /// by box module..
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            string[] getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets ice_ids (array of strings) of functions provided
            /// by box module..
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string[]> getBoxModuleFunctionsIceIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets ice_ids (array of strings) of functions provided
            /// by box module..
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds> begin_getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets ice_ids (array of strings) of functions provided
            /// by box module..
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getBoxModuleFunctionsIceIds(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets ice_ids (array of strings) of functions provided
            /// by box module..
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets ice_ids (array of strings) of functions provided
            /// by box module..
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string[] end_getBoxModuleFunctionsIceIds(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets names (not localized) of categories, whre the box
            /// module belongs to.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            string[] getBoxCategories(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets names (not localized) of categories, whre the box
            /// module belongs to.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string[]> getBoxCategoriesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets names (not localized) of categories, whre the box
            /// module belongs to.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategories> begin_getBoxCategories(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets names (not localized) of categories, whre the box
            /// module belongs to.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getBoxCategories(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets names (not localized) of categories, whre the box
            /// module belongs to.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getBoxCategories(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets names (not localized) of categories, whre the box
            /// module belongs to.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string[] end_getBoxCategories(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets localized name of given categoryName.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="categoryName">Name of the category.</param>
            /// <param name="context">The Context map to send with the invocation.</param>

            string[] getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets localized name of given categoryName.
            /// </summary>
            /// <param name="categoryName">Name of the category.</param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string[]> getBoxCategoryLocalizedNameAsync(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets localized name of given categoryName.
            /// </summary>
            /// <param name="categoryName">Name of the category.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName> begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets localized name of given categoryName.
            /// </summary>
            /// <param name="categoryName">Name of the category.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets localized name of given categoryName.
            /// </summary>
            /// <param name="categoryName">Name of the category.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets localized name of given categoryName.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string[] end_getBoxCategoryLocalizedName(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets localized box module`s hint i.
            /// e. short help.
            ///
            /// </summary>
            /// <param name="localePrefs">Localization preferences.</param>
            /// <param name="context">The Context map to send with the invocation.</param>

            string getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets localized box module`s hint i.
            /// e. short help.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.</param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string> getHintAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets localized box module`s hint i.
            /// e. short help.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHint> begin_getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets localized box module`s hint i.
            /// e. short help.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets localized box module`s hint i.
            /// e. short help.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets localized box module`s hint i.
            /// e. short help.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string end_getHint(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets box module`s help file as array of Bytes.
            /// </summary>
            /// <param name="identifier">Identifier of the help file.</param>
            /// <param name="context">The Context map to send with the invocation.</param>

            byte[] getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets box module`s help file as array of Bytes.
            /// </summary>
            /// <param name="identifier">Identifier of the help file.</param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<byte[]> getHelpFileAsync(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets box module`s help file as array of Bytes.
            /// </summary>
            /// <param name="identifier">Identifier of the help file.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHelpFile> begin_getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets box module`s help file as array of Bytes.
            /// </summary>
            /// <param name="identifier">Identifier of the help file.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets box module`s help file as array of Bytes.
            /// </summary>
            /// <param name="identifier">Identifier of the help file.</param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets box module`s help file as array of Bytes.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            byte[] end_getHelpFile(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets box module`s icon (*.ico) as array of Bytes.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            byte[] getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets box module`s icon (*.ico) as array of Bytes.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<byte[]> getIconAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets box module`s icon (*.ico) as array of Bytes.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIcon> begin_getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets box module`s icon (*.ico) as array of Bytes.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getIcon(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets box module`s icon (*.ico) as array of Bytes.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getIcon(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets box module`s icon (*.ico) as array of Bytes.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            byte[] end_getIcon(global::Ice.AsyncResult asyncResult);

            /// <summary>
            /// Gets box module`s design from SVG file as string.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>

            string getDesign(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets box module`s design from SVG file as string.
            /// </summary>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<string> getDesignAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Gets box module`s design from SVG file as string.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getDesign> begin_getDesign(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Gets box module`s design from SVG file as string.
            /// </summary>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getDesign(global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets box module`s design from SVG file as string.
            /// </summary>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_getDesign(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Gets box module`s design from SVG file as string.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            string end_getDesign(global::Ice.AsyncResult asyncResult);
        }

        /// <summary>
        /// PropertyBoxModule is simple BoxModule that is used for setting
        /// property value by BoxModule.
        /// This BoxModule has to have property with
        /// name "value".
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface PropertyBoxModuleFactoryCreatorPrx : BoxModuleFactoryCreatorPrx
        {
            string getPropertyClassIceId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string> getPropertyClassIceIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_PropertyBoxModuleFactoryCreator_getPropertyClassIceId> begin_getPropertyClassIceId(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getPropertyClassIceId(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getPropertyClassIceId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            string end_getPropertyClassIceId(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ProgressTaskPrx : global::Ice.ObjectPrx
        {
            float getValue(out string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<ProgressTask_GetValueResult> getValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ProgressTask_getValue> begin_getValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            float end_getValue(out string message, global::Ice.AsyncResult asyncResult);

            void stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task stopAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ProgressTask_stop> begin_stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_stop(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_stop(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_stop(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        /// <summary>
        /// Box module`s interface.
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleOperations_
        {
            /// <summary>
            /// Gets default user label e.
            /// g. if some box
            /// module`s property drives user label.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string[] getDefaultUserLabel(global::Ice.Current current = null);

            /// <summary>
            /// Dynamically returns box module`s sequence of help items.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            DynamicHelpItem[] getDynamicHelpItems(global::Ice.Current current = null);

            /// <summary>
            /// Executes action of specified name.
            /// Invocation of this method can be asynchronous.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void runAction(string actionName, global::Ice.Current current = null);

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            SocketInfo[] getAdditionalSockets(global::Ice.Current current = null);

            /// <summary>
            /// //TODO
            /// For lambda-like boxes
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            PropertyInfo[] getAdditionalProperties(global::Ice.Current current = null);

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="socketName">Name of the socket, where should be connected
            /// other otherModule.
            ///
            /// </param>
            /// <param name="otherModule">The proxy of other module, which should be
            /// connected to socket socketName.
            ///
            /// </param>
            /// <exception name="BadTypeError">This exception means bad type of functions.
            ///
            /// </exception>
            /// <exception name="NameNotExistError">Is thrown if socket with socketName does
            /// not exist in this BoxModule.
            ///
            /// </exception>
            /// <exception name="ConnectionExistsError">Is thrown if this connection alredy exists.</exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void setConnection(string socketName, BoxModulePrx otherModule, global::Ice.Current current = null);

            /// <summary>
            /// Gets all connection in the socket.
            /// </summary>
            /// <param name="socketName">Name of the socket.
            ///
            /// </param>
            /// <exception name="NameNotExistError">Is thrown if socket with socketName does
            /// not exist in this BoxModule.</exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModulePrx[] getConnections(string socketName, global::Ice.Current current = null);

            /// <summary>
            /// Removes connection with one BoxModule from socket.
            /// </summary>
            /// <param name="socketName">Name of socket from which to remove connection.
            ///
            /// </param>
            /// <param name="boxModuleIceIdentity">Ice identity of BoxModule which is
            /// connected to socket socketName and this connection is to be
            /// removed.
            ///
            /// </param>
            /// <exception name="NameNotExistError">Is thrown if socket with socketName does
            /// not exist in this BoxModule.
            ///
            /// </exception>
            /// <exception name="ConnectionNotExistError">Is thrown if BoxModule
            /// boxModuleIceIdentity is not connected to socket socketName.</exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.Current current = null);

            /// <summary>
            /// Creates connection with one BoxModule to socket.
            /// </summary>
            /// <param name="propertyName">Name of the property.
            ///
            /// </param>
            /// <param name="value">New value of the property.
            ///
            /// </param>
            /// <exception name="BadTypeError">This exception means bad data type of value.
            ///
            /// </exception>
            /// <exception name="NameNotExistError">Is thrown if property with propertyName does
            /// not exist in this BoxModule.
            ///
            /// </exception>
            /// <exception name="ReadOnlyError">Is thrown if this property is only for reading.
            ///
            /// </exception>
            /// <exception name="BadValueError">This exception means bad value e. g. it is out
            /// of restrictions or regular expression conditions.</exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void setProperty(string propertyName, PropertyValue value, global::Ice.Current current = null);

            /// <summary>
            /// Gets value of the property.
            /// Invocation of this method can be asynchronous.
            ///
            /// </summary>
            /// <exception name="NameNotExistError">Is thrown if property with propertyName does
            /// not exist in this BoxModule.</exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            PropertyValue getProperty(string propertyName, global::Ice.Current current = null);

            /// <summary>
            /// Used only for property of SelectOptT data type.
            /// </summary>
            /// <exception name="NameNotExistError">Is thrown if property with propertyName does
            /// not exist in this BoxModule.</exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            SelectString[] getPropertyOptions(string propertyName, global::Ice.Current current = null);

            /// <summary>
            /// Useful for property of OtherT type and it`s neededProperty
            /// checking
            /// </summary>
            /// <exception name="NameNotExistError">Is thrown if property with propertyName does
            /// not exist in this BoxModule.
            ///
            /// </exception>
            /// <returns>True if this property was set by SettingModule</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            bool isPropertySet(string propertyName, global::Ice.Current current = null);

            /// <summary>
            /// Gets sequence of possible modules asking for creation.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            ModulesAskingForCreation[] getModulesAskingForCreation(global::Ice.Current current = null);

            /// <summary>
            /// Returns ice_id of proxy which will be returned by getFunctions(),
            /// theoreticaly this can return something other than what returns
            /// BoxModuleFactoryCreator in function getBoxModuleFunctionsIceIds -
            /// specially lambda box module
            /// </summary>
            /// <returns>ice_id of proxy which will be returned by getFunctions
            ///
            /// </returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string[] getFunctionsIceIds(global::Ice.Current current = null);

            /// <summary>
            /// Throught lambda abstraction is BoxModule interface separated
            /// from functions over this BoxModule.
            /// Functions is module (object)
            /// implementing some interface defined in it`s slice design.
            /// Functions can works with properties and sockets of this BoxModule
            ///
            /// </summary>
            /// <returns>Functions object proxy.</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ice.ObjectPrx getFunctions(global::Ice.Current current = null);

            /// <summary>
            /// Gets proxy of factory of this box module.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModuleFactoryPrx getMyFactory(global::Ice.Current current = null);

            /// <summary>
            /// Validates box module (e.g.
            /// its settings).
            ///
            /// </summary>
            /// <exception name="BoxRuntimeError">Is thrown if some runtime error ocured.</exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void validate(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface EntityOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getLabel(string[] localePrefs, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ModuleForInteractionOperations_ : EntityOperations_
        {
            /// <summary>
            /// Gets conditions on box module`s socket, which has to be
            /// satisfied before the module for interaction can run.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string[] getNeededConnectedSockets(global::Ice.Current current = null);

            /// <summary>
            /// Gets array of box types, which can use this module for interaction.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxType[] getAcceptedBoxTypes(global::Ice.Current current = null);

            /// <summary>
            /// Gets localized hint (short help) for this module for interaction.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getHint(string[] localePrefs, global::Ice.Current current = null);

            /// <summary>
            /// Gets help file as aray of Bytes for this module for interaction.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            byte[] getHelpFile(string identifier, global::Ice.Current current = null);

            /// <summary>
            /// Gets information about help files for this module for interaction.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            HelpFileInfo[] getHelpFileInfoSeq(string[] localePrefs, global::Ice.Current current = null);

            /// <summary>
            /// Dynamically gets help item for this module for interaction.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            DynamicHelpItem[] getDynamicHelpItems(string[] localePrefs, global::Ice.Current current = null);

            /// <summary>
            /// Runs the module for interaction.
            /// </summary>
            /// <param name="boxModuleParam">Proxy of the box module, over which this
            /// module for interaction runs.
            ///
            /// </param>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager.
            ///
            /// </param>
            /// <exception name="BoxRuntimeError">If there is any hard ModuleForInteraction problem
            /// of running it, this exception will be raised. Raise this exception
            /// only if it is really needed, it is still error of application this
            /// exception!</exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.Current current = null);

            /// <summary>
            /// Gets icon (*.ico) as array of Bytes for this module for intraction.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            byte[] getIcon(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface SettingModuleOperations_ : EntityOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getIdentifier(global::Ice.Current current = null);

            /// <summary>
            /// Run this Module for setting property.
            /// </summary>
            /// <param name="valueBefore">Value of property (which this module set) before
            /// this action.
            ///
            /// </param>
            /// <param name="boxModuleParam">Over this Box Module SettingModule works.
            ///
            /// </param>
            /// <param name="about">String value which should be shown in property bar.
            ///
            /// </param>
            /// <returns>New value of property to be set.
            ///
            /// </returns>
            /// <exception name="CouldNotRunError">If there is any hard SettingModule problem
            /// of running it, this exception will be raised. Raise this exception
            /// only if it is really needed, it is still error of application this
            /// exception!
            ///
            /// </exception>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            PropertyValue run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, out string about, global::Ice.Current current = null);

            /// <summary>
            /// Gets "about" string from the PropertyValue.
            /// </summary>
            /// <param name="value">PropertyValue for generating the "about" string.
            ///
            /// </param>
            /// <returns>String, which describes specified
            /// PropertyValue as well as possible.</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getPropertyAbout(PropertyValue value, global::Ice.Current current = null);
        }

        /// <summary>
        /// This type of module is used if about string in property grid can be
        /// converted to "involved" type (set by SettingModule) and vice versa.
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface SettingModuleWithStringAbilityOperations_ : SettingModuleOperations_
        {
            /// <summary>
            /// Gets PropertyValue form the "about" string.
            /// </summary>
            /// <param name="about">The about (input) string for conversion to PropertyValue.
            ///
            /// </param>
            /// <param name="localePrefs">Localization prefrences.</param>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            PropertyValue convertFromStringAbout(string about, string[] localePrefs, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleFactoryOperations_
        {
            /// <summary>
            /// Creates new box module in this factory.
            /// Proxy of newly created box module is returned.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModulePrx createBoxModule(global::Ice.Current current = null);

            /// <summary>
            /// If client will not call this in 30 minutes, destroy will be called
            /// automaticly
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void refresh(global::Ice.Current current = null);

            /// <summary>
            /// If the factory is empty it will be destroyed and true will be returned;
            /// othervise, false is returned.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            bool destroyIfEmpty(global::Ice.Current current = null);

            /// <summary>
            /// Destroys the box module witch specified boxIdentity.
            /// </summary>
            /// <param name="boxIdentity">Identity of box module, which should be destroyed.</param>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void destroyBoxModule(string boxIdentity, global::Ice.Current current = null);

            /// <summary>
            /// Destroys this box module factory and all it`s box modules.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void destroy(global::Ice.Current current = null);

            /// <summary>
            /// Gets information about the sockets of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            SocketInfo[] getSockets(global::Ice.Current current = null);

            /// <summary>
            /// Gets information about the actions of the box module.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            ActionInfo[] getActions(global::Ice.Current current = null);

            /// <summary>
            /// Gets information about the properties of the box module.
            /// IMPORTANT: each property has to have equivalent socket.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            PropertyInfo[] getProperties(global::Ice.Current current = null);

            /// <summary>
            /// Gets information about the help files of the box module.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            HelpFileInfo[] getHelpFileInfoSeq(global::Ice.Current current = null);

            /// <summary>
            /// Gets proxy of factory creator of this box module.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModuleFactoryCreatorPrx getMyFactoryCreator(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleFactoryCreatorOperations_ : EntityOperations_
        {
            /// <summary>
            /// Creates new factory for box modules.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="manager">Proxy of modules manager, to which this
            /// newly created factory belongs to.</param>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModuleFactoryPrx createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.Current current = null);

            /// <summary>
            /// Gets identifier of BoxModule witch can be created by the
            /// BoxModuleFactory created by this BoxModuleFactoryCreator.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getIdentifier(global::Ice.Current current = null);

            /// <summary>
            /// Gets ice_ids (array of strings) of functions provided
            /// by box module..
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string[] getBoxModuleFunctionsIceIds(global::Ice.Current current = null);

            /// <summary>
            /// Gets names (not localized) of categories, whre the box
            /// module belongs to.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string[] getBoxCategories(global::Ice.Current current = null);

            /// <summary>
            /// Gets localized name of given categoryName.
            /// </summary>
            /// <param name="localePrefs">Localization preferences.
            ///
            /// </param>
            /// <param name="categoryName">Name of the category.</param>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string[] getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.Current current = null);

            /// <summary>
            /// Gets localized box module`s hint i.
            /// e. short help.
            ///
            /// </summary>
            /// <param name="localePrefs">Localization preferences.</param>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getHint(string[] localePrefs, global::Ice.Current current = null);

            /// <summary>
            /// Gets box module`s help file as array of Bytes.
            /// </summary>
            /// <param name="identifier">Identifier of the help file.</param>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            byte[] getHelpFile(string identifier, global::Ice.Current current = null);

            /// <summary>
            /// Gets box module`s icon (*.ico) as array of Bytes.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            byte[] getIcon(global::Ice.Current current = null);

            /// <summary>
            /// Gets box module`s design from SVG file as string.
            /// </summary>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getDesign(global::Ice.Current current = null);
        }

        /// <summary>
        /// PropertyBoxModule is simple BoxModule that is used for setting
        /// property value by BoxModule.
        /// This BoxModule has to have property with
        /// name "value".
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface PropertyBoxModuleFactoryCreatorOperations_ : BoxModuleFactoryCreatorOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getPropertyClassIceId(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ProgressTaskOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            float getValue(out string message, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void stop(global::Ice.Current current = null);
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ModulesConnectionSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, ModulesConnection[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new ModulesConnection() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static ModulesConnection[] read(global::Ice.InputStream istr)
            {
                ModulesConnection[] v;
                {
                    int szx = istr.readAndCheckSeqSize(3);
                    v = new ModulesConnection[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new ModulesConnection();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class PropertySettingSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, PropertySetting[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new PropertySetting() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static PropertySetting[] read(global::Ice.InputStream istr)
            {
                PropertySetting[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new PropertySetting[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new PropertySetting();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class PropertySettingSeqSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, PropertySetting[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        PropertySettingSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static PropertySetting[][] read(global::Ice.InputStream istr)
            {
                PropertySetting[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new PropertySetting[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = PropertySettingSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class HelpFileInfoSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, HelpFileInfo[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new HelpFileInfo() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static HelpFileInfo[] read(global::Ice.InputStream istr)
            {
                HelpFileInfo[] v;
                {
                    int szx = istr.readAndCheckSeqSize(6);
                    v = new HelpFileInfo[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new HelpFileInfo();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class DynamicHelpItemSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, DynamicHelpItem[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new DynamicHelpItem() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static DynamicHelpItem[] read(global::Ice.InputStream istr)
            {
                DynamicHelpItem[] v;
                {
                    int szx = istr.readAndCheckSeqSize(3);
                    v = new DynamicHelpItem[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new DynamicHelpItem();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class SelectStringSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, SelectString[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new SelectString() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static SelectString[] read(global::Ice.InputStream istr)
            {
                SelectString[] v;
                {
                    int szx = istr.readAndCheckSeqSize(3);
                    v = new SelectString[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new SelectString();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class SocketInfoSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, SocketInfo[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new SocketInfo() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static SocketInfo[] read(global::Ice.InputStream istr)
            {
                SocketInfo[] v;
                {
                    int szx = istr.readAndCheckSeqSize(7);
                    v = new SocketInfo[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new SocketInfo();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ActionInfoSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, ActionInfo[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new ActionInfo() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static ActionInfo[] read(global::Ice.InputStream istr)
            {
                ActionInfo[] v;
                {
                    int szx = istr.readAndCheckSeqSize(5);
                    v = new ActionInfo[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new ActionInfo();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class RestrictionSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, Restriction[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new Restriction() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static Restriction[] read(global::Ice.InputStream istr)
            {
                Restriction[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new Restriction[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new Restriction();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class PropertyInfoSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, PropertyInfo[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new PropertyInfo() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static PropertyInfo[] read(global::Ice.InputStream istr)
            {
                PropertyInfo[] v;
                {
                    int szx = istr.readAndCheckSeqSize(9);
                    v = new PropertyInfo[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new PropertyInfo();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ModuleAskingForCreationSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, ModuleAskingForCreation[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new ModuleAskingForCreation() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static ModuleAskingForCreation[] read(global::Ice.InputStream istr)
            {
                ModuleAskingForCreation[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new ModuleAskingForCreation[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new ModuleAskingForCreation();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ModulesAskingForCreationSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, ModulesAskingForCreation[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new ModulesAskingForCreation() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static ModulesAskingForCreation[] read(global::Ice.InputStream istr)
            {
                ModulesAskingForCreation[] v;
                {
                    int szx = istr.readAndCheckSeqSize(4);
                    v = new ModulesAskingForCreation[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new ModulesAskingForCreation();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class BoxModulePrxSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, BoxModulePrx[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        BoxModulePrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static BoxModulePrx[] read(global::Ice.InputStream istr)
            {
                BoxModulePrx[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new BoxModulePrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = BoxModulePrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BoxModulePrxHelper : global::Ice.ObjectPrxHelperBase, BoxModulePrx
        {
            public BoxModulePrxHelper()
            {
            }

            public BoxModulePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string[] getDefaultUserLabel(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDefaultUserLabelAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public DynamicHelpItem[] getDynamicHelpItems(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDynamicHelpItemsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void runAction(string actionName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_runActionAsync(actionName, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public SocketInfo[] getAdditionalSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getAdditionalSocketsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public PropertyInfo[] getAdditionalProperties(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getAdditionalPropertiesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void setConnection(string socketName, BoxModulePrx otherModule, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setConnectionAsync(socketName, otherModule, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModulePrx[] getConnections(string socketName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getConnectionsAsync(socketName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_removeConnectionAsync(socketName, boxModuleIceIdentity, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void setProperty(string propertyName, PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setPropertyAsync(propertyName, value, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public PropertyValue getProperty(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getPropertyAsync(propertyName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public SelectString[] getPropertyOptions(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getPropertyOptionsAsync(propertyName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool isPropertySet(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_isPropertySetAsync(propertyName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public ModulesAskingForCreation[] getModulesAskingForCreation(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getModulesAskingForCreationAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] getFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getFunctionsIceIdsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.ObjectPrx getFunctions(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getFunctionsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModuleFactoryPrx getMyFactory(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getMyFactoryAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void validate(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_validateAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string[]> getDefaultUserLabelAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDefaultUserLabelAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getDefaultUserLabelAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDefaultUserLabel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getDefaultUserLabel(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDefaultUserLabel_name = "getDefaultUserLabel";

            private void _iceI_getDefaultUserLabel(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getDefaultUserLabel_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringOptHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<DynamicHelpItem[]> getDynamicHelpItemsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDynamicHelpItemsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<DynamicHelpItem[]> _iceI_getDynamicHelpItemsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDynamicHelpItems_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<DynamicHelpItem[]>(progress, cancel);
                _iceI_getDynamicHelpItems(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDynamicHelpItems_name = "getDynamicHelpItems";

            private void _iceI_getDynamicHelpItems(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<DynamicHelpItem[]>(completed);
                outAsync.invoke(
                    _getDynamicHelpItems_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        DynamicHelpItem[] ret;
                        ret = DynamicHelpItemSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task runActionAsync(string actionName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_runActionAsync(actionName, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_runActionAsync(string iceP_actionName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_runAction_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_runAction(iceP_actionName, context, synchronous, completed);
                return completed.Task;
            }

            private const string _runAction_name = "runAction";

            private void _iceI_runAction(string iceP_actionName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _runAction_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_actionName);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BadParamsError)
                        {
                            throw;
                        }
                        catch(BoxRuntimeError)
                        {
                            throw;
                        }
                        catch(NameNotExistError)
                        {
                            throw;
                        }
                        catch(NeedConnectedSocketError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<SocketInfo[]> getAdditionalSocketsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getAdditionalSocketsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<SocketInfo[]> _iceI_getAdditionalSocketsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getAdditionalSockets_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<SocketInfo[]>(progress, cancel);
                _iceI_getAdditionalSockets(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getAdditionalSockets_name = "getAdditionalSockets";

            private void _iceI_getAdditionalSockets(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<SocketInfo[]>(completed);
                outAsync.invoke(
                    _getAdditionalSockets_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        SocketInfo[] ret;
                        ret = SocketInfoSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<PropertyInfo[]> getAdditionalPropertiesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getAdditionalPropertiesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<PropertyInfo[]> _iceI_getAdditionalPropertiesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getAdditionalProperties_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<PropertyInfo[]>(progress, cancel);
                _iceI_getAdditionalProperties(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getAdditionalProperties_name = "getAdditionalProperties";

            private void _iceI_getAdditionalProperties(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<PropertyInfo[]>(completed);
                outAsync.invoke(
                    _getAdditionalProperties_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        PropertyInfo[] ret;
                        ret = PropertyInfoSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task setConnectionAsync(string socketName, BoxModulePrx otherModule, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setConnectionAsync(socketName, otherModule, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setConnectionAsync(string iceP_socketName, BoxModulePrx iceP_otherModule, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_setConnection_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setConnection(iceP_socketName, iceP_otherModule, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setConnection_name = "setConnection";

            private void _iceI_setConnection(string iceP_socketName, BoxModulePrx iceP_otherModule, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setConnection_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_socketName);
                        BoxModulePrxHelper.write(ostr, iceP_otherModule);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BadTypeError)
                        {
                            throw;
                        }
                        catch(ConnectionExistsError)
                        {
                            throw;
                        }
                        catch(NameNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModulePrx[]> getConnectionsAsync(string socketName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getConnectionsAsync(socketName, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModulePrx[]> _iceI_getConnectionsAsync(string iceP_socketName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getConnections_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModulePrx[]>(progress, cancel);
                _iceI_getConnections(iceP_socketName, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getConnections_name = "getConnections";

            private void _iceI_getConnections(string iceP_socketName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModulePrx[]>(completed);
                outAsync.invoke(
                    _getConnections_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_socketName);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(NameNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModulePrx[] ret;
                        ret = BoxModulePrxSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task removeConnectionAsync(string socketName, string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_removeConnectionAsync(socketName, boxModuleIceIdentity, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_removeConnectionAsync(string iceP_socketName, string iceP_boxModuleIceIdentity, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_removeConnection_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_removeConnection(iceP_socketName, iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed.Task;
            }

            private const string _removeConnection_name = "removeConnection";

            private void _iceI_removeConnection(string iceP_socketName, string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _removeConnection_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_socketName);
                        ostr.writeString(iceP_boxModuleIceIdentity);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(ConnectionNotExistError)
                        {
                            throw;
                        }
                        catch(NameNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task setPropertyAsync(string propertyName, PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setPropertyAsync(propertyName, value, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setPropertyAsync(string iceP_propertyName, PropertyValue iceP_value, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_setProperty_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setProperty(iceP_propertyName, iceP_value, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setProperty_name = "setProperty";

            private void _iceI_setProperty(string iceP_propertyName, PropertyValue iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setProperty_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_propertyName);
                        ostr.writeValue(iceP_value);
                        ostr.writePendingValues();
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BadTypeError)
                        {
                            throw;
                        }
                        catch(BadValueError)
                        {
                            throw;
                        }
                        catch(NameNotExistError)
                        {
                            throw;
                        }
                        catch(ReadOnlyError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<PropertyValue> getPropertyAsync(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getPropertyAsync(propertyName, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<PropertyValue> _iceI_getPropertyAsync(string iceP_propertyName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getProperty_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<PropertyValue>(progress, cancel);
                _iceI_getProperty(iceP_propertyName, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getProperty_name = "getProperty";

            private void _iceI_getProperty(string iceP_propertyName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<PropertyValue>(completed);
                outAsync.invoke(
                    _getProperty_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_propertyName);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(NameNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        PropertyValue ret = null;
                        istr.readValue((PropertyValue v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<SelectString[]> getPropertyOptionsAsync(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getPropertyOptionsAsync(propertyName, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<SelectString[]> _iceI_getPropertyOptionsAsync(string iceP_propertyName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getPropertyOptions_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<SelectString[]>(progress, cancel);
                _iceI_getPropertyOptions(iceP_propertyName, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getPropertyOptions_name = "getPropertyOptions";

            private void _iceI_getPropertyOptions(string iceP_propertyName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<SelectString[]>(completed);
                outAsync.invoke(
                    _getPropertyOptions_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_propertyName);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(NameNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        SelectString[] ret;
                        ret = SelectStringSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool> isPropertySetAsync(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_isPropertySetAsync(propertyName, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_isPropertySetAsync(string iceP_propertyName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_isPropertySet_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_isPropertySet(iceP_propertyName, context, synchronous, completed);
                return completed.Task;
            }

            private const string _isPropertySet_name = "isPropertySet";

            private void _iceI_isPropertySet(string iceP_propertyName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _isPropertySet_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_propertyName);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(NameNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<ModulesAskingForCreation[]> getModulesAskingForCreationAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getModulesAskingForCreationAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ModulesAskingForCreation[]> _iceI_getModulesAskingForCreationAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getModulesAskingForCreation_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<ModulesAskingForCreation[]>(progress, cancel);
                _iceI_getModulesAskingForCreation(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getModulesAskingForCreation_name = "getModulesAskingForCreation";

            private void _iceI_getModulesAskingForCreation(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ModulesAskingForCreation[]>(completed);
                outAsync.invoke(
                    _getModulesAskingForCreation_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        ModulesAskingForCreation[] ret;
                        ret = ModulesAskingForCreationSeqHelper.read(istr);
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getFunctionsIceIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getFunctionsIceIdsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getFunctionsIceIdsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getFunctionsIceIds_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getFunctionsIceIds(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getFunctionsIceIds_name = "getFunctionsIceIds";

            private void _iceI_getFunctionsIceIds(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getFunctionsIceIds_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> getFunctionsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getFunctionsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_getFunctionsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getFunctions_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
                _iceI_getFunctions(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getFunctions_name = "getFunctions";

            private void _iceI_getFunctions(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
                outAsync.invoke(
                    _getFunctions_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.ObjectPrx ret;
                        ret = istr.readProxy();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModuleFactoryPrx> getMyFactoryAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getMyFactoryAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModuleFactoryPrx> _iceI_getMyFactoryAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getMyFactory_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModuleFactoryPrx>(progress, cancel);
                _iceI_getMyFactory(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getMyFactory_name = "getMyFactory";

            private void _iceI_getMyFactory(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModuleFactoryPrx>(completed);
                outAsync.invoke(
                    _getMyFactory_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModuleFactoryPrx ret;
                        ret = BoxModuleFactoryPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task validateAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_validateAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_validateAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_validate_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_validate(context, synchronous, completed);
                return completed.Task;
            }

            private const string _validate_name = "validate";

            private void _iceI_validate(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _validate_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxRuntimeError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_BoxModule_getDefaultUserLabel> begin_getDefaultUserLabel(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDefaultUserLabel(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDefaultUserLabel(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDefaultUserLabel(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDefaultUserLabel(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDefaultUserLabel(context, callback, cookie, false);
            }

            public string[] end_getDefaultUserLabel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDefaultUserLabel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getDefaultUserLabel> begin_getDefaultUserLabel(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDefaultUserLabel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getDefaultUserLabel, string[]>(
                    (Callback_BoxModule_getDefaultUserLabel cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDefaultUserLabel_name, cookie, completedCallback);
                _iceI_getDefaultUserLabel(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getDynamicHelpItems> begin_getDynamicHelpItems(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDynamicHelpItems(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDynamicHelpItems(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDynamicHelpItems(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDynamicHelpItems(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDynamicHelpItems(context, callback, cookie, false);
            }

            public DynamicHelpItem[] end_getDynamicHelpItems(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDynamicHelpItems_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<DynamicHelpItem[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getDynamicHelpItems> begin_getDynamicHelpItems(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDynamicHelpItems_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getDynamicHelpItems, DynamicHelpItem[]>(
                    (Callback_BoxModule_getDynamicHelpItems cb, DynamicHelpItem[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDynamicHelpItems_name, cookie, completedCallback);
                _iceI_getDynamicHelpItems(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_runAction> begin_runAction(string actionName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_runAction(actionName, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_runAction(string actionName, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_runAction(actionName, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_runAction(string actionName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_runAction(actionName, context, callback, cookie, false);
            }

            public void end_runAction(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _runAction_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_runAction> begin_runAction(string iceP_actionName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_runAction_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_runAction, object>(
                    (Callback_BoxModule_runAction cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _runAction_name, cookie, completedCallback);
                _iceI_runAction(iceP_actionName, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getAdditionalSockets> begin_getAdditionalSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getAdditionalSockets(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getAdditionalSockets(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getAdditionalSockets(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getAdditionalSockets(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getAdditionalSockets(context, callback, cookie, false);
            }

            public SocketInfo[] end_getAdditionalSockets(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAdditionalSockets_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<SocketInfo[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getAdditionalSockets> begin_getAdditionalSockets(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getAdditionalSockets_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getAdditionalSockets, SocketInfo[]>(
                    (Callback_BoxModule_getAdditionalSockets cb, SocketInfo[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getAdditionalSockets_name, cookie, completedCallback);
                _iceI_getAdditionalSockets(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getAdditionalProperties> begin_getAdditionalProperties(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getAdditionalProperties(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getAdditionalProperties(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getAdditionalProperties(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getAdditionalProperties(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getAdditionalProperties(context, callback, cookie, false);
            }

            public PropertyInfo[] end_getAdditionalProperties(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAdditionalProperties_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<PropertyInfo[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getAdditionalProperties> begin_getAdditionalProperties(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getAdditionalProperties_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getAdditionalProperties, PropertyInfo[]>(
                    (Callback_BoxModule_getAdditionalProperties cb, PropertyInfo[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getAdditionalProperties_name, cookie, completedCallback);
                _iceI_getAdditionalProperties(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_setConnection> begin_setConnection(string socketName, BoxModulePrx otherModule, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setConnection(socketName, otherModule, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setConnection(string socketName, BoxModulePrx otherModule, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setConnection(socketName, otherModule, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setConnection(string socketName, BoxModulePrx otherModule, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setConnection(socketName, otherModule, context, callback, cookie, false);
            }

            public void end_setConnection(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setConnection_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_setConnection> begin_setConnection(string iceP_socketName, BoxModulePrx iceP_otherModule, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_setConnection_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_setConnection, object>(
                    (Callback_BoxModule_setConnection cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _setConnection_name, cookie, completedCallback);
                _iceI_setConnection(iceP_socketName, iceP_otherModule, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getConnections> begin_getConnections(string socketName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getConnections(socketName, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getConnections(string socketName, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getConnections(socketName, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getConnections(string socketName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getConnections(socketName, context, callback, cookie, false);
            }

            public BoxModulePrx[] end_getConnections(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getConnections_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModulePrx[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getConnections> begin_getConnections(string iceP_socketName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getConnections_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getConnections, BoxModulePrx[]>(
                    (Callback_BoxModule_getConnections cb, BoxModulePrx[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getConnections_name, cookie, completedCallback);
                _iceI_getConnections(iceP_socketName, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_removeConnection> begin_removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_removeConnection(socketName, boxModuleIceIdentity, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_removeConnection(socketName, boxModuleIceIdentity, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_removeConnection(socketName, boxModuleIceIdentity, context, callback, cookie, false);
            }

            public void end_removeConnection(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeConnection_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_removeConnection> begin_removeConnection(string iceP_socketName, string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_removeConnection_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_removeConnection, object>(
                    (Callback_BoxModule_removeConnection cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _removeConnection_name, cookie, completedCallback);
                _iceI_removeConnection(iceP_socketName, iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_setProperty> begin_setProperty(string propertyName, PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setProperty(propertyName, value, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setProperty(string propertyName, PropertyValue value, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setProperty(propertyName, value, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setProperty(string propertyName, PropertyValue value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setProperty(propertyName, value, context, callback, cookie, false);
            }

            public void end_setProperty(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setProperty_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_setProperty> begin_setProperty(string iceP_propertyName, PropertyValue iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_setProperty_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_setProperty, object>(
                    (Callback_BoxModule_setProperty cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _setProperty_name, cookie, completedCallback);
                _iceI_setProperty(iceP_propertyName, iceP_value, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getProperty> begin_getProperty(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getProperty(propertyName, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getProperty(string propertyName, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProperty(propertyName, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getProperty(string propertyName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProperty(propertyName, context, callback, cookie, false);
            }

            public PropertyValue end_getProperty(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getProperty_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<PropertyValue>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getProperty> begin_getProperty(string iceP_propertyName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getProperty_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getProperty, PropertyValue>(
                    (Callback_BoxModule_getProperty cb, PropertyValue ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getProperty_name, cookie, completedCallback);
                _iceI_getProperty(iceP_propertyName, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getPropertyOptions> begin_getPropertyOptions(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getPropertyOptions(propertyName, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getPropertyOptions(string propertyName, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPropertyOptions(propertyName, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getPropertyOptions(string propertyName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPropertyOptions(propertyName, context, callback, cookie, false);
            }

            public SelectString[] end_getPropertyOptions(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getPropertyOptions_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<SelectString[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getPropertyOptions> begin_getPropertyOptions(string iceP_propertyName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getPropertyOptions_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getPropertyOptions, SelectString[]>(
                    (Callback_BoxModule_getPropertyOptions cb, SelectString[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getPropertyOptions_name, cookie, completedCallback);
                _iceI_getPropertyOptions(iceP_propertyName, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_isPropertySet> begin_isPropertySet(string propertyName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_isPropertySet(propertyName, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_isPropertySet(string propertyName, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_isPropertySet(propertyName, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_isPropertySet(string propertyName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_isPropertySet(propertyName, context, callback, cookie, false);
            }

            public bool end_isPropertySet(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _isPropertySet_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_isPropertySet> begin_isPropertySet(string iceP_propertyName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_isPropertySet_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_isPropertySet, bool>(
                    (Callback_BoxModule_isPropertySet cb, bool ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _isPropertySet_name, cookie, completedCallback);
                _iceI_isPropertySet(iceP_propertyName, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getModulesAskingForCreation> begin_getModulesAskingForCreation(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getModulesAskingForCreation(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getModulesAskingForCreation(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getModulesAskingForCreation(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getModulesAskingForCreation(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getModulesAskingForCreation(context, callback, cookie, false);
            }

            public ModulesAskingForCreation[] end_getModulesAskingForCreation(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getModulesAskingForCreation_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<ModulesAskingForCreation[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getModulesAskingForCreation> begin_getModulesAskingForCreation(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getModulesAskingForCreation_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getModulesAskingForCreation, ModulesAskingForCreation[]>(
                    (Callback_BoxModule_getModulesAskingForCreation cb, ModulesAskingForCreation[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getModulesAskingForCreation_name, cookie, completedCallback);
                _iceI_getModulesAskingForCreation(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getFunctionsIceIds> begin_getFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getFunctionsIceIds(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getFunctionsIceIds(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFunctionsIceIds(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getFunctionsIceIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFunctionsIceIds(context, callback, cookie, false);
            }

            public string[] end_getFunctionsIceIds(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getFunctionsIceIds_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getFunctionsIceIds> begin_getFunctionsIceIds(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getFunctionsIceIds_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getFunctionsIceIds, string[]>(
                    (Callback_BoxModule_getFunctionsIceIds cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getFunctionsIceIds_name, cookie, completedCallback);
                _iceI_getFunctionsIceIds(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getFunctions> begin_getFunctions(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getFunctions(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getFunctions(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFunctions(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getFunctions(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFunctions(context, callback, cookie, false);
            }

            public global::Ice.ObjectPrx end_getFunctions(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getFunctions_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getFunctions> begin_getFunctions(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getFunctions_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getFunctions, global::Ice.ObjectPrx>(
                    (Callback_BoxModule_getFunctions cb, global::Ice.ObjectPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getFunctions_name, cookie, completedCallback);
                _iceI_getFunctions(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_getMyFactory> begin_getMyFactory(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getMyFactory(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getMyFactory(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getMyFactory(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getMyFactory(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getMyFactory(context, callback, cookie, false);
            }

            public BoxModuleFactoryPrx end_getMyFactory(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getMyFactory_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModuleFactoryPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_getMyFactory> begin_getMyFactory(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getMyFactory_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_getMyFactory, BoxModuleFactoryPrx>(
                    (Callback_BoxModule_getMyFactory cb, BoxModuleFactoryPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getMyFactory_name, cookie, completedCallback);
                _iceI_getMyFactory(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModule_validate> begin_validate(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_validate(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_validate(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_validate(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_validate(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_validate(context, callback, cookie, false);
            }

            public void end_validate(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _validate_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModule_validate> begin_validate(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_validate_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModule_validate, object>(
                    (Callback_BoxModule_validate cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _validate_name, cookie, completedCallback);
                _iceI_validate(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BoxModulePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModulePrx r = b as BoxModulePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BoxModulePrxHelper h = new BoxModulePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModulePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModulePrx r = b as BoxModulePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BoxModulePrxHelper h = new BoxModulePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModulePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BoxModulePrxHelper h = new BoxModulePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModulePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BoxModulePrxHelper h = new BoxModulePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModulePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModulePrx r = b as BoxModulePrx;
                if(r == null)
                {
                    BoxModulePrxHelper h = new BoxModulePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModulePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BoxModulePrxHelper h = new BoxModulePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoxModule",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BoxModulePrx v)
            {
                ostr.writeProxy(v);
            }

            public static BoxModulePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BoxModulePrxHelper result = new BoxModulePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class EntityPrxHelper : global::Ice.ObjectPrxHelperBase, EntityPrx
        {
            public EntityPrxHelper()
            {
            }

            public EntityPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLabelAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLabel_name = "getLabel";

            private void _iceI_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getLabel_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLabel(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, context, callback, cookie, false);
            }

            public string end_getLabel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLabel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Entity_getLabel, string>(
                    (Callback_Entity_getLabel cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLabel_name, cookie, completedCallback);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static EntityPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                EntityPrx r = b as EntityPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    EntityPrxHelper h = new EntityPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static EntityPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                EntityPrx r = b as EntityPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    EntityPrxHelper h = new EntityPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static EntityPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        EntityPrxHelper h = new EntityPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static EntityPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        EntityPrxHelper h = new EntityPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static EntityPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                EntityPrx r = b as EntityPrx;
                if(r == null)
                {
                    EntityPrxHelper h = new EntityPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static EntityPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                EntityPrxHelper h = new EntityPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::Entity",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, EntityPrx v)
            {
                ostr.writeProxy(v);
            }

            public static EntityPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    EntityPrxHelper result = new EntityPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class ModuleForInteractionPrxHelper : global::Ice.ObjectPrxHelperBase, ModuleForInteractionPrx
        {
            public ModuleForInteractionPrxHelper()
            {
            }

            public ModuleForInteractionPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] getNeededConnectedSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getNeededConnectedSocketsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxType[] getAcceptedBoxTypes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getAcceptedBoxTypesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getHintAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getHelpFileAsync(identifier, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public HelpFileInfo[] getHelpFileInfoSeq(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getHelpFileInfoSeqAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public DynamicHelpItem[] getDynamicHelpItems(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDynamicHelpItemsAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_runAsync(boxModuleParam, localePrefs, manager, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIconAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLabelAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLabel_name = "getLabel";

            private void _iceI_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getLabel_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getNeededConnectedSocketsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getNeededConnectedSocketsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getNeededConnectedSocketsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getNeededConnectedSockets_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getNeededConnectedSockets(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getNeededConnectedSockets_name = "getNeededConnectedSockets";

            private void _iceI_getNeededConnectedSockets(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getNeededConnectedSockets_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxType[]> getAcceptedBoxTypesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getAcceptedBoxTypesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxType[]> _iceI_getAcceptedBoxTypesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getAcceptedBoxTypes_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxType[]>(progress, cancel);
                _iceI_getAcceptedBoxTypes(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getAcceptedBoxTypes_name = "getAcceptedBoxTypes";

            private void _iceI_getAcceptedBoxTypes(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxType[]>(completed);
                outAsync.invoke(
                    _getAcceptedBoxTypes_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxType[] ret;
                        ret = BoxTypeSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getHintAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getHintAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getHintAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHint_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getHint(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHint_name = "getHint";

            private void _iceI_getHint(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getHint_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> getHelpFileAsync(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getHelpFileAsync(identifier, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_getHelpFileAsync(string iceP_identifier, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHelpFile_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_getHelpFile(iceP_identifier, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHelpFile_name = "getHelpFile";

            private void _iceI_getHelpFile(string iceP_identifier, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _getHelpFile_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_identifier);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = ByteSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<HelpFileInfo[]> getHelpFileInfoSeqAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getHelpFileInfoSeqAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<HelpFileInfo[]> _iceI_getHelpFileInfoSeqAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHelpFileInfoSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<HelpFileInfo[]>(progress, cancel);
                _iceI_getHelpFileInfoSeq(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHelpFileInfoSeq_name = "getHelpFileInfoSeq";

            private void _iceI_getHelpFileInfoSeq(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<HelpFileInfo[]>(completed);
                outAsync.invoke(
                    _getHelpFileInfoSeq_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        HelpFileInfo[] ret;
                        ret = HelpFileInfoSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<DynamicHelpItem[]> getDynamicHelpItemsAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDynamicHelpItemsAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<DynamicHelpItem[]> _iceI_getDynamicHelpItemsAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDynamicHelpItems_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<DynamicHelpItem[]>(progress, cancel);
                _iceI_getDynamicHelpItems(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDynamicHelpItems_name = "getDynamicHelpItems";

            private void _iceI_getDynamicHelpItems(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<DynamicHelpItem[]>(completed);
                outAsync.invoke(
                    _getDynamicHelpItems_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        DynamicHelpItem[] ret;
                        ret = DynamicHelpItemSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task runAsync(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_runAsync(boxModuleParam, localePrefs, manager, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_runAsync(BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_run_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_run(iceP_boxModuleParam, iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed.Task;
            }

            private const string _run_name = "run";

            private void _iceI_run(BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _run_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        BoxModulePrxHelper.write(ostr, iceP_boxModuleParam);
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                        global::Ferda.ModulesManager.ManagersEnginePrxHelper.write(ostr, iceP_manager);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxRuntimeError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> getIconAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIconAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_getIconAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIcon_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_getIcon(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIcon_name = "getIcon";

            private void _iceI_getIcon(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _getIcon_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = ByteSeqHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLabel(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, context, callback, cookie, false);
            }

            public string end_getLabel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLabel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Entity_getLabel, string>(
                    (Callback_Entity_getLabel cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLabel_name, cookie, completedCallback);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ModuleForInteraction_getNeededConnectedSockets> begin_getNeededConnectedSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getNeededConnectedSockets(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getNeededConnectedSockets(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getNeededConnectedSockets(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getNeededConnectedSockets(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getNeededConnectedSockets(context, callback, cookie, false);
            }

            public string[] end_getNeededConnectedSockets(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getNeededConnectedSockets_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ModuleForInteraction_getNeededConnectedSockets> begin_getNeededConnectedSockets(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getNeededConnectedSockets_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ModuleForInteraction_getNeededConnectedSockets, string[]>(
                    (Callback_ModuleForInteraction_getNeededConnectedSockets cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getNeededConnectedSockets_name, cookie, completedCallback);
                _iceI_getNeededConnectedSockets(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ModuleForInteraction_getAcceptedBoxTypes> begin_getAcceptedBoxTypes(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getAcceptedBoxTypes(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getAcceptedBoxTypes(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getAcceptedBoxTypes(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getAcceptedBoxTypes(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getAcceptedBoxTypes(context, callback, cookie, false);
            }

            public BoxType[] end_getAcceptedBoxTypes(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getAcceptedBoxTypes_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxType[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ModuleForInteraction_getAcceptedBoxTypes> begin_getAcceptedBoxTypes(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getAcceptedBoxTypes_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ModuleForInteraction_getAcceptedBoxTypes, BoxType[]>(
                    (Callback_ModuleForInteraction_getAcceptedBoxTypes cb, BoxType[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getAcceptedBoxTypes_name, cookie, completedCallback);
                _iceI_getAcceptedBoxTypes(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ModuleForInteraction_getHint> begin_getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getHint(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHint(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHint(localePrefs, context, callback, cookie, false);
            }

            public string end_getHint(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHint_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ModuleForInteraction_getHint> begin_getHint(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getHint_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ModuleForInteraction_getHint, string>(
                    (Callback_ModuleForInteraction_getHint cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getHint_name, cookie, completedCallback);
                _iceI_getHint(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ModuleForInteraction_getHelpFile> begin_getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getHelpFile(identifier, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFile(identifier, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFile(identifier, context, callback, cookie, false);
            }

            public byte[] end_getHelpFile(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHelpFile_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ModuleForInteraction_getHelpFile> begin_getHelpFile(string iceP_identifier, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getHelpFile_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ModuleForInteraction_getHelpFile, byte[]>(
                    (Callback_ModuleForInteraction_getHelpFile cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getHelpFile_name, cookie, completedCallback);
                _iceI_getHelpFile(iceP_identifier, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ModuleForInteraction_getHelpFileInfoSeq> begin_getHelpFileInfoSeq(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getHelpFileInfoSeq(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getHelpFileInfoSeq(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFileInfoSeq(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getHelpFileInfoSeq(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFileInfoSeq(localePrefs, context, callback, cookie, false);
            }

            public HelpFileInfo[] end_getHelpFileInfoSeq(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHelpFileInfoSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<HelpFileInfo[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ModuleForInteraction_getHelpFileInfoSeq> begin_getHelpFileInfoSeq(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getHelpFileInfoSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ModuleForInteraction_getHelpFileInfoSeq, HelpFileInfo[]>(
                    (Callback_ModuleForInteraction_getHelpFileInfoSeq cb, HelpFileInfo[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getHelpFileInfoSeq_name, cookie, completedCallback);
                _iceI_getHelpFileInfoSeq(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ModuleForInteraction_getDynamicHelpItems> begin_getDynamicHelpItems(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDynamicHelpItems(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDynamicHelpItems(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDynamicHelpItems(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDynamicHelpItems(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDynamicHelpItems(localePrefs, context, callback, cookie, false);
            }

            public DynamicHelpItem[] end_getDynamicHelpItems(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDynamicHelpItems_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<DynamicHelpItem[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ModuleForInteraction_getDynamicHelpItems> begin_getDynamicHelpItems(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDynamicHelpItems_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ModuleForInteraction_getDynamicHelpItems, DynamicHelpItem[]>(
                    (Callback_ModuleForInteraction_getDynamicHelpItems cb, DynamicHelpItem[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDynamicHelpItems_name, cookie, completedCallback);
                _iceI_getDynamicHelpItems(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ModuleForInteraction_run> begin_run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_run(boxModuleParam, localePrefs, manager, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_run(boxModuleParam, localePrefs, manager, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_run(boxModuleParam, localePrefs, manager, context, callback, cookie, false);
            }

            public void end_run(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _run_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ModuleForInteraction_run> begin_run(BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_run_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ModuleForInteraction_run, object>(
                    (Callback_ModuleForInteraction_run cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _run_name, cookie, completedCallback);
                _iceI_run(iceP_boxModuleParam, iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ModuleForInteraction_getIcon> begin_getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIcon(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIcon(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIcon(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIcon(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIcon(context, callback, cookie, false);
            }

            public byte[] end_getIcon(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIcon_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ModuleForInteraction_getIcon> begin_getIcon(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIcon_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ModuleForInteraction_getIcon, byte[]>(
                    (Callback_ModuleForInteraction_getIcon cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIcon_name, cookie, completedCallback);
                _iceI_getIcon(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ModuleForInteractionPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ModuleForInteractionPrx r = b as ModuleForInteractionPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ModuleForInteractionPrxHelper h = new ModuleForInteractionPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ModuleForInteractionPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ModuleForInteractionPrx r = b as ModuleForInteractionPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ModuleForInteractionPrxHelper h = new ModuleForInteractionPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ModuleForInteractionPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ModuleForInteractionPrxHelper h = new ModuleForInteractionPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ModuleForInteractionPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ModuleForInteractionPrxHelper h = new ModuleForInteractionPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ModuleForInteractionPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ModuleForInteractionPrx r = b as ModuleForInteractionPrx;
                if(r == null)
                {
                    ModuleForInteractionPrxHelper h = new ModuleForInteractionPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ModuleForInteractionPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ModuleForInteractionPrxHelper h = new ModuleForInteractionPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::Entity",
                "::Ferda::Modules::ModuleForInteraction",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ModuleForInteractionPrx v)
            {
                ostr.writeProxy(v);
            }

            public static ModuleForInteractionPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ModuleForInteractionPrxHelper result = new ModuleForInteractionPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class SettingModulePrxHelper : global::Ice.ObjectPrxHelperBase, SettingModulePrx
        {
            public SettingModulePrxHelper()
            {
            }

            public SettingModulePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIdentifierAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public PropertyValue run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, out string about, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_runAsync(valueBefore, propertyName, boxModuleParam, localePrefs, manager, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    about = result_.about;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getPropertyAboutAsync(value, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLabelAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLabel_name = "getLabel";

            private void _iceI_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getLabel_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getIdentifierAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIdentifierAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getIdentifierAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIdentifier_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getIdentifier(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIdentifier_name = "getIdentifier";

            private void _iceI_getIdentifier(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getIdentifier_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<SettingModule_RunResult> runAsync(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_runAsync(valueBefore, propertyName, boxModuleParam, localePrefs, manager, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<SettingModule_RunResult> _iceI_runAsync(PropertyValue iceP_valueBefore, string iceP_propertyName, BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_run_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<SettingModule_RunResult>(progress, cancel);
                _iceI_run(iceP_valueBefore, iceP_propertyName, iceP_boxModuleParam, iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed.Task;
            }

            private const string _run_name = "run";

            private void _iceI_run(PropertyValue iceP_valueBefore, string iceP_propertyName, BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<SettingModule_RunResult>(completed);
                outAsync.invoke(
                    _run_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_valueBefore);
                        ostr.writeString(iceP_propertyName);
                        BoxModulePrxHelper.write(ostr, iceP_boxModuleParam);
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                        global::Ferda.ModulesManager.ManagersEnginePrxHelper.write(ostr, iceP_manager);
                        ostr.writePendingValues();
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxRuntimeError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        SettingModule_RunResult ret = new SettingModule_RunResult();
                        ret.about = istr.readString();
                        istr.readValue((PropertyValue v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getPropertyAboutAsync(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getPropertyAboutAsync(value, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getPropertyAboutAsync(PropertyValue iceP_value, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getPropertyAbout_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getPropertyAbout(iceP_value, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getPropertyAbout_name = "getPropertyAbout";

            private void _iceI_getPropertyAbout(PropertyValue iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getPropertyAbout_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_value);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLabel(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, context, callback, cookie, false);
            }

            public string end_getLabel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLabel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Entity_getLabel, string>(
                    (Callback_Entity_getLabel cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLabel_name, cookie, completedCallback);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_SettingModule_getIdentifier> begin_getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIdentifier(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIdentifier(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIdentifier(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIdentifier(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIdentifier(context, callback, cookie, false);
            }

            public string end_getIdentifier(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIdentifier_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_SettingModule_getIdentifier> begin_getIdentifier(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIdentifier_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SettingModule_getIdentifier, string>(
                    (Callback_SettingModule_getIdentifier cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIdentifier_name, cookie, completedCallback);
                _iceI_getIdentifier(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_SettingModule_run> begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_run(valueBefore, propertyName, boxModuleParam, localePrefs, manager, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_run(valueBefore, propertyName, boxModuleParam, localePrefs, manager, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_run(valueBefore, propertyName, boxModuleParam, localePrefs, manager, context, callback, cookie, false);
            }

            public PropertyValue end_run(out string about, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _run_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<SettingModule_RunResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                about = result_.about;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_SettingModule_run> begin_run(PropertyValue iceP_valueBefore, string iceP_propertyName, BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_run_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SettingModule_run, SettingModule_RunResult>(
                    (Callback_SettingModule_run cb, SettingModule_RunResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.about);
                        }
                    },
                    this, _run_name, cookie, completedCallback);
                _iceI_run(iceP_valueBefore, iceP_propertyName, iceP_boxModuleParam, iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_SettingModule_getPropertyAbout> begin_getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getPropertyAbout(value, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getPropertyAbout(PropertyValue value, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPropertyAbout(value, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPropertyAbout(value, context, callback, cookie, false);
            }

            public string end_getPropertyAbout(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getPropertyAbout_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_SettingModule_getPropertyAbout> begin_getPropertyAbout(PropertyValue iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getPropertyAbout_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SettingModule_getPropertyAbout, string>(
                    (Callback_SettingModule_getPropertyAbout cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getPropertyAbout_name, cookie, completedCallback);
                _iceI_getPropertyAbout(iceP_value, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static SettingModulePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                SettingModulePrx r = b as SettingModulePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    SettingModulePrxHelper h = new SettingModulePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static SettingModulePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                SettingModulePrx r = b as SettingModulePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    SettingModulePrxHelper h = new SettingModulePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static SettingModulePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        SettingModulePrxHelper h = new SettingModulePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static SettingModulePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        SettingModulePrxHelper h = new SettingModulePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static SettingModulePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                SettingModulePrx r = b as SettingModulePrx;
                if(r == null)
                {
                    SettingModulePrxHelper h = new SettingModulePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static SettingModulePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                SettingModulePrxHelper h = new SettingModulePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::Entity",
                "::Ferda::Modules::SettingModule",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, SettingModulePrx v)
            {
                ostr.writeProxy(v);
            }

            public static SettingModulePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    SettingModulePrxHelper result = new SettingModulePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class SettingModuleWithStringAbilityPrxHelper : global::Ice.ObjectPrxHelperBase, SettingModuleWithStringAbilityPrx
        {
            public SettingModuleWithStringAbilityPrxHelper()
            {
            }

            public SettingModuleWithStringAbilityPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIdentifierAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public PropertyValue run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, out string about, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_runAsync(valueBefore, propertyName, boxModuleParam, localePrefs, manager, context, null, global::System.Threading.CancellationToken.None, true).Result;
                    about = result_.about;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getPropertyAboutAsync(value, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public PropertyValue convertFromStringAbout(string about, string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_convertFromStringAboutAsync(about, localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLabelAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLabel_name = "getLabel";

            private void _iceI_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getLabel_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getIdentifierAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIdentifierAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getIdentifierAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIdentifier_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getIdentifier(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIdentifier_name = "getIdentifier";

            private void _iceI_getIdentifier(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getIdentifier_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<SettingModule_RunResult> runAsync(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_runAsync(valueBefore, propertyName, boxModuleParam, localePrefs, manager, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<SettingModule_RunResult> _iceI_runAsync(PropertyValue iceP_valueBefore, string iceP_propertyName, BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_run_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<SettingModule_RunResult>(progress, cancel);
                _iceI_run(iceP_valueBefore, iceP_propertyName, iceP_boxModuleParam, iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed.Task;
            }

            private const string _run_name = "run";

            private void _iceI_run(PropertyValue iceP_valueBefore, string iceP_propertyName, BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<SettingModule_RunResult>(completed);
                outAsync.invoke(
                    _run_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_valueBefore);
                        ostr.writeString(iceP_propertyName);
                        BoxModulePrxHelper.write(ostr, iceP_boxModuleParam);
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                        global::Ferda.ModulesManager.ManagersEnginePrxHelper.write(ostr, iceP_manager);
                        ostr.writePendingValues();
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxRuntimeError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        SettingModule_RunResult ret = new SettingModule_RunResult();
                        ret.about = istr.readString();
                        istr.readValue((PropertyValue v) => {ret.returnValue = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getPropertyAboutAsync(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getPropertyAboutAsync(value, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getPropertyAboutAsync(PropertyValue iceP_value, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getPropertyAbout_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getPropertyAbout(iceP_value, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getPropertyAbout_name = "getPropertyAbout";

            private void _iceI_getPropertyAbout(PropertyValue iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getPropertyAbout_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeValue(iceP_value);
                        ostr.writePendingValues();
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<PropertyValue> convertFromStringAboutAsync(string about, string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_convertFromStringAboutAsync(about, localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<PropertyValue> _iceI_convertFromStringAboutAsync(string iceP_about, string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_convertFromStringAbout_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<PropertyValue>(progress, cancel);
                _iceI_convertFromStringAbout(iceP_about, iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _convertFromStringAbout_name = "convertFromStringAbout";

            private void _iceI_convertFromStringAbout(string iceP_about, string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<PropertyValue>(completed);
                outAsync.invoke(
                    _convertFromStringAbout_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_about);
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(IsNotConvertibleError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        PropertyValue ret = null;
                        istr.readValue((PropertyValue v) => {ret = v; });
                        istr.readPendingValues();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLabel(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, context, callback, cookie, false);
            }

            public string end_getLabel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLabel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Entity_getLabel, string>(
                    (Callback_Entity_getLabel cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLabel_name, cookie, completedCallback);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_SettingModule_getIdentifier> begin_getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIdentifier(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIdentifier(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIdentifier(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIdentifier(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIdentifier(context, callback, cookie, false);
            }

            public string end_getIdentifier(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIdentifier_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_SettingModule_getIdentifier> begin_getIdentifier(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIdentifier_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SettingModule_getIdentifier, string>(
                    (Callback_SettingModule_getIdentifier cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIdentifier_name, cookie, completedCallback);
                _iceI_getIdentifier(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_SettingModule_run> begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_run(valueBefore, propertyName, boxModuleParam, localePrefs, manager, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_run(valueBefore, propertyName, boxModuleParam, localePrefs, manager, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_run(valueBefore, propertyName, boxModuleParam, localePrefs, manager, context, callback, cookie, false);
            }

            public PropertyValue end_run(out string about, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _run_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<SettingModule_RunResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                about = result_.about;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_SettingModule_run> begin_run(PropertyValue iceP_valueBefore, string iceP_propertyName, BoxModulePrx iceP_boxModuleParam, string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_run_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SettingModule_run, SettingModule_RunResult>(
                    (Callback_SettingModule_run cb, SettingModule_RunResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.about);
                        }
                    },
                    this, _run_name, cookie, completedCallback);
                _iceI_run(iceP_valueBefore, iceP_propertyName, iceP_boxModuleParam, iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_SettingModule_getPropertyAbout> begin_getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getPropertyAbout(value, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getPropertyAbout(PropertyValue value, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPropertyAbout(value, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getPropertyAbout(PropertyValue value, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPropertyAbout(value, context, callback, cookie, false);
            }

            public string end_getPropertyAbout(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getPropertyAbout_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_SettingModule_getPropertyAbout> begin_getPropertyAbout(PropertyValue iceP_value, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getPropertyAbout_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SettingModule_getPropertyAbout, string>(
                    (Callback_SettingModule_getPropertyAbout cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getPropertyAbout_name, cookie, completedCallback);
                _iceI_getPropertyAbout(iceP_value, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_SettingModuleWithStringAbility_convertFromStringAbout> begin_convertFromStringAbout(string about, string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_convertFromStringAbout(about, localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_convertFromStringAbout(string about, string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_convertFromStringAbout(about, localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_convertFromStringAbout(string about, string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_convertFromStringAbout(about, localePrefs, context, callback, cookie, false);
            }

            public PropertyValue end_convertFromStringAbout(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _convertFromStringAbout_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<PropertyValue>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_SettingModuleWithStringAbility_convertFromStringAbout> begin_convertFromStringAbout(string iceP_about, string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_convertFromStringAbout_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SettingModuleWithStringAbility_convertFromStringAbout, PropertyValue>(
                    (Callback_SettingModuleWithStringAbility_convertFromStringAbout cb, PropertyValue ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _convertFromStringAbout_name, cookie, completedCallback);
                _iceI_convertFromStringAbout(iceP_about, iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static SettingModuleWithStringAbilityPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                SettingModuleWithStringAbilityPrx r = b as SettingModuleWithStringAbilityPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    SettingModuleWithStringAbilityPrxHelper h = new SettingModuleWithStringAbilityPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static SettingModuleWithStringAbilityPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                SettingModuleWithStringAbilityPrx r = b as SettingModuleWithStringAbilityPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    SettingModuleWithStringAbilityPrxHelper h = new SettingModuleWithStringAbilityPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static SettingModuleWithStringAbilityPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        SettingModuleWithStringAbilityPrxHelper h = new SettingModuleWithStringAbilityPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static SettingModuleWithStringAbilityPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        SettingModuleWithStringAbilityPrxHelper h = new SettingModuleWithStringAbilityPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static SettingModuleWithStringAbilityPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                SettingModuleWithStringAbilityPrx r = b as SettingModuleWithStringAbilityPrx;
                if(r == null)
                {
                    SettingModuleWithStringAbilityPrxHelper h = new SettingModuleWithStringAbilityPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static SettingModuleWithStringAbilityPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                SettingModuleWithStringAbilityPrxHelper h = new SettingModuleWithStringAbilityPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::Entity",
                "::Ferda::Modules::SettingModule",
                "::Ferda::Modules::SettingModuleWithStringAbility",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, SettingModuleWithStringAbilityPrx v)
            {
                ostr.writeProxy(v);
            }

            public static SettingModuleWithStringAbilityPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    SettingModuleWithStringAbilityPrxHelper result = new SettingModuleWithStringAbilityPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BoxModuleFactoryPrxHelper : global::Ice.ObjectPrxHelperBase, BoxModuleFactoryPrx
        {
            public BoxModuleFactoryPrxHelper()
            {
            }

            public BoxModuleFactoryPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public BoxModulePrx createBoxModule(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_createBoxModuleAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void refresh(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_refreshAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool destroyIfEmpty(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_destroyIfEmptyAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void destroyBoxModule(string boxIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_destroyBoxModuleAsync(boxIdentity, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_destroyAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public SocketInfo[] getSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getSocketsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public ActionInfo[] getActions(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getActionsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public PropertyInfo[] getProperties(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getPropertiesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public HelpFileInfo[] getHelpFileInfoSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getHelpFileInfoSeqAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModuleFactoryCreatorPrx getMyFactoryCreator(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getMyFactoryCreatorAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<BoxModulePrx> createBoxModuleAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_createBoxModuleAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModulePrx> _iceI_createBoxModuleAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_createBoxModule_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModulePrx>(progress, cancel);
                _iceI_createBoxModule(context, synchronous, completed);
                return completed.Task;
            }

            private const string _createBoxModule_name = "createBoxModule";

            private void _iceI_createBoxModule(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModulePrx>(completed);
                outAsync.invoke(
                    _createBoxModule_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModulePrx ret;
                        ret = BoxModulePrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task refreshAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_refreshAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_refreshAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_refresh(context, synchronous, completed);
                return completed.Task;
            }

            private const string _refresh_name = "refresh";

            private void _iceI_refresh(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _refresh_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<bool> destroyIfEmptyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_destroyIfEmptyAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_destroyIfEmptyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_destroyIfEmpty_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_destroyIfEmpty(context, synchronous, completed);
                return completed.Task;
            }

            private const string _destroyIfEmpty_name = "destroyIfEmpty";

            private void _iceI_destroyIfEmpty(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _destroyIfEmpty_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task destroyBoxModuleAsync(string boxIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_destroyBoxModuleAsync(boxIdentity, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_destroyBoxModuleAsync(string iceP_boxIdentity, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_destroyBoxModule(iceP_boxIdentity, context, synchronous, completed);
                return completed.Task;
            }

            private const string _destroyBoxModule_name = "destroyBoxModule";

            private void _iceI_destroyBoxModule(string iceP_boxIdentity, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _destroyBoxModule_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_boxIdentity);
                    });
            }

            public global::System.Threading.Tasks.Task destroyAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_destroyAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_destroyAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_destroy(context, synchronous, completed);
                return completed.Task;
            }

            private const string _destroy_name = "destroy";

            private void _iceI_destroy(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _destroy_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public global::System.Threading.Tasks.Task<SocketInfo[]> getSocketsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getSocketsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<SocketInfo[]> _iceI_getSocketsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getSockets_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<SocketInfo[]>(progress, cancel);
                _iceI_getSockets(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getSockets_name = "getSockets";

            private void _iceI_getSockets(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<SocketInfo[]>(completed);
                outAsync.invoke(
                    _getSockets_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        SocketInfo[] ret;
                        ret = SocketInfoSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<ActionInfo[]> getActionsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getActionsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ActionInfo[]> _iceI_getActionsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getActions_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<ActionInfo[]>(progress, cancel);
                _iceI_getActions(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getActions_name = "getActions";

            private void _iceI_getActions(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ActionInfo[]>(completed);
                outAsync.invoke(
                    _getActions_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        ActionInfo[] ret;
                        ret = ActionInfoSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<PropertyInfo[]> getPropertiesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getPropertiesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<PropertyInfo[]> _iceI_getPropertiesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getProperties_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<PropertyInfo[]>(progress, cancel);
                _iceI_getProperties(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getProperties_name = "getProperties";

            private void _iceI_getProperties(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<PropertyInfo[]>(completed);
                outAsync.invoke(
                    _getProperties_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        PropertyInfo[] ret;
                        ret = PropertyInfoSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<HelpFileInfo[]> getHelpFileInfoSeqAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getHelpFileInfoSeqAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<HelpFileInfo[]> _iceI_getHelpFileInfoSeqAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHelpFileInfoSeq_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<HelpFileInfo[]>(progress, cancel);
                _iceI_getHelpFileInfoSeq(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHelpFileInfoSeq_name = "getHelpFileInfoSeq";

            private void _iceI_getHelpFileInfoSeq(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<HelpFileInfo[]>(completed);
                outAsync.invoke(
                    _getHelpFileInfoSeq_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        HelpFileInfo[] ret;
                        ret = HelpFileInfoSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModuleFactoryCreatorPrx> getMyFactoryCreatorAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getMyFactoryCreatorAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModuleFactoryCreatorPrx> _iceI_getMyFactoryCreatorAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getMyFactoryCreator_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModuleFactoryCreatorPrx>(progress, cancel);
                _iceI_getMyFactoryCreator(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getMyFactoryCreator_name = "getMyFactoryCreator";

            private void _iceI_getMyFactoryCreator(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModuleFactoryCreatorPrx>(completed);
                outAsync.invoke(
                    _getMyFactoryCreator_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModuleFactoryCreatorPrx ret;
                        ret = BoxModuleFactoryCreatorPrxHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_createBoxModule> begin_createBoxModule(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_createBoxModule(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_createBoxModule(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createBoxModule(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_createBoxModule(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createBoxModule(context, callback, cookie, false);
            }

            public BoxModulePrx end_createBoxModule(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createBoxModule_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModulePrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_createBoxModule> begin_createBoxModule(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_createBoxModule_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_createBoxModule, BoxModulePrx>(
                    (Callback_BoxModuleFactory_createBoxModule cb, BoxModulePrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _createBoxModule_name, cookie, completedCallback);
                _iceI_createBoxModule(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_refresh> begin_refresh(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_refresh(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_refresh(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_refresh(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_refresh(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_refresh(context, callback, cookie, false);
            }

            public void end_refresh(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _refresh_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_refresh> begin_refresh(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_refresh, object>(
                    (Callback_BoxModuleFactory_refresh cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _refresh_name, cookie, completedCallback);
                _iceI_refresh(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_destroyIfEmpty> begin_destroyIfEmpty(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_destroyIfEmpty(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_destroyIfEmpty(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_destroyIfEmpty(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_destroyIfEmpty(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_destroyIfEmpty(context, callback, cookie, false);
            }

            public bool end_destroyIfEmpty(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _destroyIfEmpty_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_destroyIfEmpty> begin_destroyIfEmpty(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_destroyIfEmpty_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_destroyIfEmpty, bool>(
                    (Callback_BoxModuleFactory_destroyIfEmpty cb, bool ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _destroyIfEmpty_name, cookie, completedCallback);
                _iceI_destroyIfEmpty(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_destroyBoxModule> begin_destroyBoxModule(string boxIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_destroyBoxModule(boxIdentity, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_destroyBoxModule(string boxIdentity, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_destroyBoxModule(boxIdentity, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_destroyBoxModule(string boxIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_destroyBoxModule(boxIdentity, context, callback, cookie, false);
            }

            public void end_destroyBoxModule(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _destroyBoxModule_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_destroyBoxModule> begin_destroyBoxModule(string iceP_boxIdentity, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_destroyBoxModule, object>(
                    (Callback_BoxModuleFactory_destroyBoxModule cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _destroyBoxModule_name, cookie, completedCallback);
                _iceI_destroyBoxModule(iceP_boxIdentity, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_destroy> begin_destroy(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_destroy(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_destroy(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_destroy(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_destroy(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_destroy(context, callback, cookie, false);
            }

            public void end_destroy(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _destroy_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_destroy> begin_destroy(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_destroy, object>(
                    (Callback_BoxModuleFactory_destroy cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _destroy_name, cookie, completedCallback);
                _iceI_destroy(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_getSockets> begin_getSockets(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getSockets(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getSockets(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getSockets(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getSockets(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getSockets(context, callback, cookie, false);
            }

            public SocketInfo[] end_getSockets(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getSockets_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<SocketInfo[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_getSockets> begin_getSockets(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getSockets_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_getSockets, SocketInfo[]>(
                    (Callback_BoxModuleFactory_getSockets cb, SocketInfo[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getSockets_name, cookie, completedCallback);
                _iceI_getSockets(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_getActions> begin_getActions(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getActions(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getActions(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getActions(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getActions(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getActions(context, callback, cookie, false);
            }

            public ActionInfo[] end_getActions(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getActions_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<ActionInfo[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_getActions> begin_getActions(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getActions_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_getActions, ActionInfo[]>(
                    (Callback_BoxModuleFactory_getActions cb, ActionInfo[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getActions_name, cookie, completedCallback);
                _iceI_getActions(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_getProperties> begin_getProperties(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getProperties(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getProperties(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProperties(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getProperties(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProperties(context, callback, cookie, false);
            }

            public PropertyInfo[] end_getProperties(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getProperties_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<PropertyInfo[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_getProperties> begin_getProperties(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getProperties_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_getProperties, PropertyInfo[]>(
                    (Callback_BoxModuleFactory_getProperties cb, PropertyInfo[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getProperties_name, cookie, completedCallback);
                _iceI_getProperties(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_getHelpFileInfoSeq> begin_getHelpFileInfoSeq(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getHelpFileInfoSeq(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getHelpFileInfoSeq(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFileInfoSeq(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getHelpFileInfoSeq(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFileInfoSeq(context, callback, cookie, false);
            }

            public HelpFileInfo[] end_getHelpFileInfoSeq(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHelpFileInfoSeq_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<HelpFileInfo[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_getHelpFileInfoSeq> begin_getHelpFileInfoSeq(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getHelpFileInfoSeq_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_getHelpFileInfoSeq, HelpFileInfo[]>(
                    (Callback_BoxModuleFactory_getHelpFileInfoSeq cb, HelpFileInfo[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getHelpFileInfoSeq_name, cookie, completedCallback);
                _iceI_getHelpFileInfoSeq(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactory_getMyFactoryCreator> begin_getMyFactoryCreator(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getMyFactoryCreator(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getMyFactoryCreator(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getMyFactoryCreator(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getMyFactoryCreator(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getMyFactoryCreator(context, callback, cookie, false);
            }

            public BoxModuleFactoryCreatorPrx end_getMyFactoryCreator(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getMyFactoryCreator_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModuleFactoryCreatorPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactory_getMyFactoryCreator> begin_getMyFactoryCreator(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getMyFactoryCreator_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactory_getMyFactoryCreator, BoxModuleFactoryCreatorPrx>(
                    (Callback_BoxModuleFactory_getMyFactoryCreator cb, BoxModuleFactoryCreatorPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getMyFactoryCreator_name, cookie, completedCallback);
                _iceI_getMyFactoryCreator(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BoxModuleFactoryPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleFactoryPrx r = b as BoxModuleFactoryPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BoxModuleFactoryPrxHelper h = new BoxModuleFactoryPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleFactoryPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleFactoryPrx r = b as BoxModuleFactoryPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BoxModuleFactoryPrxHelper h = new BoxModuleFactoryPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleFactoryPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BoxModuleFactoryPrxHelper h = new BoxModuleFactoryPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleFactoryPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BoxModuleFactoryPrxHelper h = new BoxModuleFactoryPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleFactoryPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleFactoryPrx r = b as BoxModuleFactoryPrx;
                if(r == null)
                {
                    BoxModuleFactoryPrxHelper h = new BoxModuleFactoryPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleFactoryPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BoxModuleFactoryPrxHelper h = new BoxModuleFactoryPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoxModuleFactory",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BoxModuleFactoryPrx v)
            {
                ostr.writeProxy(v);
            }

            public static BoxModuleFactoryPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BoxModuleFactoryPrxHelper result = new BoxModuleFactoryPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BoxModuleFactoryCreatorPrxHelper : global::Ice.ObjectPrxHelperBase, BoxModuleFactoryCreatorPrx
        {
            public BoxModuleFactoryCreatorPrxHelper()
            {
            }

            public BoxModuleFactoryCreatorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModuleFactoryPrx createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_createBoxModuleFactoryAsync(localePrefs, manager, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIdentifierAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxModuleFunctionsIceIdsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] getBoxCategories(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxCategoriesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxCategoryLocalizedNameAsync(locale, categoryName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getHintAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getHelpFileAsync(identifier, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIconAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getDesign(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDesignAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLabelAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLabel_name = "getLabel";

            private void _iceI_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getLabel_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModuleFactoryPrx> createBoxModuleFactoryAsync(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_createBoxModuleFactoryAsync(localePrefs, manager, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModuleFactoryPrx> _iceI_createBoxModuleFactoryAsync(string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_createBoxModuleFactory_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModuleFactoryPrx>(progress, cancel);
                _iceI_createBoxModuleFactory(iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed.Task;
            }

            private const string _createBoxModuleFactory_name = "createBoxModuleFactory";

            private void _iceI_createBoxModuleFactory(string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModuleFactoryPrx>(completed);
                outAsync.invoke(
                    _createBoxModuleFactory_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                        global::Ferda.ModulesManager.ManagersEnginePrxHelper.write(ostr, iceP_manager);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModuleFactoryPrx ret;
                        ret = BoxModuleFactoryPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getIdentifierAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIdentifierAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getIdentifierAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIdentifier_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getIdentifier(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIdentifier_name = "getIdentifier";

            private void _iceI_getIdentifier(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getIdentifier_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getBoxModuleFunctionsIceIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxModuleFunctionsIceIdsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getBoxModuleFunctionsIceIdsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxModuleFunctionsIceIds_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getBoxModuleFunctionsIceIds(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxModuleFunctionsIceIds_name = "getBoxModuleFunctionsIceIds";

            private void _iceI_getBoxModuleFunctionsIceIds(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getBoxModuleFunctionsIceIds_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getBoxCategoriesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxCategoriesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getBoxCategoriesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxCategories_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getBoxCategories(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxCategories_name = "getBoxCategories";

            private void _iceI_getBoxCategories(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getBoxCategories_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getBoxCategoryLocalizedNameAsync(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxCategoryLocalizedNameAsync(locale, categoryName, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getBoxCategoryLocalizedNameAsync(string iceP_locale, string iceP_categoryName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxCategoryLocalizedName_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getBoxCategoryLocalizedName(iceP_locale, iceP_categoryName, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxCategoryLocalizedName_name = "getBoxCategoryLocalizedName";

            private void _iceI_getBoxCategoryLocalizedName(string iceP_locale, string iceP_categoryName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getBoxCategoryLocalizedName_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_locale);
                        ostr.writeString(iceP_categoryName);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringOptHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getHintAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getHintAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getHintAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHint_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getHint(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHint_name = "getHint";

            private void _iceI_getHint(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getHint_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> getHelpFileAsync(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getHelpFileAsync(identifier, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_getHelpFileAsync(string iceP_identifier, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHelpFile_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_getHelpFile(iceP_identifier, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHelpFile_name = "getHelpFile";

            private void _iceI_getHelpFile(string iceP_identifier, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _getHelpFile_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_identifier);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = ByteSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> getIconAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIconAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_getIconAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIcon_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_getIcon(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIcon_name = "getIcon";

            private void _iceI_getIcon(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _getIcon_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = ByteSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getDesignAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDesignAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getDesignAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDesign_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getDesign(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDesign_name = "getDesign";

            private void _iceI_getDesign(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getDesign_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLabel(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, context, callback, cookie, false);
            }

            public string end_getLabel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLabel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Entity_getLabel, string>(
                    (Callback_Entity_getLabel cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLabel_name, cookie, completedCallback);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_createBoxModuleFactory> begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_createBoxModuleFactory(localePrefs, manager, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createBoxModuleFactory(localePrefs, manager, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createBoxModuleFactory(localePrefs, manager, context, callback, cookie, false);
            }

            public BoxModuleFactoryPrx end_createBoxModuleFactory(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createBoxModuleFactory_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModuleFactoryPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_createBoxModuleFactory> begin_createBoxModuleFactory(string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_createBoxModuleFactory_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_createBoxModuleFactory, BoxModuleFactoryPrx>(
                    (Callback_BoxModuleFactoryCreator_createBoxModuleFactory cb, BoxModuleFactoryPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _createBoxModuleFactory_name, cookie, completedCallback);
                _iceI_createBoxModuleFactory(iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIdentifier> begin_getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIdentifier(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIdentifier(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIdentifier(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIdentifier(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIdentifier(context, callback, cookie, false);
            }

            public string end_getIdentifier(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIdentifier_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIdentifier> begin_getIdentifier(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIdentifier_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getIdentifier, string>(
                    (Callback_BoxModuleFactoryCreator_getIdentifier cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIdentifier_name, cookie, completedCallback);
                _iceI_getIdentifier(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds> begin_getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxModuleFunctionsIceIds(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleFunctionsIceIds(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleFunctionsIceIds(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleFunctionsIceIds(context, callback, cookie, false);
            }

            public string[] end_getBoxModuleFunctionsIceIds(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxModuleFunctionsIceIds_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds> begin_getBoxModuleFunctionsIceIds(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxModuleFunctionsIceIds_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds, string[]>(
                    (Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxModuleFunctionsIceIds_name, cookie, completedCallback);
                _iceI_getBoxModuleFunctionsIceIds(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategories> begin_getBoxCategories(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxCategories(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxCategories(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxCategories(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxCategories(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxCategories(context, callback, cookie, false);
            }

            public string[] end_getBoxCategories(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxCategories_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategories> begin_getBoxCategories(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxCategories_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getBoxCategories, string[]>(
                    (Callback_BoxModuleFactoryCreator_getBoxCategories cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxCategories_name, cookie, completedCallback);
                _iceI_getBoxCategories(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName> begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxCategoryLocalizedName(locale, categoryName, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxCategoryLocalizedName(locale, categoryName, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxCategoryLocalizedName(locale, categoryName, context, callback, cookie, false);
            }

            public string[] end_getBoxCategoryLocalizedName(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxCategoryLocalizedName_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName> begin_getBoxCategoryLocalizedName(string iceP_locale, string iceP_categoryName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxCategoryLocalizedName_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName, string[]>(
                    (Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxCategoryLocalizedName_name, cookie, completedCallback);
                _iceI_getBoxCategoryLocalizedName(iceP_locale, iceP_categoryName, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHint> begin_getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getHint(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHint(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHint(localePrefs, context, callback, cookie, false);
            }

            public string end_getHint(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHint_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHint> begin_getHint(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getHint_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getHint, string>(
                    (Callback_BoxModuleFactoryCreator_getHint cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getHint_name, cookie, completedCallback);
                _iceI_getHint(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHelpFile> begin_getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getHelpFile(identifier, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFile(identifier, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFile(identifier, context, callback, cookie, false);
            }

            public byte[] end_getHelpFile(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHelpFile_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHelpFile> begin_getHelpFile(string iceP_identifier, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getHelpFile_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getHelpFile, byte[]>(
                    (Callback_BoxModuleFactoryCreator_getHelpFile cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getHelpFile_name, cookie, completedCallback);
                _iceI_getHelpFile(iceP_identifier, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIcon> begin_getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIcon(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIcon(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIcon(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIcon(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIcon(context, callback, cookie, false);
            }

            public byte[] end_getIcon(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIcon_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIcon> begin_getIcon(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIcon_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getIcon, byte[]>(
                    (Callback_BoxModuleFactoryCreator_getIcon cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIcon_name, cookie, completedCallback);
                _iceI_getIcon(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getDesign> begin_getDesign(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDesign(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDesign(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDesign(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDesign(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDesign(context, callback, cookie, false);
            }

            public string end_getDesign(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDesign_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getDesign> begin_getDesign(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDesign_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getDesign, string>(
                    (Callback_BoxModuleFactoryCreator_getDesign cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDesign_name, cookie, completedCallback);
                _iceI_getDesign(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BoxModuleFactoryCreatorPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleFactoryCreatorPrx r = b as BoxModuleFactoryCreatorPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BoxModuleFactoryCreatorPrxHelper h = new BoxModuleFactoryCreatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleFactoryCreatorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleFactoryCreatorPrx r = b as BoxModuleFactoryCreatorPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BoxModuleFactoryCreatorPrxHelper h = new BoxModuleFactoryCreatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleFactoryCreatorPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BoxModuleFactoryCreatorPrxHelper h = new BoxModuleFactoryCreatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleFactoryCreatorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BoxModuleFactoryCreatorPrxHelper h = new BoxModuleFactoryCreatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleFactoryCreatorPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleFactoryCreatorPrx r = b as BoxModuleFactoryCreatorPrx;
                if(r == null)
                {
                    BoxModuleFactoryCreatorPrxHelper h = new BoxModuleFactoryCreatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleFactoryCreatorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BoxModuleFactoryCreatorPrxHelper h = new BoxModuleFactoryCreatorPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoxModuleFactoryCreator",
                "::Ferda::Modules::Entity",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BoxModuleFactoryCreatorPrx v)
            {
                ostr.writeProxy(v);
            }

            public static BoxModuleFactoryCreatorPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BoxModuleFactoryCreatorPrxHelper result = new BoxModuleFactoryCreatorPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class PropertyBoxModuleFactoryCreatorPrxHelper : global::Ice.ObjectPrxHelperBase, PropertyBoxModuleFactoryCreatorPrx
        {
            public PropertyBoxModuleFactoryCreatorPrxHelper()
            {
            }

            public PropertyBoxModuleFactoryCreatorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModuleFactoryPrx createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_createBoxModuleFactoryAsync(localePrefs, manager, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIdentifierAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxModuleFunctionsIceIdsAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] getBoxCategories(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxCategoriesAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string[] getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxCategoryLocalizedNameAsync(locale, categoryName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getHintAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getHelpFileAsync(identifier, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public byte[] getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIconAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getDesign(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDesignAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getPropertyClassIceId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getPropertyClassIceIdAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLabelAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLabel_name = "getLabel";

            private void _iceI_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getLabel_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModuleFactoryPrx> createBoxModuleFactoryAsync(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_createBoxModuleFactoryAsync(localePrefs, manager, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModuleFactoryPrx> _iceI_createBoxModuleFactoryAsync(string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_createBoxModuleFactory_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModuleFactoryPrx>(progress, cancel);
                _iceI_createBoxModuleFactory(iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed.Task;
            }

            private const string _createBoxModuleFactory_name = "createBoxModuleFactory";

            private void _iceI_createBoxModuleFactory(string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModuleFactoryPrx>(completed);
                outAsync.invoke(
                    _createBoxModuleFactory_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                        global::Ferda.ModulesManager.ManagersEnginePrxHelper.write(ostr, iceP_manager);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModuleFactoryPrx ret;
                        ret = BoxModuleFactoryPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getIdentifierAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIdentifierAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getIdentifierAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIdentifier_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getIdentifier(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIdentifier_name = "getIdentifier";

            private void _iceI_getIdentifier(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getIdentifier_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getBoxModuleFunctionsIceIdsAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxModuleFunctionsIceIdsAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getBoxModuleFunctionsIceIdsAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxModuleFunctionsIceIds_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getBoxModuleFunctionsIceIds(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxModuleFunctionsIceIds_name = "getBoxModuleFunctionsIceIds";

            private void _iceI_getBoxModuleFunctionsIceIds(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getBoxModuleFunctionsIceIds_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getBoxCategoriesAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxCategoriesAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getBoxCategoriesAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxCategories_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getBoxCategories(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxCategories_name = "getBoxCategories";

            private void _iceI_getBoxCategories(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getBoxCategories_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string[]> getBoxCategoryLocalizedNameAsync(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxCategoryLocalizedNameAsync(locale, categoryName, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string[]> _iceI_getBoxCategoryLocalizedNameAsync(string iceP_locale, string iceP_categoryName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxCategoryLocalizedName_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string[]>(progress, cancel);
                _iceI_getBoxCategoryLocalizedName(iceP_locale, iceP_categoryName, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxCategoryLocalizedName_name = "getBoxCategoryLocalizedName";

            private void _iceI_getBoxCategoryLocalizedName(string iceP_locale, string iceP_categoryName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string[]>(completed);
                outAsync.invoke(
                    _getBoxCategoryLocalizedName_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_locale);
                        ostr.writeString(iceP_categoryName);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string[] ret;
                        ret = StringOptHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getHintAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getHintAsync(localePrefs, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getHintAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHint_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getHint(iceP_localePrefs, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHint_name = "getHint";

            private void _iceI_getHint(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getHint_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        StringSeqHelper.write(ostr, iceP_localePrefs);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> getHelpFileAsync(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getHelpFileAsync(identifier, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_getHelpFileAsync(string iceP_identifier, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getHelpFile_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_getHelpFile(iceP_identifier, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getHelpFile_name = "getHelpFile";

            private void _iceI_getHelpFile(string iceP_identifier, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _getHelpFile_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_identifier);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = ByteSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<byte[]> getIconAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIconAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<byte[]> _iceI_getIconAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIcon_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<byte[]>(progress, cancel);
                _iceI_getIcon(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIcon_name = "getIcon";

            private void _iceI_getIcon(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<byte[]>(completed);
                outAsync.invoke(
                    _getIcon_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        byte[] ret;
                        ret = ByteSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getDesignAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDesignAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getDesignAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDesign_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getDesign(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDesign_name = "getDesign";

            private void _iceI_getDesign(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getDesign_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getPropertyClassIceIdAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getPropertyClassIceIdAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getPropertyClassIceIdAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getPropertyClassIceId_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getPropertyClassIceId(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getPropertyClassIceId_name = "getPropertyClassIceId";

            private void _iceI_getPropertyClassIceId(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getPropertyClassIceId_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLabel(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLabel(localePrefs, context, callback, cookie, false);
            }

            public string end_getLabel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLabel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Entity_getLabel> begin_getLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLabel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Entity_getLabel, string>(
                    (Callback_Entity_getLabel cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLabel_name, cookie, completedCallback);
                _iceI_getLabel(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_createBoxModuleFactory> begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_createBoxModuleFactory(localePrefs, manager, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createBoxModuleFactory(localePrefs, manager, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_createBoxModuleFactory(localePrefs, manager, context, callback, cookie, false);
            }

            public BoxModuleFactoryPrx end_createBoxModuleFactory(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _createBoxModuleFactory_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModuleFactoryPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_createBoxModuleFactory> begin_createBoxModuleFactory(string[] iceP_localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_createBoxModuleFactory_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_createBoxModuleFactory, BoxModuleFactoryPrx>(
                    (Callback_BoxModuleFactoryCreator_createBoxModuleFactory cb, BoxModuleFactoryPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _createBoxModuleFactory_name, cookie, completedCallback);
                _iceI_createBoxModuleFactory(iceP_localePrefs, iceP_manager, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIdentifier> begin_getIdentifier(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIdentifier(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIdentifier(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIdentifier(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIdentifier(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIdentifier(context, callback, cookie, false);
            }

            public string end_getIdentifier(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIdentifier_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIdentifier> begin_getIdentifier(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIdentifier_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getIdentifier, string>(
                    (Callback_BoxModuleFactoryCreator_getIdentifier cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIdentifier_name, cookie, completedCallback);
                _iceI_getIdentifier(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds> begin_getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxModuleFunctionsIceIds(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleFunctionsIceIds(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleFunctionsIceIds(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleFunctionsIceIds(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleFunctionsIceIds(context, callback, cookie, false);
            }

            public string[] end_getBoxModuleFunctionsIceIds(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxModuleFunctionsIceIds_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds> begin_getBoxModuleFunctionsIceIds(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxModuleFunctionsIceIds_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds, string[]>(
                    (Callback_BoxModuleFactoryCreator_getBoxModuleFunctionsIceIds cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxModuleFunctionsIceIds_name, cookie, completedCallback);
                _iceI_getBoxModuleFunctionsIceIds(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategories> begin_getBoxCategories(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxCategories(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxCategories(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxCategories(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxCategories(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxCategories(context, callback, cookie, false);
            }

            public string[] end_getBoxCategories(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxCategories_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategories> begin_getBoxCategories(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxCategories_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getBoxCategories, string[]>(
                    (Callback_BoxModuleFactoryCreator_getBoxCategories cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxCategories_name, cookie, completedCallback);
                _iceI_getBoxCategories(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName> begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxCategoryLocalizedName(locale, categoryName, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxCategoryLocalizedName(locale, categoryName, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxCategoryLocalizedName(locale, categoryName, context, callback, cookie, false);
            }

            public string[] end_getBoxCategoryLocalizedName(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxCategoryLocalizedName_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName> begin_getBoxCategoryLocalizedName(string iceP_locale, string iceP_categoryName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxCategoryLocalizedName_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName, string[]>(
                    (Callback_BoxModuleFactoryCreator_getBoxCategoryLocalizedName cb, string[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxCategoryLocalizedName_name, cookie, completedCallback);
                _iceI_getBoxCategoryLocalizedName(iceP_locale, iceP_categoryName, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHint> begin_getHint(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getHint(localePrefs, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHint(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getHint(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHint(localePrefs, context, callback, cookie, false);
            }

            public string end_getHint(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHint_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHint> begin_getHint(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getHint_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getHint, string>(
                    (Callback_BoxModuleFactoryCreator_getHint cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getHint_name, cookie, completedCallback);
                _iceI_getHint(iceP_localePrefs, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHelpFile> begin_getHelpFile(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getHelpFile(identifier, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFile(identifier, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getHelpFile(string identifier, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getHelpFile(identifier, context, callback, cookie, false);
            }

            public byte[] end_getHelpFile(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getHelpFile_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getHelpFile> begin_getHelpFile(string iceP_identifier, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getHelpFile_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getHelpFile, byte[]>(
                    (Callback_BoxModuleFactoryCreator_getHelpFile cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getHelpFile_name, cookie, completedCallback);
                _iceI_getHelpFile(iceP_identifier, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIcon> begin_getIcon(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIcon(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIcon(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIcon(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIcon(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIcon(context, callback, cookie, false);
            }

            public byte[] end_getIcon(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIcon_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<byte[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getIcon> begin_getIcon(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIcon_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getIcon, byte[]>(
                    (Callback_BoxModuleFactoryCreator_getIcon cb, byte[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIcon_name, cookie, completedCallback);
                _iceI_getIcon(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getDesign> begin_getDesign(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDesign(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDesign(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDesign(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDesign(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDesign(context, callback, cookie, false);
            }

            public string end_getDesign(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDesign_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleFactoryCreator_getDesign> begin_getDesign(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDesign_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleFactoryCreator_getDesign, string>(
                    (Callback_BoxModuleFactoryCreator_getDesign cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDesign_name, cookie, completedCallback);
                _iceI_getDesign(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_PropertyBoxModuleFactoryCreator_getPropertyClassIceId> begin_getPropertyClassIceId(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getPropertyClassIceId(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getPropertyClassIceId(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPropertyClassIceId(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getPropertyClassIceId(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPropertyClassIceId(context, callback, cookie, false);
            }

            public string end_getPropertyClassIceId(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getPropertyClassIceId_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_PropertyBoxModuleFactoryCreator_getPropertyClassIceId> begin_getPropertyClassIceId(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getPropertyClassIceId_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_PropertyBoxModuleFactoryCreator_getPropertyClassIceId, string>(
                    (Callback_PropertyBoxModuleFactoryCreator_getPropertyClassIceId cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getPropertyClassIceId_name, cookie, completedCallback);
                _iceI_getPropertyClassIceId(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static PropertyBoxModuleFactoryCreatorPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                PropertyBoxModuleFactoryCreatorPrx r = b as PropertyBoxModuleFactoryCreatorPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    PropertyBoxModuleFactoryCreatorPrxHelper h = new PropertyBoxModuleFactoryCreatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PropertyBoxModuleFactoryCreatorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                PropertyBoxModuleFactoryCreatorPrx r = b as PropertyBoxModuleFactoryCreatorPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    PropertyBoxModuleFactoryCreatorPrxHelper h = new PropertyBoxModuleFactoryCreatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PropertyBoxModuleFactoryCreatorPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        PropertyBoxModuleFactoryCreatorPrxHelper h = new PropertyBoxModuleFactoryCreatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static PropertyBoxModuleFactoryCreatorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        PropertyBoxModuleFactoryCreatorPrxHelper h = new PropertyBoxModuleFactoryCreatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static PropertyBoxModuleFactoryCreatorPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                PropertyBoxModuleFactoryCreatorPrx r = b as PropertyBoxModuleFactoryCreatorPrx;
                if(r == null)
                {
                    PropertyBoxModuleFactoryCreatorPrxHelper h = new PropertyBoxModuleFactoryCreatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PropertyBoxModuleFactoryCreatorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                PropertyBoxModuleFactoryCreatorPrxHelper h = new PropertyBoxModuleFactoryCreatorPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoxModuleFactoryCreator",
                "::Ferda::Modules::Entity",
                "::Ferda::Modules::PropertyBoxModuleFactoryCreator",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, PropertyBoxModuleFactoryCreatorPrx v)
            {
                ostr.writeProxy(v);
            }

            public static PropertyBoxModuleFactoryCreatorPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    PropertyBoxModuleFactoryCreatorPrxHelper result = new PropertyBoxModuleFactoryCreatorPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class ProgressTaskPrxHelper : global::Ice.ObjectPrxHelperBase, ProgressTaskPrx
        {
            public ProgressTaskPrxHelper()
            {
            }

            public ProgressTaskPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public float getValue(out string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_getValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    message = result_.message;
                    return result_.returnValue;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_stopAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<ProgressTask_GetValueResult> getValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ProgressTask_GetValueResult> _iceI_getValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<ProgressTask_GetValueResult>(progress, cancel);
                _iceI_getValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getValue_name = "getValue";

            private void _iceI_getValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ProgressTask_GetValueResult>(completed);
                outAsync.invoke(
                    _getValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        ProgressTask_GetValueResult ret = new ProgressTask_GetValueResult();
                        ret.message = istr.readString();
                        ret.returnValue = istr.readFloat();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task stopAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_stopAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_stopAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_stop(context, synchronous, completed);
                return completed.Task;
            }

            private const string _stop_name = "stop";

            private void _iceI_stop(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _stop_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_ProgressTask_getValue> begin_getValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getValue(context, callback, cookie, false);
            }

            public float end_getValue(out string message, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<ProgressTask_GetValueResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                message = result_.message;
                return result_.returnValue;
            }

            private global::Ice.AsyncResult<Callback_ProgressTask_getValue> begin_getValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ProgressTask_getValue, ProgressTask_GetValueResult>(
                    (Callback_ProgressTask_getValue cb, ProgressTask_GetValueResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.returnValue, ret.message);
                        }
                    },
                    this, _getValue_name, cookie, completedCallback);
                _iceI_getValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ProgressTask_stop> begin_stop(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_stop(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_stop(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_stop(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_stop(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_stop(context, callback, cookie, false);
            }

            public void end_stop(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _stop_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ProgressTask_stop> begin_stop(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ProgressTask_stop, object>(
                    (Callback_ProgressTask_stop cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _stop_name, cookie, completedCallback);
                _iceI_stop(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ProgressTaskPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ProgressTaskPrx r = b as ProgressTaskPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ProgressTaskPrxHelper h = new ProgressTaskPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ProgressTaskPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ProgressTaskPrx r = b as ProgressTaskPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ProgressTaskPrxHelper h = new ProgressTaskPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ProgressTaskPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ProgressTaskPrxHelper h = new ProgressTaskPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ProgressTaskPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ProgressTaskPrxHelper h = new ProgressTaskPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ProgressTaskPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ProgressTaskPrx r = b as ProgressTaskPrx;
                if(r == null)
                {
                    ProgressTaskPrxHelper h = new ProgressTaskPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ProgressTaskPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ProgressTaskPrxHelper h = new ProgressTaskPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::ProgressTask",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ProgressTaskPrx v)
            {
                ostr.writeProxy(v);
            }

            public static ProgressTaskPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ProgressTaskPrxHelper result = new ProgressTaskPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BoxModuleDisp_ : global::Ice.ObjectImpl, BoxModule
        {
            #region Slice operations

            public abstract string[] getDefaultUserLabel(global::Ice.Current current = null);

            public abstract DynamicHelpItem[] getDynamicHelpItems(global::Ice.Current current = null);

            public abstract void runAction(string actionName, global::Ice.Current current = null);

            public abstract SocketInfo[] getAdditionalSockets(global::Ice.Current current = null);

            public abstract PropertyInfo[] getAdditionalProperties(global::Ice.Current current = null);

            public abstract void setConnection(string socketName, BoxModulePrx otherModule, global::Ice.Current current = null);

            public abstract BoxModulePrx[] getConnections(string socketName, global::Ice.Current current = null);

            public abstract void removeConnection(string socketName, string boxModuleIceIdentity, global::Ice.Current current = null);

            public abstract void setProperty(string propertyName, PropertyValue value, global::Ice.Current current = null);

            public abstract PropertyValue getProperty(string propertyName, global::Ice.Current current = null);

            public abstract SelectString[] getPropertyOptions(string propertyName, global::Ice.Current current = null);

            public abstract bool isPropertySet(string propertyName, global::Ice.Current current = null);

            public abstract ModulesAskingForCreation[] getModulesAskingForCreation(global::Ice.Current current = null);

            public abstract string[] getFunctionsIceIds(global::Ice.Current current = null);

            public abstract global::Ice.ObjectPrx getFunctions(global::Ice.Current current = null);

            public abstract BoxModuleFactoryPrx getMyFactory(global::Ice.Current current = null);

            public abstract void validate(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoxModule",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getDefaultUserLabel(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getDefaultUserLabel(current);
                var ostr = inS.startWriteParams();
                StringOptHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getDynamicHelpItems(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getDynamicHelpItems(current);
                var ostr = inS.startWriteParams();
                DynamicHelpItemSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_runAction(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_actionName;
                iceP_actionName = istr.readString();
                inS.endReadParams();
                obj.runAction(iceP_actionName, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getAdditionalSockets(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getAdditionalSockets(current);
                var ostr = inS.startWriteParams();
                SocketInfoSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getAdditionalProperties(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getAdditionalProperties(current);
                var ostr = inS.startWriteParams();
                PropertyInfoSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_setConnection(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_socketName;
                BoxModulePrx iceP_otherModule;
                iceP_socketName = istr.readString();
                iceP_otherModule = BoxModulePrxHelper.read(istr);
                inS.endReadParams();
                obj.setConnection(iceP_socketName, iceP_otherModule, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getConnections(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_socketName;
                iceP_socketName = istr.readString();
                inS.endReadParams();
                var ret = obj.getConnections(iceP_socketName, current);
                var ostr = inS.startWriteParams();
                BoxModulePrxSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_removeConnection(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_socketName;
                string iceP_boxModuleIceIdentity;
                iceP_socketName = istr.readString();
                iceP_boxModuleIceIdentity = istr.readString();
                inS.endReadParams();
                obj.removeConnection(iceP_socketName, iceP_boxModuleIceIdentity, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_setProperty(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_propertyName;
                PropertyValue iceP_value;
                iceP_value = null;
                iceP_propertyName = istr.readString();
                istr.readValue((PropertyValue v) => {iceP_value = v; });
                istr.readPendingValues();
                inS.endReadParams();
                obj.setProperty(iceP_propertyName, iceP_value, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getProperty(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_propertyName;
                iceP_propertyName = istr.readString();
                inS.endReadParams();
                var ret = obj.getProperty(iceP_propertyName, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getPropertyOptions(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_propertyName;
                iceP_propertyName = istr.readString();
                inS.endReadParams();
                var ret = obj.getPropertyOptions(iceP_propertyName, current);
                var ostr = inS.startWriteParams();
                SelectStringSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_isPropertySet(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_propertyName;
                iceP_propertyName = istr.readString();
                inS.endReadParams();
                var ret = obj.isPropertySet(iceP_propertyName, current);
                var ostr = inS.startWriteParams();
                ostr.writeBool(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getModulesAskingForCreation(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getModulesAskingForCreation(current);
                var ostr = inS.startWriteParams();
                ModulesAskingForCreationSeqHelper.write(ostr, ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getFunctionsIceIds(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getFunctionsIceIds(current);
                var ostr = inS.startWriteParams();
                StringSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getFunctions(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getFunctions(current);
                var ostr = inS.startWriteParams();
                ostr.writeProxy(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getMyFactory(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getMyFactory(current);
                var ostr = inS.startWriteParams();
                BoxModuleFactoryPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_validate(BoxModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                obj.validate(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "getAdditionalProperties",
                "getAdditionalSockets",
                "getConnections",
                "getDefaultUserLabel",
                "getDynamicHelpItems",
                "getFunctions",
                "getFunctionsIceIds",
                "getModulesAskingForCreation",
                "getMyFactory",
                "getProperty",
                "getPropertyOptions",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "isPropertySet",
                "removeConnection",
                "runAction",
                "setConnection",
                "setProperty",
                "validate"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getAdditionalProperties(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getAdditionalSockets(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getConnections(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_getDefaultUserLabel(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_getDynamicHelpItems(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_getFunctions(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_getFunctionsIceIds(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_getModulesAskingForCreation(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_getMyFactory(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_getProperty(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_getPropertyOptions(this, inS, current);
                    }
                    case 11:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 12:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 13:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 14:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 15:
                    {
                        return iceD_isPropertySet(this, inS, current);
                    }
                    case 16:
                    {
                        return iceD_removeConnection(this, inS, current);
                    }
                    case 17:
                    {
                        return iceD_runAction(this, inS, current);
                    }
                    case 18:
                    {
                        return iceD_setConnection(this, inS, current);
                    }
                    case 19:
                    {
                        return iceD_setProperty(this, inS, current);
                    }
                    case 20:
                    {
                        return iceD_validate(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class EntityDisp_ : global::Ice.ObjectImpl, Entity
        {
            #region Slice operations

            public abstract string getLabel(string[] localePrefs, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::Entity",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getLabel(Entity obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_localePrefs;
                iceP_localePrefs = StringSeqHelper.read(istr);
                inS.endReadParams();
                var ret = obj.getLabel(iceP_localePrefs, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getLabel",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getLabel(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class ModuleForInteractionDisp_ : global::Ice.ObjectImpl, ModuleForInteraction
        {
            #region Slice operations

            public abstract string[] getNeededConnectedSockets(global::Ice.Current current = null);

            public abstract BoxType[] getAcceptedBoxTypes(global::Ice.Current current = null);

            public abstract string getHint(string[] localePrefs, global::Ice.Current current = null);

            public abstract byte[] getHelpFile(string identifier, global::Ice.Current current = null);

            public abstract HelpFileInfo[] getHelpFileInfoSeq(string[] localePrefs, global::Ice.Current current = null);

            public abstract DynamicHelpItem[] getDynamicHelpItems(string[] localePrefs, global::Ice.Current current = null);

            public abstract void run(BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.Current current = null);

            public abstract byte[] getIcon(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract string getLabel(string[] localePrefs, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::Entity",
                "::Ferda::Modules::ModuleForInteraction",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getNeededConnectedSockets(ModuleForInteraction obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getNeededConnectedSockets(current);
                var ostr = inS.startWriteParams();
                StringSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getAcceptedBoxTypes(ModuleForInteraction obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getAcceptedBoxTypes(current);
                var ostr = inS.startWriteParams();
                BoxTypeSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getHint(ModuleForInteraction obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_localePrefs;
                iceP_localePrefs = StringSeqHelper.read(istr);
                inS.endReadParams();
                var ret = obj.getHint(iceP_localePrefs, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getHelpFile(ModuleForInteraction obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_identifier;
                iceP_identifier = istr.readString();
                inS.endReadParams();
                var ret = obj.getHelpFile(iceP_identifier, current);
                var ostr = inS.startWriteParams();
                ByteSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getHelpFileInfoSeq(ModuleForInteraction obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_localePrefs;
                iceP_localePrefs = StringSeqHelper.read(istr);
                inS.endReadParams();
                var ret = obj.getHelpFileInfoSeq(iceP_localePrefs, current);
                var ostr = inS.startWriteParams();
                HelpFileInfoSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getDynamicHelpItems(ModuleForInteraction obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_localePrefs;
                iceP_localePrefs = StringSeqHelper.read(istr);
                inS.endReadParams();
                var ret = obj.getDynamicHelpItems(iceP_localePrefs, current);
                var ostr = inS.startWriteParams();
                DynamicHelpItemSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_run(ModuleForInteraction obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                BoxModulePrx iceP_boxModuleParam;
                string[] iceP_localePrefs;
                global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager;
                iceP_boxModuleParam = BoxModulePrxHelper.read(istr);
                iceP_localePrefs = StringSeqHelper.read(istr);
                iceP_manager = global::Ferda.ModulesManager.ManagersEnginePrxHelper.read(istr);
                inS.endReadParams();
                obj.run(iceP_boxModuleParam, iceP_localePrefs, iceP_manager, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getIcon(ModuleForInteraction obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getIcon(current);
                var ostr = inS.startWriteParams();
                ByteSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getAcceptedBoxTypes",
                "getDynamicHelpItems",
                "getHelpFile",
                "getHelpFileInfoSeq",
                "getHint",
                "getIcon",
                "getLabel",
                "getNeededConnectedSockets",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "run"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getAcceptedBoxTypes(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getDynamicHelpItems(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getHelpFile(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_getHelpFileInfoSeq(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_getHint(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_getIcon(this, inS, current);
                    }
                    case 6:
                    {
                        return EntityDisp_.iceD_getLabel(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_getNeededConnectedSockets(this, inS, current);
                    }
                    case 8:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 9:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 10:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 11:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 12:
                    {
                        return iceD_run(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class SettingModuleDisp_ : global::Ice.ObjectImpl, SettingModule
        {
            #region Slice operations

            public abstract string getIdentifier(global::Ice.Current current = null);

            public abstract PropertyValue run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, out string about, global::Ice.Current current = null);

            public abstract string getPropertyAbout(PropertyValue value, global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract string getLabel(string[] localePrefs, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::Entity",
                "::Ferda::Modules::SettingModule",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getIdentifier(SettingModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getIdentifier(current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_run(SettingModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                PropertyValue iceP_valueBefore;
                iceP_valueBefore = null;
                string iceP_propertyName;
                BoxModulePrx iceP_boxModuleParam;
                string[] iceP_localePrefs;
                global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager;
                istr.readValue((PropertyValue v) => {iceP_valueBefore = v; });
                iceP_propertyName = istr.readString();
                iceP_boxModuleParam = BoxModulePrxHelper.read(istr);
                iceP_localePrefs = StringSeqHelper.read(istr);
                iceP_manager = global::Ferda.ModulesManager.ManagersEnginePrxHelper.read(istr);
                istr.readPendingValues();
                inS.endReadParams();
                string iceP_about;
                var ret = obj.run(iceP_valueBefore, iceP_propertyName, iceP_boxModuleParam, iceP_localePrefs, iceP_manager, out iceP_about, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(iceP_about);
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getPropertyAbout(SettingModule obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                PropertyValue iceP_value;
                iceP_value = null;
                istr.readValue((PropertyValue v) => {iceP_value = v; });
                istr.readPendingValues();
                inS.endReadParams();
                var ret = obj.getPropertyAbout(iceP_value, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getIdentifier",
                "getLabel",
                "getPropertyAbout",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "run"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getIdentifier(this, inS, current);
                    }
                    case 1:
                    {
                        return EntityDisp_.iceD_getLabel(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getPropertyAbout(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_run(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class SettingModuleWithStringAbilityDisp_ : global::Ice.ObjectImpl, SettingModuleWithStringAbility
        {
            #region Slice operations

            public abstract PropertyValue convertFromStringAbout(string about, string[] localePrefs, global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract string getLabel(string[] localePrefs, global::Ice.Current current = null);

            public abstract string getIdentifier(global::Ice.Current current = null);

            public abstract string getPropertyAbout(PropertyValue value, global::Ice.Current current = null);

            public abstract PropertyValue run(PropertyValue valueBefore, string propertyName, BoxModulePrx boxModuleParam, string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, out string about, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::Entity",
                "::Ferda::Modules::SettingModule",
                "::Ferda::Modules::SettingModuleWithStringAbility",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[2];
            }

            public static new string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_convertFromStringAbout(SettingModuleWithStringAbility obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_about;
                string[] iceP_localePrefs;
                iceP_about = istr.readString();
                iceP_localePrefs = StringSeqHelper.read(istr);
                inS.endReadParams();
                var ret = obj.convertFromStringAbout(iceP_about, iceP_localePrefs, current);
                var ostr = inS.startWriteParams();
                ostr.writeValue(ret);
                ostr.writePendingValues();
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "convertFromStringAbout",
                "getIdentifier",
                "getLabel",
                "getPropertyAbout",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "run"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_convertFromStringAbout(this, inS, current);
                    }
                    case 1:
                    {
                        return SettingModuleDisp_.iceD_getIdentifier(this, inS, current);
                    }
                    case 2:
                    {
                        return EntityDisp_.iceD_getLabel(this, inS, current);
                    }
                    case 3:
                    {
                        return SettingModuleDisp_.iceD_getPropertyAbout(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 8:
                    {
                        return SettingModuleDisp_.iceD_run(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BoxModuleFactoryDisp_ : global::Ice.ObjectImpl, BoxModuleFactory
        {
            #region Slice operations

            public abstract BoxModulePrx createBoxModule(global::Ice.Current current = null);

            public abstract void refresh(global::Ice.Current current = null);

            public abstract bool destroyIfEmpty(global::Ice.Current current = null);

            public abstract void destroyBoxModule(string boxIdentity, global::Ice.Current current = null);

            public abstract void destroy(global::Ice.Current current = null);

            public abstract SocketInfo[] getSockets(global::Ice.Current current = null);

            public abstract ActionInfo[] getActions(global::Ice.Current current = null);

            public abstract PropertyInfo[] getProperties(global::Ice.Current current = null);

            public abstract HelpFileInfo[] getHelpFileInfoSeq(global::Ice.Current current = null);

            public abstract BoxModuleFactoryCreatorPrx getMyFactoryCreator(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoxModuleFactory",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_createBoxModule(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.createBoxModule(current);
                var ostr = inS.startWriteParams();
                BoxModulePrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_refresh(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                obj.refresh(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_destroyIfEmpty(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.destroyIfEmpty(current);
                var ostr = inS.startWriteParams();
                ostr.writeBool(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_destroyBoxModule(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_boxIdentity;
                iceP_boxIdentity = istr.readString();
                inS.endReadParams();
                obj.destroyBoxModule(iceP_boxIdentity, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_destroy(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.destroy(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getSockets(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getSockets(current);
                var ostr = inS.startWriteParams();
                SocketInfoSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getActions(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getActions(current);
                var ostr = inS.startWriteParams();
                ActionInfoSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getProperties(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getProperties(current);
                var ostr = inS.startWriteParams();
                PropertyInfoSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getHelpFileInfoSeq(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getHelpFileInfoSeq(current);
                var ostr = inS.startWriteParams();
                HelpFileInfoSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getMyFactoryCreator(BoxModuleFactory obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getMyFactoryCreator(current);
                var ostr = inS.startWriteParams();
                BoxModuleFactoryCreatorPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "createBoxModule",
                "destroy",
                "destroyBoxModule",
                "destroyIfEmpty",
                "getActions",
                "getHelpFileInfoSeq",
                "getMyFactoryCreator",
                "getProperties",
                "getSockets",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "refresh"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_createBoxModule(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_destroy(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_destroyBoxModule(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_destroyIfEmpty(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_getActions(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_getHelpFileInfoSeq(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_getMyFactoryCreator(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_getProperties(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_getSockets(this, inS, current);
                    }
                    case 9:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 10:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 11:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 12:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 13:
                    {
                        return iceD_refresh(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BoxModuleFactoryCreatorDisp_ : global::Ice.ObjectImpl, BoxModuleFactoryCreator
        {
            #region Slice operations

            public abstract BoxModuleFactoryPrx createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.Current current = null);

            public abstract string getIdentifier(global::Ice.Current current = null);

            public abstract string[] getBoxModuleFunctionsIceIds(global::Ice.Current current = null);

            public abstract string[] getBoxCategories(global::Ice.Current current = null);

            public abstract string[] getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.Current current = null);

            public abstract string getHint(string[] localePrefs, global::Ice.Current current = null);

            public abstract byte[] getHelpFile(string identifier, global::Ice.Current current = null);

            public abstract byte[] getIcon(global::Ice.Current current = null);

            public abstract string getDesign(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract string getLabel(string[] localePrefs, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoxModuleFactoryCreator",
                "::Ferda::Modules::Entity",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_createBoxModuleFactory(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_localePrefs;
                global::Ferda.ModulesManager.ManagersEnginePrx iceP_manager;
                iceP_localePrefs = StringSeqHelper.read(istr);
                iceP_manager = global::Ferda.ModulesManager.ManagersEnginePrxHelper.read(istr);
                inS.endReadParams();
                var ret = obj.createBoxModuleFactory(iceP_localePrefs, iceP_manager, current);
                var ostr = inS.startWriteParams();
                BoxModuleFactoryPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getIdentifier(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getIdentifier(current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getBoxModuleFunctionsIceIds(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getBoxModuleFunctionsIceIds(current);
                var ostr = inS.startWriteParams();
                StringSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getBoxCategories(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getBoxCategories(current);
                var ostr = inS.startWriteParams();
                StringSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getBoxCategoryLocalizedName(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_locale;
                string iceP_categoryName;
                iceP_locale = istr.readString();
                iceP_categoryName = istr.readString();
                inS.endReadParams();
                var ret = obj.getBoxCategoryLocalizedName(iceP_locale, iceP_categoryName, current);
                var ostr = inS.startWriteParams();
                StringOptHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getHint(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string[] iceP_localePrefs;
                iceP_localePrefs = StringSeqHelper.read(istr);
                inS.endReadParams();
                var ret = obj.getHint(iceP_localePrefs, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getHelpFile(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_identifier;
                iceP_identifier = istr.readString();
                inS.endReadParams();
                var ret = obj.getHelpFile(iceP_identifier, current);
                var ostr = inS.startWriteParams();
                ByteSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getIcon(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getIcon(current);
                var ostr = inS.startWriteParams();
                ByteSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getDesign(BoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getDesign(current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "createBoxModuleFactory",
                "getBoxCategories",
                "getBoxCategoryLocalizedName",
                "getBoxModuleFunctionsIceIds",
                "getDesign",
                "getHelpFile",
                "getHint",
                "getIcon",
                "getIdentifier",
                "getLabel",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_createBoxModuleFactory(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getBoxCategories(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getBoxCategoryLocalizedName(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_getBoxModuleFunctionsIceIds(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_getDesign(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_getHelpFile(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_getHint(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_getIcon(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_getIdentifier(this, inS, current);
                    }
                    case 9:
                    {
                        return EntityDisp_.iceD_getLabel(this, inS, current);
                    }
                    case 10:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 11:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 12:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 13:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class PropertyBoxModuleFactoryCreatorDisp_ : global::Ice.ObjectImpl, PropertyBoxModuleFactoryCreator
        {
            #region Slice operations

            public abstract string getPropertyClassIceId(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract BoxModuleFactoryPrx createBoxModuleFactory(string[] localePrefs, global::Ferda.ModulesManager.ManagersEnginePrx manager, global::Ice.Current current = null);

            public abstract string[] getBoxCategories(global::Ice.Current current = null);

            public abstract string[] getBoxCategoryLocalizedName(string locale, string categoryName, global::Ice.Current current = null);

            public abstract string[] getBoxModuleFunctionsIceIds(global::Ice.Current current = null);

            public abstract string getDesign(global::Ice.Current current = null);

            public abstract byte[] getHelpFile(string identifier, global::Ice.Current current = null);

            public abstract string getHint(string[] localePrefs, global::Ice.Current current = null);

            public abstract byte[] getIcon(global::Ice.Current current = null);

            public abstract string getIdentifier(global::Ice.Current current = null);

            public abstract string getLabel(string[] localePrefs, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoxModuleFactoryCreator",
                "::Ferda::Modules::Entity",
                "::Ferda::Modules::PropertyBoxModuleFactoryCreator",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[2];
            }

            public static new string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getPropertyClassIceId(PropertyBoxModuleFactoryCreator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getPropertyClassIceId(current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "createBoxModuleFactory",
                "getBoxCategories",
                "getBoxCategoryLocalizedName",
                "getBoxModuleFunctionsIceIds",
                "getDesign",
                "getHelpFile",
                "getHint",
                "getIcon",
                "getIdentifier",
                "getLabel",
                "getPropertyClassIceId",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_createBoxModuleFactory(this, inS, current);
                    }
                    case 1:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_getBoxCategories(this, inS, current);
                    }
                    case 2:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_getBoxCategoryLocalizedName(this, inS, current);
                    }
                    case 3:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_getBoxModuleFunctionsIceIds(this, inS, current);
                    }
                    case 4:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_getDesign(this, inS, current);
                    }
                    case 5:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_getHelpFile(this, inS, current);
                    }
                    case 6:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_getHint(this, inS, current);
                    }
                    case 7:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_getIcon(this, inS, current);
                    }
                    case 8:
                    {
                        return BoxModuleFactoryCreatorDisp_.iceD_getIdentifier(this, inS, current);
                    }
                    case 9:
                    {
                        return EntityDisp_.iceD_getLabel(this, inS, current);
                    }
                    case 10:
                    {
                        return iceD_getPropertyClassIceId(this, inS, current);
                    }
                    case 11:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 12:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 13:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 14:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class ProgressTaskDisp_ : global::Ice.ObjectImpl, ProgressTask
        {
            #region Slice operations

            public abstract float getValue(out string message, global::Ice.Current current = null);

            public abstract void stop(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::ProgressTask",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getValue(ProgressTask obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                string iceP_message;
                var ret = obj.getValue(out iceP_message, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(iceP_message);
                ostr.writeFloat(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_stop(ProgressTask obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.stop(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "getValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "stop"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getValue(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_stop(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
