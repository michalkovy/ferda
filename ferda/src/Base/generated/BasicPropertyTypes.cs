//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `BasicPropertyTypes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ferda
{
    namespace Modules
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class PropertyValue : global::Ice.Value
        {
            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PropertyValue()
            {
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::PropertyValue";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public enum PropertyValueTypesEnum
        {
            BoolPropertyValueType,
            ShortPropertyValueType,
            IntPropertyValueType,
            LongPropertyValueType,
            FloatPropertyValueType,
            DoublePropertyValueType,
            StringPropertyValueType,
            DatePropertyValueType,
            DateTimePropertyValueType,
            TimePropertyValueType
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class PropertyValueTypesEnumHelper
        {
            public static void write(global::Ice.OutputStream ostr, PropertyValueTypesEnum v)
            {
                ostr.writeEnum((int)v, 9);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static PropertyValueTypesEnum read(global::Ice.InputStream istr)
            {
                PropertyValueTypesEnum v;
                v = (PropertyValueTypesEnum)istr.readEnum(9);
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface StringTInterface : global::Ice.Object, StringTInterfaceOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class StringT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string stringValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public StringT() : base()
            {
                this.stringValue = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public StringT(string stringValue)
            {
                this.stringValue = stringValue;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::StringT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeString(stringValue);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                stringValue = istr_.readString();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface DoubleTInterface : global::Ice.Object, DoubleTInterfaceOperations_, StringTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class DoubleT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public double doubleValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DoubleT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DoubleT(double doubleValue)
            {
                this.doubleValue = doubleValue;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::DoubleT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeDouble(doubleValue);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                doubleValue = istr_.readDouble();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface FloatTInterface : global::Ice.Object, FloatTInterfaceOperations_, DoubleTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class FloatT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public float floatValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public FloatT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public FloatT(float floatValue)
            {
                this.floatValue = floatValue;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::FloatT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeFloat(floatValue);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                floatValue = istr_.readFloat();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface LongTInterface : global::Ice.Object, LongTInterfaceOperations_, FloatTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class LongT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public long longValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public LongT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public LongT(long longValue)
            {
                this.longValue = longValue;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::LongT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeLong(longValue);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                longValue = istr_.readLong();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface IntTInterface : global::Ice.Object, IntTInterfaceOperations_, LongTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class IntT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public int intValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public IntT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public IntT(int intValue)
            {
                this.intValue = intValue;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::IntT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeInt(intValue);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                intValue = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface ShortTInterface : global::Ice.Object, ShortTInterfaceOperations_, IntTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class ShortT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short shortValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ShortT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public ShortT(short shortValue)
            {
                this.shortValue = shortValue;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::ShortT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeShort(shortValue);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                shortValue = istr_.readShort();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BoolTInterface : global::Ice.Object, BoolTInterfaceOperations_, ShortTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class BoolT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public bool boolValue;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BoolT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BoolT(bool boolValue)
            {
                this.boolValue = boolValue;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::BoolT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeBool(boolValue);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                boolValue = istr_.readBool();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface DateTimeTInterface : global::Ice.Object, DateTimeTInterfaceOperations_, StringTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class DateTimeT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short day;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short month;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public int year;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short hour;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short minute;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short second;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DateTimeT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DateTimeT(short day, short month, int year, short hour, short minute, short second)
            {
                this.day = day;
                this.month = month;
                this.year = year;
                this.hour = hour;
                this.minute = minute;
                this.second = second;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::DateTimeT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeShort(day);
                ostr_.writeShort(month);
                ostr_.writeInt(year);
                ostr_.writeShort(hour);
                ostr_.writeShort(minute);
                ostr_.writeShort(second);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                day = istr_.readShort();
                month = istr_.readShort();
                year = istr_.readInt();
                hour = istr_.readShort();
                minute = istr_.readShort();
                second = istr_.readShort();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface DateTInterface : global::Ice.Object, DateTInterfaceOperations_, DateTimeTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class DateT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short day;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short month;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public int year;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DateT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public DateT(short day, short month, int year)
            {
                this.day = day;
                this.month = month;
                this.year = year;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::DateT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeShort(day);
                ostr_.writeShort(month);
                ostr_.writeInt(year);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                day = istr_.readShort();
                month = istr_.readShort();
                year = istr_.readInt();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface TimeTInterface : global::Ice.Object, TimeTInterfaceOperations_, StringTInterface
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class TimeT : PropertyValue
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short hour;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short minute;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public short second;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public TimeT() : base()
            {
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public TimeT(short hour, short minute, short second)
            {
                this.hour = hour;
                this.minute = minute;
                this.second = second;
                ice_initialize();
            }

            #endregion

            private const string _id = "::Ferda::Modules::TimeT";

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static new string ice_staticId()
            {
                return _id;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return _id;
            }

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice(ice_staticId(), -1, false);
                ostr_.writeShort(hour);
                ostr_.writeShort(minute);
                ostr_.writeShort(second);
                ostr_.endSlice();
                base.iceWriteImpl(ostr_);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                hour = istr_.readShort();
                minute = istr_.readShort();
                second = istr_.readShort();
                istr_.endSlice();
                base.iceReadImpl(istr_);
            }

            #endregion
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_StringTInterface_getStringValue(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_DoubleTInterface_getDoubleValue(double ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_FloatTInterface_getFloatValue(float ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_LongTInterface_getLongValue(long ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_IntTInterface_getIntValue(int ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ShortTInterface_getShortValue(short ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoolTInterface_getBoolValue(bool ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_DateTimeTInterface_getDateTimeValue(int year, short month, short day, short hour, short minute, short second);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_DateTInterface_getDateValue(int year, short month, short day);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_TimeTInterface_getTimeValue(short hour, short minute, short second);
    }
}

namespace Ferda
{
    namespace Modules
    {
        public struct DateTimeTInterface_GetDateTimeValueResult
        {
            public DateTimeTInterface_GetDateTimeValueResult(int year, short month, short day, short hour, short minute, short second)
            {
                this.year = year;
                this.month = month;
                this.day = day;
                this.hour = hour;
                this.minute = minute;
                this.second = second;
            }

            public int year;
            public short month;
            public short day;
            public short hour;
            public short minute;
            public short second;
        }

        public struct DateTInterface_GetDateValueResult
        {
            public DateTInterface_GetDateValueResult(int year, short month, short day)
            {
                this.year = year;
                this.month = month;
                this.day = day;
            }

            public int year;
            public short month;
            public short day;
        }

        public struct TimeTInterface_GetTimeValueResult
        {
            public TimeTInterface_GetTimeValueResult(short hour, short minute, short second)
            {
                this.hour = hour;
                this.minute = minute;
                this.second = second;
            }

            public short hour;
            public short minute;
            public short second;
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface StringTInterfacePrx : global::Ice.ObjectPrx
        {
            string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            string end_getStringValue(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface DoubleTInterfacePrx : StringTInterfacePrx
        {
            double getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<double> getDoubleValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getDoubleValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getDoubleValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            double end_getDoubleValue(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface FloatTInterfacePrx : DoubleTInterfacePrx
        {
            float getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<float> getFloatValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getFloatValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getFloatValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            float end_getFloatValue(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface LongTInterfacePrx : FloatTInterfacePrx
        {
            long getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<long> getLongValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getLongValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getLongValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            long end_getLongValue(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface IntTInterfacePrx : LongTInterfacePrx
        {
            int getIntValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<int> getIntValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_IntTInterface_getIntValue> begin_getIntValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getIntValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getIntValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            int end_getIntValue(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ShortTInterfacePrx : IntTInterfacePrx
        {
            short getShortValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<short> getShortValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ShortTInterface_getShortValue> begin_getShortValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getShortValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getShortValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            short end_getShortValue(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoolTInterfacePrx : ShortTInterfacePrx
        {
            bool getBoolValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<bool> getBoolValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BoolTInterface_getBoolValue> begin_getBoolValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getBoolValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getBoolValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            bool end_getBoolValue(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface DateTimeTInterfacePrx : StringTInterfacePrx
        {
            void getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<DateTimeTInterface_GetDateTimeValueResult> getDateTimeValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_DateTimeTInterface_getDateTimeValue> begin_getDateTimeValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getDateTimeValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getDateTimeValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface DateTInterfacePrx : DateTimeTInterfacePrx
        {
            void getDateValue(out int year, out short month, out short day, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<DateTInterface_GetDateValueResult> getDateValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_DateTInterface_getDateValue> begin_getDateValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getDateValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getDateValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_getDateValue(out int year, out short month, out short day, global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface TimeTInterfacePrx : StringTInterfacePrx
        {
            void getTimeValue(out short hour, out short minute, out short second, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<TimeTInterface_GetTimeValueResult> getTimeValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_TimeTInterface_getTimeValue> begin_getTimeValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getTimeValue(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getTimeValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_getTimeValue(out short hour, out short minute, out short second, global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface StringTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getStringValue(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface DoubleTInterfaceOperations_ : StringTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            double getDoubleValue(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface FloatTInterfaceOperations_ : DoubleTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            float getFloatValue(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface LongTInterfaceOperations_ : FloatTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            long getLongValue(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface IntTInterfaceOperations_ : LongTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            int getIntValue(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ShortTInterfaceOperations_ : IntTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            short getShortValue(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoolTInterfaceOperations_ : ShortTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            bool getBoolValue(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface DateTimeTInterfaceOperations_ : StringTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface DateTInterfaceOperations_ : DateTimeTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void getDateValue(out int year, out short month, out short day, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface TimeTInterfaceOperations_ : StringTInterfaceOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void getTimeValue(out short hour, out short minute, out short second, global::Ice.Current current = null);
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class PropertyValueSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, PropertyValue[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeValue(v[ix]);
                    }
                }
            }

            public static PropertyValue[] read(global::Ice.InputStream istr)
            {
                PropertyValue[] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new PropertyValue[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        istr.readValue(global::IceInternal.Patcher.arrayReadValue<PropertyValue>(v, ix));
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class StringTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, StringTInterfacePrx
        {
            public StringTInterfacePrxHelper()
            {
            }

            public StringTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static StringTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                StringTInterfacePrx r = b as StringTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    StringTInterfacePrxHelper h = new StringTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                StringTInterfacePrx r = b as StringTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    StringTInterfacePrxHelper h = new StringTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        StringTInterfacePrxHelper h = new StringTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static StringTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        StringTInterfacePrxHelper h = new StringTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static StringTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                StringTInterfacePrx r = b as StringTInterfacePrx;
                if(r == null)
                {
                    StringTInterfacePrxHelper h = new StringTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static StringTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                StringTInterfacePrxHelper h = new StringTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, StringTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static StringTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    StringTInterfacePrxHelper result = new StringTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class DoubleTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, DoubleTInterfacePrx
        {
            public DoubleTInterfacePrxHelper()
            {
            }

            public DoubleTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDoubleValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double> getDoubleValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDoubleValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double> _iceI_getDoubleValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDoubleValue_name = "getDoubleValue";

            private void _iceI_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double>(completed);
                outAsync.invoke(
                    _getDoubleValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        double ret;
                        ret = istr.readDouble();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDoubleValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(context, callback, cookie, false);
            }

            public double end_getDoubleValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDoubleValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DoubleTInterface_getDoubleValue, double>(
                    (Callback_DoubleTInterface_getDoubleValue cb, double ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDoubleValue_name, cookie, completedCallback);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static DoubleTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                DoubleTInterfacePrx r = b as DoubleTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    DoubleTInterfacePrxHelper h = new DoubleTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DoubleTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                DoubleTInterfacePrx r = b as DoubleTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    DoubleTInterfacePrxHelper h = new DoubleTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DoubleTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        DoubleTInterfacePrxHelper h = new DoubleTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static DoubleTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        DoubleTInterfacePrxHelper h = new DoubleTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static DoubleTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                DoubleTInterfacePrx r = b as DoubleTInterfacePrx;
                if(r == null)
                {
                    DoubleTInterfacePrxHelper h = new DoubleTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DoubleTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                DoubleTInterfacePrxHelper h = new DoubleTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, DoubleTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static DoubleTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    DoubleTInterfacePrxHelper result = new DoubleTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class FloatTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, FloatTInterfacePrx
        {
            public FloatTInterfacePrxHelper()
            {
            }

            public FloatTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDoubleValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getFloatValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double> getDoubleValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDoubleValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double> _iceI_getDoubleValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDoubleValue_name = "getDoubleValue";

            private void _iceI_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double>(completed);
                outAsync.invoke(
                    _getDoubleValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        double ret;
                        ret = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float> getFloatValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getFloatValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float> _iceI_getFloatValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getFloatValue_name = "getFloatValue";

            private void _iceI_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float>(completed);
                outAsync.invoke(
                    _getFloatValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        float ret;
                        ret = istr.readFloat();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDoubleValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(context, callback, cookie, false);
            }

            public double end_getDoubleValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDoubleValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DoubleTInterface_getDoubleValue, double>(
                    (Callback_DoubleTInterface_getDoubleValue cb, double ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDoubleValue_name, cookie, completedCallback);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getFloatValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(context, callback, cookie, false);
            }

            public float end_getFloatValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getFloatValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FloatTInterface_getFloatValue, float>(
                    (Callback_FloatTInterface_getFloatValue cb, float ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getFloatValue_name, cookie, completedCallback);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static FloatTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                FloatTInterfacePrx r = b as FloatTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    FloatTInterfacePrxHelper h = new FloatTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static FloatTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                FloatTInterfacePrx r = b as FloatTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    FloatTInterfacePrxHelper h = new FloatTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static FloatTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        FloatTInterfacePrxHelper h = new FloatTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static FloatTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        FloatTInterfacePrxHelper h = new FloatTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static FloatTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                FloatTInterfacePrx r = b as FloatTInterfacePrx;
                if(r == null)
                {
                    FloatTInterfacePrxHelper h = new FloatTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static FloatTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                FloatTInterfacePrxHelper h = new FloatTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, FloatTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static FloatTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    FloatTInterfacePrxHelper result = new FloatTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class LongTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, LongTInterfacePrx
        {
            public LongTInterfacePrxHelper()
            {
            }

            public LongTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDoubleValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getFloatValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLongValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double> getDoubleValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDoubleValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double> _iceI_getDoubleValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDoubleValue_name = "getDoubleValue";

            private void _iceI_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double>(completed);
                outAsync.invoke(
                    _getDoubleValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        double ret;
                        ret = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float> getFloatValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getFloatValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float> _iceI_getFloatValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getFloatValue_name = "getFloatValue";

            private void _iceI_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float>(completed);
                outAsync.invoke(
                    _getFloatValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        float ret;
                        ret = istr.readFloat();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<long> getLongValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLongValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long> _iceI_getLongValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLongValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                _iceI_getLongValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLongValue_name = "getLongValue";

            private void _iceI_getLongValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long>(completed);
                outAsync.invoke(
                    _getLongValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        long ret;
                        ret = istr.readLong();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDoubleValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(context, callback, cookie, false);
            }

            public double end_getDoubleValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDoubleValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DoubleTInterface_getDoubleValue, double>(
                    (Callback_DoubleTInterface_getDoubleValue cb, double ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDoubleValue_name, cookie, completedCallback);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getFloatValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(context, callback, cookie, false);
            }

            public float end_getFloatValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getFloatValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FloatTInterface_getFloatValue, float>(
                    (Callback_FloatTInterface_getFloatValue cb, float ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getFloatValue_name, cookie, completedCallback);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLongValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLongValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLongValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLongValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLongValue(context, callback, cookie, false);
            }

            public long end_getLongValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLongValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLongValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_LongTInterface_getLongValue, long>(
                    (Callback_LongTInterface_getLongValue cb, long ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLongValue_name, cookie, completedCallback);
                _iceI_getLongValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static LongTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                LongTInterfacePrx r = b as LongTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    LongTInterfacePrxHelper h = new LongTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static LongTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                LongTInterfacePrx r = b as LongTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    LongTInterfacePrxHelper h = new LongTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static LongTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        LongTInterfacePrxHelper h = new LongTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static LongTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        LongTInterfacePrxHelper h = new LongTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static LongTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                LongTInterfacePrx r = b as LongTInterfacePrx;
                if(r == null)
                {
                    LongTInterfacePrxHelper h = new LongTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static LongTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                LongTInterfacePrxHelper h = new LongTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::LongTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, LongTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static LongTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    LongTInterfacePrxHelper result = new LongTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class IntTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, IntTInterfacePrx
        {
            public IntTInterfacePrxHelper()
            {
            }

            public IntTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDoubleValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getFloatValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLongValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int getIntValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIntValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double> getDoubleValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDoubleValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double> _iceI_getDoubleValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDoubleValue_name = "getDoubleValue";

            private void _iceI_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double>(completed);
                outAsync.invoke(
                    _getDoubleValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        double ret;
                        ret = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float> getFloatValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getFloatValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float> _iceI_getFloatValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getFloatValue_name = "getFloatValue";

            private void _iceI_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float>(completed);
                outAsync.invoke(
                    _getFloatValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        float ret;
                        ret = istr.readFloat();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<long> getLongValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLongValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long> _iceI_getLongValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLongValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                _iceI_getLongValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLongValue_name = "getLongValue";

            private void _iceI_getLongValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long>(completed);
                outAsync.invoke(
                    _getLongValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        long ret;
                        ret = istr.readLong();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int> getIntValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIntValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_getIntValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIntValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_getIntValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIntValue_name = "getIntValue";

            private void _iceI_getIntValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _getIntValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDoubleValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(context, callback, cookie, false);
            }

            public double end_getDoubleValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDoubleValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DoubleTInterface_getDoubleValue, double>(
                    (Callback_DoubleTInterface_getDoubleValue cb, double ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDoubleValue_name, cookie, completedCallback);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getFloatValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(context, callback, cookie, false);
            }

            public float end_getFloatValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getFloatValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FloatTInterface_getFloatValue, float>(
                    (Callback_FloatTInterface_getFloatValue cb, float ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getFloatValue_name, cookie, completedCallback);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLongValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLongValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLongValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLongValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLongValue(context, callback, cookie, false);
            }

            public long end_getLongValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLongValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLongValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_LongTInterface_getLongValue, long>(
                    (Callback_LongTInterface_getLongValue cb, long ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLongValue_name, cookie, completedCallback);
                _iceI_getLongValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_IntTInterface_getIntValue> begin_getIntValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIntValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIntValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIntValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIntValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIntValue(context, callback, cookie, false);
            }

            public int end_getIntValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIntValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_IntTInterface_getIntValue> begin_getIntValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIntValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_IntTInterface_getIntValue, int>(
                    (Callback_IntTInterface_getIntValue cb, int ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIntValue_name, cookie, completedCallback);
                _iceI_getIntValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static IntTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IntTInterfacePrx r = b as IntTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    IntTInterfacePrxHelper h = new IntTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IntTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                IntTInterfacePrx r = b as IntTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    IntTInterfacePrxHelper h = new IntTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IntTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        IntTInterfacePrxHelper h = new IntTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IntTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        IntTInterfacePrxHelper h = new IntTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IntTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IntTInterfacePrx r = b as IntTInterfacePrx;
                if(r == null)
                {
                    IntTInterfacePrxHelper h = new IntTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IntTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                IntTInterfacePrxHelper h = new IntTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::IntTInterface",
                "::Ferda::Modules::LongTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, IntTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static IntTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    IntTInterfacePrxHelper result = new IntTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class ShortTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, ShortTInterfacePrx
        {
            public ShortTInterfacePrxHelper()
            {
            }

            public ShortTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDoubleValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getFloatValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLongValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int getIntValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIntValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public short getShortValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getShortValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double> getDoubleValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDoubleValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double> _iceI_getDoubleValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDoubleValue_name = "getDoubleValue";

            private void _iceI_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double>(completed);
                outAsync.invoke(
                    _getDoubleValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        double ret;
                        ret = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float> getFloatValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getFloatValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float> _iceI_getFloatValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getFloatValue_name = "getFloatValue";

            private void _iceI_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float>(completed);
                outAsync.invoke(
                    _getFloatValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        float ret;
                        ret = istr.readFloat();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<long> getLongValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLongValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long> _iceI_getLongValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLongValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                _iceI_getLongValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLongValue_name = "getLongValue";

            private void _iceI_getLongValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long>(completed);
                outAsync.invoke(
                    _getLongValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        long ret;
                        ret = istr.readLong();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int> getIntValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIntValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_getIntValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIntValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_getIntValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIntValue_name = "getIntValue";

            private void _iceI_getIntValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _getIntValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<short> getShortValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getShortValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<short> _iceI_getShortValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getShortValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<short>(progress, cancel);
                _iceI_getShortValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getShortValue_name = "getShortValue";

            private void _iceI_getShortValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<short>(completed);
                outAsync.invoke(
                    _getShortValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        short ret;
                        ret = istr.readShort();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDoubleValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(context, callback, cookie, false);
            }

            public double end_getDoubleValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDoubleValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DoubleTInterface_getDoubleValue, double>(
                    (Callback_DoubleTInterface_getDoubleValue cb, double ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDoubleValue_name, cookie, completedCallback);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getFloatValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(context, callback, cookie, false);
            }

            public float end_getFloatValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getFloatValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FloatTInterface_getFloatValue, float>(
                    (Callback_FloatTInterface_getFloatValue cb, float ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getFloatValue_name, cookie, completedCallback);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLongValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLongValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLongValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLongValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLongValue(context, callback, cookie, false);
            }

            public long end_getLongValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLongValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLongValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_LongTInterface_getLongValue, long>(
                    (Callback_LongTInterface_getLongValue cb, long ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLongValue_name, cookie, completedCallback);
                _iceI_getLongValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_IntTInterface_getIntValue> begin_getIntValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIntValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIntValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIntValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIntValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIntValue(context, callback, cookie, false);
            }

            public int end_getIntValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIntValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_IntTInterface_getIntValue> begin_getIntValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIntValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_IntTInterface_getIntValue, int>(
                    (Callback_IntTInterface_getIntValue cb, int ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIntValue_name, cookie, completedCallback);
                _iceI_getIntValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ShortTInterface_getShortValue> begin_getShortValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getShortValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getShortValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getShortValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getShortValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getShortValue(context, callback, cookie, false);
            }

            public short end_getShortValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getShortValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<short>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ShortTInterface_getShortValue> begin_getShortValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getShortValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ShortTInterface_getShortValue, short>(
                    (Callback_ShortTInterface_getShortValue cb, short ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getShortValue_name, cookie, completedCallback);
                _iceI_getShortValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ShortTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ShortTInterfacePrx r = b as ShortTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ShortTInterfacePrxHelper h = new ShortTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ShortTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ShortTInterfacePrx r = b as ShortTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ShortTInterfacePrxHelper h = new ShortTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ShortTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ShortTInterfacePrxHelper h = new ShortTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ShortTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ShortTInterfacePrxHelper h = new ShortTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ShortTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ShortTInterfacePrx r = b as ShortTInterfacePrx;
                if(r == null)
                {
                    ShortTInterfacePrxHelper h = new ShortTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ShortTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ShortTInterfacePrxHelper h = new ShortTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::IntTInterface",
                "::Ferda::Modules::LongTInterface",
                "::Ferda::Modules::ShortTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[4];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ShortTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static ShortTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ShortTInterfacePrxHelper result = new ShortTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BoolTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, BoolTInterfacePrx
        {
            public BoolTInterfacePrxHelper()
            {
            }

            public BoolTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public double getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getDoubleValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public float getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getFloatValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public long getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLongValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int getIntValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getIntValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public short getShortValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getShortValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public bool getBoolValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoolValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<double> getDoubleValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDoubleValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<double> _iceI_getDoubleValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDoubleValue_name = "getDoubleValue";

            private void _iceI_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<double>(completed);
                outAsync.invoke(
                    _getDoubleValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        double ret;
                        ret = istr.readDouble();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<float> getFloatValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getFloatValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<float> _iceI_getFloatValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getFloatValue_name = "getFloatValue";

            private void _iceI_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<float>(completed);
                outAsync.invoke(
                    _getFloatValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        float ret;
                        ret = istr.readFloat();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<long> getLongValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLongValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<long> _iceI_getLongValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLongValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<long>(progress, cancel);
                _iceI_getLongValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLongValue_name = "getLongValue";

            private void _iceI_getLongValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<long>(completed);
                outAsync.invoke(
                    _getLongValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        long ret;
                        ret = istr.readLong();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int> getIntValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getIntValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_getIntValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getIntValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_getIntValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getIntValue_name = "getIntValue";

            private void _iceI_getIntValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _getIntValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<short> getShortValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getShortValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<short> _iceI_getShortValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getShortValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<short>(progress, cancel);
                _iceI_getShortValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getShortValue_name = "getShortValue";

            private void _iceI_getShortValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<short>(completed);
                outAsync.invoke(
                    _getShortValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        short ret;
                        ret = istr.readShort();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<bool> getBoolValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoolValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<bool> _iceI_getBoolValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoolValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                _iceI_getBoolValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoolValue_name = "getBoolValue";

            private void _iceI_getBoolValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<bool>(completed);
                outAsync.invoke(
                    _getBoolValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        bool ret;
                        ret = istr.readBool();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDoubleValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDoubleValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDoubleValue(context, callback, cookie, false);
            }

            public double end_getDoubleValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDoubleValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_DoubleTInterface_getDoubleValue> begin_getDoubleValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDoubleValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DoubleTInterface_getDoubleValue, double>(
                    (Callback_DoubleTInterface_getDoubleValue cb, double ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getDoubleValue_name, cookie, completedCallback);
                _iceI_getDoubleValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getFloatValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getFloatValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFloatValue(context, callback, cookie, false);
            }

            public float end_getFloatValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getFloatValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_FloatTInterface_getFloatValue> begin_getFloatValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getFloatValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FloatTInterface_getFloatValue, float>(
                    (Callback_FloatTInterface_getFloatValue cb, float ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getFloatValue_name, cookie, completedCallback);
                _iceI_getFloatValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLongValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLongValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLongValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLongValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLongValue(context, callback, cookie, false);
            }

            public long end_getLongValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLongValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<long>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_LongTInterface_getLongValue> begin_getLongValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLongValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_LongTInterface_getLongValue, long>(
                    (Callback_LongTInterface_getLongValue cb, long ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getLongValue_name, cookie, completedCallback);
                _iceI_getLongValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_IntTInterface_getIntValue> begin_getIntValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getIntValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getIntValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIntValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getIntValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getIntValue(context, callback, cookie, false);
            }

            public int end_getIntValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIntValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_IntTInterface_getIntValue> begin_getIntValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getIntValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_IntTInterface_getIntValue, int>(
                    (Callback_IntTInterface_getIntValue cb, int ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getIntValue_name, cookie, completedCallback);
                _iceI_getIntValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ShortTInterface_getShortValue> begin_getShortValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getShortValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getShortValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getShortValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getShortValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getShortValue(context, callback, cookie, false);
            }

            public short end_getShortValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getShortValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<short>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ShortTInterface_getShortValue> begin_getShortValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getShortValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ShortTInterface_getShortValue, short>(
                    (Callback_ShortTInterface_getShortValue cb, short ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getShortValue_name, cookie, completedCallback);
                _iceI_getShortValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoolTInterface_getBoolValue> begin_getBoolValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoolValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoolValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoolValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoolValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoolValue(context, callback, cookie, false);
            }

            public bool end_getBoolValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoolValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoolTInterface_getBoolValue> begin_getBoolValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoolValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoolTInterface_getBoolValue, bool>(
                    (Callback_BoolTInterface_getBoolValue cb, bool ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoolValue_name, cookie, completedCallback);
                _iceI_getBoolValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BoolTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoolTInterfacePrx r = b as BoolTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BoolTInterfacePrxHelper h = new BoolTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoolTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BoolTInterfacePrx r = b as BoolTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BoolTInterfacePrxHelper h = new BoolTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoolTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BoolTInterfacePrxHelper h = new BoolTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoolTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BoolTInterfacePrxHelper h = new BoolTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoolTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoolTInterfacePrx r = b as BoolTInterfacePrx;
                if(r == null)
                {
                    BoolTInterfacePrxHelper h = new BoolTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoolTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BoolTInterfacePrxHelper h = new BoolTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoolTInterface",
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::IntTInterface",
                "::Ferda::Modules::LongTInterface",
                "::Ferda::Modules::ShortTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BoolTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static BoolTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BoolTInterfacePrxHelper result = new BoolTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class DateTimeTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, DateTimeTInterfacePrx
        {
            public DateTimeTInterfacePrxHelper()
            {
            }

            public DateTimeTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_getDateTimeValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    year = result_.year;
                    month = result_.month;
                    day = result_.day;
                    hour = result_.hour;
                    minute = result_.minute;
                    second = result_.second;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<DateTimeTInterface_GetDateTimeValueResult> getDateTimeValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDateTimeValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<DateTimeTInterface_GetDateTimeValueResult> _iceI_getDateTimeValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDateTimeValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<DateTimeTInterface_GetDateTimeValueResult>(progress, cancel);
                _iceI_getDateTimeValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDateTimeValue_name = "getDateTimeValue";

            private void _iceI_getDateTimeValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<DateTimeTInterface_GetDateTimeValueResult>(completed);
                outAsync.invoke(
                    _getDateTimeValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        DateTimeTInterface_GetDateTimeValueResult ret = new DateTimeTInterface_GetDateTimeValueResult();
                        ret.year = istr.readInt();
                        ret.month = istr.readShort();
                        ret.day = istr.readShort();
                        ret.hour = istr.readShort();
                        ret.minute = istr.readShort();
                        ret.second = istr.readShort();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DateTimeTInterface_getDateTimeValue> begin_getDateTimeValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDateTimeValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDateTimeValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDateTimeValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDateTimeValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDateTimeValue(context, callback, cookie, false);
            }

            public void end_getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDateTimeValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<DateTimeTInterface_GetDateTimeValueResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                year = result_.year;
                month = result_.month;
                day = result_.day;
                hour = result_.hour;
                minute = result_.minute;
                second = result_.second;
            }

            private global::Ice.AsyncResult<Callback_DateTimeTInterface_getDateTimeValue> begin_getDateTimeValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDateTimeValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DateTimeTInterface_getDateTimeValue, DateTimeTInterface_GetDateTimeValueResult>(
                    (Callback_DateTimeTInterface_getDateTimeValue cb, DateTimeTInterface_GetDateTimeValueResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.year, ret.month, ret.day, ret.hour, ret.minute, ret.second);
                        }
                    },
                    this, _getDateTimeValue_name, cookie, completedCallback);
                _iceI_getDateTimeValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static DateTimeTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                DateTimeTInterfacePrx r = b as DateTimeTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    DateTimeTInterfacePrxHelper h = new DateTimeTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DateTimeTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                DateTimeTInterfacePrx r = b as DateTimeTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    DateTimeTInterfacePrxHelper h = new DateTimeTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DateTimeTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        DateTimeTInterfacePrxHelper h = new DateTimeTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static DateTimeTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        DateTimeTInterfacePrxHelper h = new DateTimeTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static DateTimeTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                DateTimeTInterfacePrx r = b as DateTimeTInterfacePrx;
                if(r == null)
                {
                    DateTimeTInterfacePrxHelper h = new DateTimeTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DateTimeTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                DateTimeTInterfacePrxHelper h = new DateTimeTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DateTimeTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, DateTimeTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static DateTimeTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    DateTimeTInterfacePrxHelper result = new DateTimeTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class DateTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, DateTInterfacePrx
        {
            public DateTInterfacePrxHelper()
            {
            }

            public DateTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_getDateTimeValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    year = result_.year;
                    month = result_.month;
                    day = result_.day;
                    hour = result_.hour;
                    minute = result_.minute;
                    second = result_.second;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void getDateValue(out int year, out short month, out short day, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_getDateValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    year = result_.year;
                    month = result_.month;
                    day = result_.day;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<DateTimeTInterface_GetDateTimeValueResult> getDateTimeValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDateTimeValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<DateTimeTInterface_GetDateTimeValueResult> _iceI_getDateTimeValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDateTimeValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<DateTimeTInterface_GetDateTimeValueResult>(progress, cancel);
                _iceI_getDateTimeValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDateTimeValue_name = "getDateTimeValue";

            private void _iceI_getDateTimeValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<DateTimeTInterface_GetDateTimeValueResult>(completed);
                outAsync.invoke(
                    _getDateTimeValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        DateTimeTInterface_GetDateTimeValueResult ret = new DateTimeTInterface_GetDateTimeValueResult();
                        ret.year = istr.readInt();
                        ret.month = istr.readShort();
                        ret.day = istr.readShort();
                        ret.hour = istr.readShort();
                        ret.minute = istr.readShort();
                        ret.second = istr.readShort();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<DateTInterface_GetDateValueResult> getDateValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getDateValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<DateTInterface_GetDateValueResult> _iceI_getDateValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getDateValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<DateTInterface_GetDateValueResult>(progress, cancel);
                _iceI_getDateValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getDateValue_name = "getDateValue";

            private void _iceI_getDateValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<DateTInterface_GetDateValueResult>(completed);
                outAsync.invoke(
                    _getDateValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        DateTInterface_GetDateValueResult ret = new DateTInterface_GetDateValueResult();
                        ret.year = istr.readInt();
                        ret.month = istr.readShort();
                        ret.day = istr.readShort();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DateTimeTInterface_getDateTimeValue> begin_getDateTimeValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDateTimeValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDateTimeValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDateTimeValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDateTimeValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDateTimeValue(context, callback, cookie, false);
            }

            public void end_getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDateTimeValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<DateTimeTInterface_GetDateTimeValueResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                year = result_.year;
                month = result_.month;
                day = result_.day;
                hour = result_.hour;
                minute = result_.minute;
                second = result_.second;
            }

            private global::Ice.AsyncResult<Callback_DateTimeTInterface_getDateTimeValue> begin_getDateTimeValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDateTimeValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DateTimeTInterface_getDateTimeValue, DateTimeTInterface_GetDateTimeValueResult>(
                    (Callback_DateTimeTInterface_getDateTimeValue cb, DateTimeTInterface_GetDateTimeValueResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.year, ret.month, ret.day, ret.hour, ret.minute, ret.second);
                        }
                    },
                    this, _getDateTimeValue_name, cookie, completedCallback);
                _iceI_getDateTimeValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_DateTInterface_getDateValue> begin_getDateValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getDateValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getDateValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDateValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getDateValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getDateValue(context, callback, cookie, false);
            }

            public void end_getDateValue(out int year, out short month, out short day, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDateValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<DateTInterface_GetDateValueResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                year = result_.year;
                month = result_.month;
                day = result_.day;
            }

            private global::Ice.AsyncResult<Callback_DateTInterface_getDateValue> begin_getDateValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getDateValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_DateTInterface_getDateValue, DateTInterface_GetDateValueResult>(
                    (Callback_DateTInterface_getDateValue cb, DateTInterface_GetDateValueResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.year, ret.month, ret.day);
                        }
                    },
                    this, _getDateValue_name, cookie, completedCallback);
                _iceI_getDateValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static DateTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                DateTInterfacePrx r = b as DateTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    DateTInterfacePrxHelper h = new DateTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DateTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                DateTInterfacePrx r = b as DateTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    DateTInterfacePrxHelper h = new DateTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DateTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        DateTInterfacePrxHelper h = new DateTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static DateTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        DateTInterfacePrxHelper h = new DateTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static DateTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                DateTInterfacePrx r = b as DateTInterfacePrx;
                if(r == null)
                {
                    DateTInterfacePrxHelper h = new DateTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static DateTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                DateTInterfacePrxHelper h = new DateTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DateTInterface",
                "::Ferda::Modules::DateTimeTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, DateTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static DateTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    DateTInterfacePrxHelper result = new DateTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class TimeTInterfacePrxHelper : global::Ice.ObjectPrxHelperBase, TimeTInterfacePrx
        {
            public TimeTInterfacePrxHelper()
            {
            }

            public TimeTInterfacePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getStringValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void getTimeValue(out short hour, out short minute, out short second, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    var result_ = _iceI_getTimeValueAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                    hour = result_.hour;
                    minute = result_.minute;
                    second = result_.second;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getStringValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getStringValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getStringValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getStringValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getStringValue_name = "getStringValue";

            private void _iceI_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getStringValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<TimeTInterface_GetTimeValueResult> getTimeValueAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getTimeValueAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<TimeTInterface_GetTimeValueResult> _iceI_getTimeValueAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getTimeValue_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<TimeTInterface_GetTimeValueResult>(progress, cancel);
                _iceI_getTimeValue(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getTimeValue_name = "getTimeValue";

            private void _iceI_getTimeValue(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<TimeTInterface_GetTimeValueResult>(completed);
                outAsync.invoke(
                    _getTimeValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        TimeTInterface_GetTimeValueResult ret = new TimeTInterface_GetTimeValueResult();
                        ret.hour = istr.readShort();
                        ret.minute = istr.readShort();
                        ret.second = istr.readShort();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getStringValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getStringValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getStringValue(context, callback, cookie, false);
            }

            public string end_getStringValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getStringValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_StringTInterface_getStringValue> begin_getStringValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getStringValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_StringTInterface_getStringValue, string>(
                    (Callback_StringTInterface_getStringValue cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getStringValue_name, cookie, completedCallback);
                _iceI_getStringValue(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_TimeTInterface_getTimeValue> begin_getTimeValue(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getTimeValue(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getTimeValue(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getTimeValue(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getTimeValue(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getTimeValue(context, callback, cookie, false);
            }

            public void end_getTimeValue(out short hour, out short minute, out short second, global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTimeValue_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<TimeTInterface_GetTimeValueResult>)resultI_.OutgoingAsync;
                var result_ = outgoing_.getResult(resultI_.wait());
                hour = result_.hour;
                minute = result_.minute;
                second = result_.second;
            }

            private global::Ice.AsyncResult<Callback_TimeTInterface_getTimeValue> begin_getTimeValue(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getTimeValue_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_TimeTInterface_getTimeValue, TimeTInterface_GetTimeValueResult>(
                    (Callback_TimeTInterface_getTimeValue cb, TimeTInterface_GetTimeValueResult ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret.hour, ret.minute, ret.second);
                        }
                    },
                    this, _getTimeValue_name, cookie, completedCallback);
                _iceI_getTimeValue(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static TimeTInterfacePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TimeTInterfacePrx r = b as TimeTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    TimeTInterfacePrxHelper h = new TimeTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TimeTInterfacePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                TimeTInterfacePrx r = b as TimeTInterfacePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    TimeTInterfacePrxHelper h = new TimeTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TimeTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        TimeTInterfacePrxHelper h = new TimeTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TimeTInterfacePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        TimeTInterfacePrxHelper h = new TimeTInterfacePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static TimeTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                TimeTInterfacePrx r = b as TimeTInterfacePrx;
                if(r == null)
                {
                    TimeTInterfacePrxHelper h = new TimeTInterfacePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static TimeTInterfacePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                TimeTInterfacePrxHelper h = new TimeTInterfacePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::StringTInterface",
                "::Ferda::Modules::TimeTInterface",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, TimeTInterfacePrx v)
            {
                ostr.writeProxy(v);
            }

            public static TimeTInterfacePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    TimeTInterfacePrxHelper result = new TimeTInterfacePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ferda
{
    namespace Modules
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class StringTInterfaceDisp_ : global::Ice.ObjectImpl, StringTInterface
        {
            #region Slice operations

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getStringValue(StringTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getStringValue(current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getStringValue(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class StringTInterfaceTie_ : StringTInterfaceDisp_, global::Ice.TieBase
        {
            public StringTInterfaceTie_()
            {
            }

            public StringTInterfaceTie_(StringTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (StringTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is StringTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((StringTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((StringTInterfaceTie_)rhs)._ice_delegate);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private StringTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class DoubleTInterfaceDisp_ : global::Ice.ObjectImpl, DoubleTInterface
        {
            #region Slice operations

            public abstract double getDoubleValue(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getDoubleValue(DoubleTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getDoubleValue(current);
                var ostr = inS.startWriteParams();
                ostr.writeDouble(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getDoubleValue",
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getDoubleValue(this, inS, current);
                    }
                    case 1:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class DoubleTInterfaceTie_ : DoubleTInterfaceDisp_, global::Ice.TieBase
        {
            public DoubleTInterfaceTie_()
            {
            }

            public DoubleTInterfaceTie_(DoubleTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (DoubleTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is DoubleTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((DoubleTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((DoubleTInterfaceTie_)rhs)._ice_delegate);
            }

            public override double getDoubleValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getDoubleValue(current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private DoubleTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class FloatTInterfaceDisp_ : global::Ice.ObjectImpl, FloatTInterface
        {
            #region Slice operations

            public abstract float getFloatValue(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract double getDoubleValue(global::Ice.Current current = null);

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getFloatValue(FloatTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getFloatValue(current);
                var ostr = inS.startWriteParams();
                ostr.writeFloat(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getDoubleValue",
                "getFloatValue",
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return DoubleTInterfaceDisp_.iceD_getDoubleValue(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getFloatValue(this, inS, current);
                    }
                    case 2:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class FloatTInterfaceTie_ : FloatTInterfaceDisp_, global::Ice.TieBase
        {
            public FloatTInterfaceTie_()
            {
            }

            public FloatTInterfaceTie_(FloatTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (FloatTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is FloatTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((FloatTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((FloatTInterfaceTie_)rhs)._ice_delegate);
            }

            public override float getFloatValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getFloatValue(current);
            }

            public override double getDoubleValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getDoubleValue(current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private FloatTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class LongTInterfaceDisp_ : global::Ice.ObjectImpl, LongTInterface
        {
            #region Slice operations

            public abstract long getLongValue(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract double getDoubleValue(global::Ice.Current current = null);

            public abstract float getFloatValue(global::Ice.Current current = null);

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::LongTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[2];
            }

            public static new string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getLongValue(LongTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getLongValue(current);
                var ostr = inS.startWriteParams();
                ostr.writeLong(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getDoubleValue",
                "getFloatValue",
                "getLongValue",
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return DoubleTInterfaceDisp_.iceD_getDoubleValue(this, inS, current);
                    }
                    case 1:
                    {
                        return FloatTInterfaceDisp_.iceD_getFloatValue(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getLongValue(this, inS, current);
                    }
                    case 3:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class LongTInterfaceTie_ : LongTInterfaceDisp_, global::Ice.TieBase
        {
            public LongTInterfaceTie_()
            {
            }

            public LongTInterfaceTie_(LongTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (LongTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is LongTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((LongTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((LongTInterfaceTie_)rhs)._ice_delegate);
            }

            public override long getLongValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getLongValue(current);
            }

            public override float getFloatValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getFloatValue(current);
            }

            public override double getDoubleValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getDoubleValue(current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private LongTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class IntTInterfaceDisp_ : global::Ice.ObjectImpl, IntTInterface
        {
            #region Slice operations

            public abstract int getIntValue(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract double getDoubleValue(global::Ice.Current current = null);

            public abstract float getFloatValue(global::Ice.Current current = null);

            public abstract long getLongValue(global::Ice.Current current = null);

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::IntTInterface",
                "::Ferda::Modules::LongTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[2];
            }

            public static new string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getIntValue(IntTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getIntValue(current);
                var ostr = inS.startWriteParams();
                ostr.writeInt(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getDoubleValue",
                "getFloatValue",
                "getIntValue",
                "getLongValue",
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return DoubleTInterfaceDisp_.iceD_getDoubleValue(this, inS, current);
                    }
                    case 1:
                    {
                        return FloatTInterfaceDisp_.iceD_getFloatValue(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getIntValue(this, inS, current);
                    }
                    case 3:
                    {
                        return LongTInterfaceDisp_.iceD_getLongValue(this, inS, current);
                    }
                    case 4:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 8:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class IntTInterfaceTie_ : IntTInterfaceDisp_, global::Ice.TieBase
        {
            public IntTInterfaceTie_()
            {
            }

            public IntTInterfaceTie_(IntTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (IntTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is IntTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((IntTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((IntTInterfaceTie_)rhs)._ice_delegate);
            }

            public override int getIntValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getIntValue(current);
            }

            public override long getLongValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getLongValue(current);
            }

            public override float getFloatValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getFloatValue(current);
            }

            public override double getDoubleValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getDoubleValue(current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private IntTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class ShortTInterfaceDisp_ : global::Ice.ObjectImpl, ShortTInterface
        {
            #region Slice operations

            public abstract short getShortValue(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract double getDoubleValue(global::Ice.Current current = null);

            public abstract float getFloatValue(global::Ice.Current current = null);

            public abstract int getIntValue(global::Ice.Current current = null);

            public abstract long getLongValue(global::Ice.Current current = null);

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::IntTInterface",
                "::Ferda::Modules::LongTInterface",
                "::Ferda::Modules::ShortTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[4];
            }

            public static new string ice_staticId()
            {
                return _ids[4];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getShortValue(ShortTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getShortValue(current);
                var ostr = inS.startWriteParams();
                ostr.writeShort(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getDoubleValue",
                "getFloatValue",
                "getIntValue",
                "getLongValue",
                "getShortValue",
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return DoubleTInterfaceDisp_.iceD_getDoubleValue(this, inS, current);
                    }
                    case 1:
                    {
                        return FloatTInterfaceDisp_.iceD_getFloatValue(this, inS, current);
                    }
                    case 2:
                    {
                        return IntTInterfaceDisp_.iceD_getIntValue(this, inS, current);
                    }
                    case 3:
                    {
                        return LongTInterfaceDisp_.iceD_getLongValue(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_getShortValue(this, inS, current);
                    }
                    case 5:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 8:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 9:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class ShortTInterfaceTie_ : ShortTInterfaceDisp_, global::Ice.TieBase
        {
            public ShortTInterfaceTie_()
            {
            }

            public ShortTInterfaceTie_(ShortTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (ShortTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is ShortTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((ShortTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((ShortTInterfaceTie_)rhs)._ice_delegate);
            }

            public override short getShortValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getShortValue(current);
            }

            public override int getIntValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getIntValue(current);
            }

            public override long getLongValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getLongValue(current);
            }

            public override float getFloatValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getFloatValue(current);
            }

            public override double getDoubleValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getDoubleValue(current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private ShortTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BoolTInterfaceDisp_ : global::Ice.ObjectImpl, BoolTInterface
        {
            #region Slice operations

            public abstract bool getBoolValue(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract double getDoubleValue(global::Ice.Current current = null);

            public abstract float getFloatValue(global::Ice.Current current = null);

            public abstract int getIntValue(global::Ice.Current current = null);

            public abstract long getLongValue(global::Ice.Current current = null);

            public abstract short getShortValue(global::Ice.Current current = null);

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::BoolTInterface",
                "::Ferda::Modules::DoubleTInterface",
                "::Ferda::Modules::FloatTInterface",
                "::Ferda::Modules::IntTInterface",
                "::Ferda::Modules::LongTInterface",
                "::Ferda::Modules::ShortTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getBoolValue(BoolTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getBoolValue(current);
                var ostr = inS.startWriteParams();
                ostr.writeBool(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getBoolValue",
                "getDoubleValue",
                "getFloatValue",
                "getIntValue",
                "getLongValue",
                "getShortValue",
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getBoolValue(this, inS, current);
                    }
                    case 1:
                    {
                        return DoubleTInterfaceDisp_.iceD_getDoubleValue(this, inS, current);
                    }
                    case 2:
                    {
                        return FloatTInterfaceDisp_.iceD_getFloatValue(this, inS, current);
                    }
                    case 3:
                    {
                        return IntTInterfaceDisp_.iceD_getIntValue(this, inS, current);
                    }
                    case 4:
                    {
                        return LongTInterfaceDisp_.iceD_getLongValue(this, inS, current);
                    }
                    case 5:
                    {
                        return ShortTInterfaceDisp_.iceD_getShortValue(this, inS, current);
                    }
                    case 6:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 8:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 9:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 10:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class BoolTInterfaceTie_ : BoolTInterfaceDisp_, global::Ice.TieBase
        {
            public BoolTInterfaceTie_()
            {
            }

            public BoolTInterfaceTie_(BoolTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (BoolTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is BoolTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((BoolTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((BoolTInterfaceTie_)rhs)._ice_delegate);
            }

            public override bool getBoolValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getBoolValue(current);
            }

            public override short getShortValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getShortValue(current);
            }

            public override int getIntValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getIntValue(current);
            }

            public override long getLongValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getLongValue(current);
            }

            public override float getFloatValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getFloatValue(current);
            }

            public override double getDoubleValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getDoubleValue(current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private BoolTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class DateTimeTInterfaceDisp_ : global::Ice.ObjectImpl, DateTimeTInterface
        {
            #region Slice operations

            public abstract void getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DateTimeTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getDateTimeValue(DateTimeTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                int iceP_year;
                short iceP_month;
                short iceP_day;
                short iceP_hour;
                short iceP_minute;
                short iceP_second;
                obj.getDateTimeValue(out iceP_year, out iceP_month, out iceP_day, out iceP_hour, out iceP_minute, out iceP_second, current);
                var ostr = inS.startWriteParams();
                ostr.writeInt(iceP_year);
                ostr.writeShort(iceP_month);
                ostr.writeShort(iceP_day);
                ostr.writeShort(iceP_hour);
                ostr.writeShort(iceP_minute);
                ostr.writeShort(iceP_second);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getDateTimeValue",
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getDateTimeValue(this, inS, current);
                    }
                    case 1:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class DateTimeTInterfaceTie_ : DateTimeTInterfaceDisp_, global::Ice.TieBase
        {
            public DateTimeTInterfaceTie_()
            {
            }

            public DateTimeTInterfaceTie_(DateTimeTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (DateTimeTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is DateTimeTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((DateTimeTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((DateTimeTInterfaceTie_)rhs)._ice_delegate);
            }

            public override void getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.Current current = null)
            {
                _ice_delegate.getDateTimeValue(out year, out month, out day, out hour, out minute, out second, current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private DateTimeTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class DateTInterfaceDisp_ : global::Ice.ObjectImpl, DateTInterface
        {
            #region Slice operations

            public abstract void getDateValue(out int year, out short month, out short day, global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract void getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.Current current = null);

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::DateTInterface",
                "::Ferda::Modules::DateTimeTInterface",
                "::Ferda::Modules::StringTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getDateValue(DateTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                int iceP_year;
                short iceP_month;
                short iceP_day;
                obj.getDateValue(out iceP_year, out iceP_month, out iceP_day, current);
                var ostr = inS.startWriteParams();
                ostr.writeInt(iceP_year);
                ostr.writeShort(iceP_month);
                ostr.writeShort(iceP_day);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getDateTimeValue",
                "getDateValue",
                "getStringValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return DateTimeTInterfaceDisp_.iceD_getDateTimeValue(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getDateValue(this, inS, current);
                    }
                    case 2:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class DateTInterfaceTie_ : DateTInterfaceDisp_, global::Ice.TieBase
        {
            public DateTInterfaceTie_()
            {
            }

            public DateTInterfaceTie_(DateTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (DateTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is DateTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((DateTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((DateTInterfaceTie_)rhs)._ice_delegate);
            }

            public override void getDateValue(out int year, out short month, out short day, global::Ice.Current current = null)
            {
                _ice_delegate.getDateValue(out year, out month, out day, current);
            }

            public override void getDateTimeValue(out int year, out short month, out short day, out short hour, out short minute, out short second, global::Ice.Current current = null)
            {
                _ice_delegate.getDateTimeValue(out year, out month, out day, out hour, out minute, out second, current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private DateTInterfaceOperations_ _ice_delegate;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class TimeTInterfaceDisp_ : global::Ice.ObjectImpl, TimeTInterface
        {
            #region Slice operations

            public abstract void getTimeValue(out short hour, out short minute, out short second, global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract string getStringValue(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::Modules::StringTInterface",
                "::Ferda::Modules::TimeTInterface",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getTimeValue(TimeTInterface obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                short iceP_hour;
                short iceP_minute;
                short iceP_second;
                obj.getTimeValue(out iceP_hour, out iceP_minute, out iceP_second, current);
                var ostr = inS.startWriteParams();
                ostr.writeShort(iceP_hour);
                ostr.writeShort(iceP_minute);
                ostr.writeShort(iceP_second);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getStringValue",
                "getTimeValue",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return StringTInterfaceDisp_.iceD_getStringValue(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getTimeValue(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public class TimeTInterfaceTie_ : TimeTInterfaceDisp_, global::Ice.TieBase
        {
            public TimeTInterfaceTie_()
            {
            }

            public TimeTInterfaceTie_(TimeTInterfaceOperations_ del)
            {
                _ice_delegate = del;
            }

            public object ice_delegate()
            {
                return _ice_delegate;
            }

            public void ice_delegate(object del)
            {
                _ice_delegate = (TimeTInterfaceOperations_)del;
            }

            public override int GetHashCode()
            {
                return _ice_delegate == null ? 0 : _ice_delegate.GetHashCode();
            }

            public override bool Equals(object rhs)
            {
                if(object.ReferenceEquals(this, rhs))
                {
                    return true;
                }
                if(!(rhs is TimeTInterfaceTie_))
                {
                    return false;
                }
                if(_ice_delegate == null)
                {
                    return ((TimeTInterfaceTie_)rhs)._ice_delegate == null;
                }
                return _ice_delegate.Equals(((TimeTInterfaceTie_)rhs)._ice_delegate);
            }

            public override void getTimeValue(out short hour, out short minute, out short second, global::Ice.Current current = null)
            {
                _ice_delegate.getTimeValue(out hour, out minute, out second, current);
            }

            public override string getStringValue(global::Ice.Current current = null)
            {
                return _ice_delegate.getStringValue(current);
            }

            private TimeTInterfaceOperations_ _ice_delegate;
        }
    }
}
