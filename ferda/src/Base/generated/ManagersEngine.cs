//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `ManagersEngine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ferda
{
    namespace Modules
    {
    }

    namespace ModulesManager
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public enum MsgType
        {
            Debug,
            Info,
            Warning,
            Error
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class MsgTypeHelper
        {
            public static void write(global::Ice.OutputStream ostr, MsgType v)
            {
                ostr.writeEnum((int)v, 3);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static MsgType read(global::Ice.InputStream istr)
            {
                MsgType v;
                v = (MsgType)istr.readEnum(3);
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class BoxModuleNotExistError : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BoxModuleNotExistError()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BoxModuleNotExistError(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BoxModuleNotExistError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::Ferda::ModulesManager::BoxModuleNotExistError";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::ModulesManager::BoxModuleNotExistError");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                BoxModuleNotExistError o = other as BoxModuleNotExistError;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(BoxModuleNotExistError lhs, BoxModuleNotExistError rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(BoxModuleNotExistError lhs, BoxModuleNotExistError rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::Ferda::ModulesManager::BoxModuleNotExistError", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface ProgressBar : global::Ice.Object, ProgressBarOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Output : global::Ice.Object, OutputOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BoxModuleProjectInformation : global::Ice.Object, BoxModuleProjectInformationOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BoxModuleLocker : global::Ice.Object, BoxModuleLockerOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BoxModuleValidator : global::Ice.Object, BoxModuleValidatorOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BoxModuleManager : global::Ice.Object, BoxModuleManagerOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface ManagersLocator : global::Ice.Object, ManagersLocatorOperations_
        {
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface ManagersEngine : global::Ice.Object, ManagersEngineOperations_
        {
        }
    }
}

namespace Ferda
{
    namespace ModulesManager
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ProgressBar_setValue();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ProgressBar_done();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_Output_writeMsg();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_Output_startProgress(ProgressBarPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleProjectInformation_getUserLabel(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleProjectInformation_getUserHint(string ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleProjectInformation_getProjectIdentifier(int ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleLocker_lockBoxModule();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleLocker_unlockBoxModule();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleValidator_validate();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BoxModuleManager_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersLocator_findBoxModuleCreatorByIdentifier(global::Ferda.Modules.BoxModuleFactoryCreatorPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersLocator_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxModuleFactoryCreatorPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersLocator_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersLocator_findSettingModule(global::Ferda.Modules.SettingModulePrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersLocator_findModuleForInteraction(global::Ferda.Modules.ModuleForInteractionPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersLocator_findAllModulesForInteraction(global::Ferda.Modules.ModuleForInteractionPrx[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersLocator_findAllObjectsWithType(global::Ice.ObjectPrx[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersLocator_findObjectByType(global::Ice.ObjectPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersEngine_getOutputInterface(OutputPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersEngine_getProjectInformation(BoxModuleProjectInformationPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersEngine_getBoxModuleLocker(BoxModuleLockerPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersEngine_getBoxModuleValidator(BoxModuleValidatorPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersEngine_getBoxModuleManager(BoxModuleManagerPrx ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ManagersEngine_getManagersLocator(ManagersLocatorPrx ret);
    }
}

namespace Ferda
{
    namespace ModulesManager
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ProgressBarPrx : global::Ice.ObjectPrx
        {
            void setValue(float value, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task setValueAsync(float value, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ProgressBar_setValue> begin_setValue(float value, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_setValue(float value, string message, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_setValue(float value, string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_setValue(global::Ice.AsyncResult asyncResult);

            void done(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task doneAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ProgressBar_done> begin_done(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_done(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_done(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_done(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface OutputPrx : global::Ice.ObjectPrx
        {
            void writeMsg(MsgType type, string name, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task writeMsgAsync(MsgType type, string name, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Output_writeMsg> begin_writeMsg(MsgType type, string name, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_writeMsg(MsgType type, string name, string message, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_writeMsg(MsgType type, string name, string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_writeMsg(global::Ice.AsyncResult asyncResult);

            ProgressBarPrx startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<ProgressBarPrx> startProgressAsync(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_Output_startProgress> begin_startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            ProgressBarPrx end_startProgress(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleProjectInformationPrx : global::Ice.ObjectPrx
        {
            string getUserLabel(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string> getUserLabelAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getUserLabel> begin_getUserLabel(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getUserLabel(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getUserLabel(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            string end_getUserLabel(global::Ice.AsyncResult asyncResult);

            string getUserHint(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string> getUserHintAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getUserHint> begin_getUserHint(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getUserHint(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getUserHint(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            string end_getUserHint(global::Ice.AsyncResult asyncResult);

            int getProjectIdentifier(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<int> getProjectIdentifierAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getProjectIdentifier> begin_getProjectIdentifier(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getProjectIdentifier(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getProjectIdentifier(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            int end_getProjectIdentifier(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleLockerPrx : global::Ice.ObjectPrx
        {
            void lockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task lockBoxModuleAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BoxModuleLocker_lockBoxModule> begin_lockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_lockBoxModule(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_lockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_lockBoxModule(global::Ice.AsyncResult asyncResult);

            void unlockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task unlockBoxModuleAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BoxModuleLocker_unlockBoxModule> begin_unlockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_unlockBoxModule(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_unlockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_unlockBoxModule(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleValidatorPrx : global::Ice.ObjectPrx
        {
            void validate(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task validateAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BoxModuleValidator_validate> begin_validate(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_validate(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_validate(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_validate(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleManagerPrx : global::Ice.ObjectPrx
        {
            /// <summary>
            /// Clone box boxModule with all boxes connected to it.
            /// </summary>
            /// <param name="boxModule">The parent box module which we want to clone with all child box modules
            ///
            /// </param>
            /// <returns>The cloned version of box module boxModule</returns>
            /// <param name="context">The Context map to send with the invocation.</param>

            global::Ferda.Modules.BoxModulePrx CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Clone box boxModule with all boxes connected to it.
            /// </summary>
            /// <param name="boxModule">The parent box module which we want to clone with all child box modules
            ///
            /// </param>
            /// <param name="context">Context map to send with the invocation.</param>
            /// <param name="progress">Sent progress provider.</param>
            /// <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            /// <returns>The task object representing the asynchronous operation.</returns>
            global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModulePrx> CloneBoxModuleWithChildsAsync(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            /// <summary>
            /// Clone box boxModule with all boxes connected to it.
            /// </summary>
            /// <param name="boxModule">The parent box module which we want to clone with all child box modules
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult<Callback_BoxModuleManager_CloneBoxModuleWithChilds> begin_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            /// <summary>
            /// Clone box boxModule with all boxes connected to it.
            /// </summary>
            /// <param name="boxModule">The parent box module which we want to clone with all child box modules
            ///
            /// </param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Clone box boxModule with all boxes connected to it.
            /// </summary>
            /// <param name="boxModule">The parent box module which we want to clone with all child box modules
            ///
            /// </param>
            /// <param name="context">The Context map to send with the invocation.</param>
            /// <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            /// <param name="cookie">Application data to store in the asynchronous result object.</param>
            /// <returns>An asynchronous result object.</returns>
            global::Ice.AsyncResult begin_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            /// <summary>
            /// Clone box boxModule with all boxes connected to it.
            /// </summary>
            /// <param name="asyncResult">The asynchronous result object for the invocation.</param>
            /// <returns>The cloned version of box module boxModule</returns>
            global::Ferda.Modules.BoxModulePrx end_CloneBoxModuleWithChilds(global::Ice.AsyncResult asyncResult);
        }

        /// <summary>
        /// Searches for ice objects avariable for work with
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ManagersLocatorPrx : global::Ice.ObjectPrx
        {
            global::Ferda.Modules.BoxModuleFactoryCreatorPrx findBoxModuleCreatorByIdentifier(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx> findBoxModuleCreatorByIdentifierAsync(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersLocator_findBoxModuleCreatorByIdentifier> begin_findBoxModuleCreatorByIdentifier(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_findBoxModuleCreatorByIdentifier(string identifier, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_findBoxModuleCreatorByIdentifier(string identifier, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ferda.Modules.BoxModuleFactoryCreatorPrx end_findBoxModuleCreatorByIdentifier(global::Ice.AsyncResult asyncResult);

            global::Ferda.Modules.BoxModuleFactoryCreatorPrx findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx> findBoxModuleCreatorByBoxTypeAsync(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersLocator_findBoxModuleCreatorByBoxType> begin_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ferda.Modules.BoxModuleFactoryCreatorPrx end_findBoxModuleCreatorByBoxType(global::Ice.AsyncResult asyncResult);

            global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx[]> findAllBoxModuleCreatorsWithBoxTypeAsync(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersLocator_findAllBoxModuleCreatorsWithBoxType> begin_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] end_findAllBoxModuleCreatorsWithBoxType(global::Ice.AsyncResult asyncResult);

            global::Ferda.Modules.SettingModulePrx findSettingModule(string propertyIceId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ferda.Modules.SettingModulePrx> findSettingModuleAsync(string propertyIceId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersLocator_findSettingModule> begin_findSettingModule(string propertyIceId, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_findSettingModule(string propertyIceId, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_findSettingModule(string propertyIceId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ferda.Modules.SettingModulePrx end_findSettingModule(global::Ice.AsyncResult asyncResult);

            global::Ferda.Modules.ModuleForInteractionPrx findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ferda.Modules.ModuleForInteractionPrx> findModuleForInteractionAsync(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersLocator_findModuleForInteraction> begin_findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ferda.Modules.ModuleForInteractionPrx end_findModuleForInteraction(global::Ice.AsyncResult asyncResult);

            global::Ferda.Modules.ModuleForInteractionPrx[] findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ferda.Modules.ModuleForInteractionPrx[]> findAllModulesForInteractionAsync(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersLocator_findAllModulesForInteraction> begin_findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ferda.Modules.ModuleForInteractionPrx[] end_findAllModulesForInteraction(global::Ice.AsyncResult asyncResult);

            global::Ice.ObjectPrx[] findAllObjectsWithType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> findAllObjectsWithTypeAsync(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersLocator_findAllObjectsWithType> begin_findAllObjectsWithType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_findAllObjectsWithType(string type, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_findAllObjectsWithType(string type, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.ObjectPrx[] end_findAllObjectsWithType(global::Ice.AsyncResult asyncResult);

            global::Ice.ObjectPrx findObjectByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByTypeAsync(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersLocator_findObjectByType> begin_findObjectByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_findObjectByType(string type, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_findObjectByType(string type, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.ObjectPrx end_findObjectByType(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ManagersEnginePrx : global::Ice.ObjectPrx
        {
            OutputPrx getOutputInterface(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<OutputPrx> getOutputInterfaceAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersEngine_getOutputInterface> begin_getOutputInterface(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getOutputInterface(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getOutputInterface(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            OutputPrx end_getOutputInterface(global::Ice.AsyncResult asyncResult);

            BoxModuleProjectInformationPrx getProjectInformation(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<BoxModuleProjectInformationPrx> getProjectInformationAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersEngine_getProjectInformation> begin_getProjectInformation(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getProjectInformation(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getProjectInformation(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            BoxModuleProjectInformationPrx end_getProjectInformation(global::Ice.AsyncResult asyncResult);

            BoxModuleLockerPrx getBoxModuleLocker(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<BoxModuleLockerPrx> getBoxModuleLockerAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleLocker> begin_getBoxModuleLocker(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getBoxModuleLocker(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getBoxModuleLocker(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            BoxModuleLockerPrx end_getBoxModuleLocker(global::Ice.AsyncResult asyncResult);

            BoxModuleValidatorPrx getBoxModuleValidator(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<BoxModuleValidatorPrx> getBoxModuleValidatorAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleValidator> begin_getBoxModuleValidator(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getBoxModuleValidator(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getBoxModuleValidator(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            BoxModuleValidatorPrx end_getBoxModuleValidator(global::Ice.AsyncResult asyncResult);

            BoxModuleManagerPrx getBoxModuleManager(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<BoxModuleManagerPrx> getBoxModuleManagerAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleManager> begin_getBoxModuleManager(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getBoxModuleManager(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getBoxModuleManager(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            BoxModuleManagerPrx end_getBoxModuleManager(global::Ice.AsyncResult asyncResult);

            ManagersLocatorPrx getManagersLocator(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<ManagersLocatorPrx> getManagersLocatorAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ManagersEngine_getManagersLocator> begin_getManagersLocator(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getManagersLocator(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getManagersLocator(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            ManagersLocatorPrx end_getManagersLocator(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace Ferda
{
    namespace ModulesManager
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ProgressBarOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void setValue(float value, string message, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void done(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface OutputOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void writeMsg(MsgType type, string name, string message, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            ProgressBarPrx startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleProjectInformationOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getUserLabel(string boxModuleIceIdentity, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getUserHint(string boxModuleIceIdentity, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            int getProjectIdentifier(string boxModuleIceIdentity, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleLockerOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void lockBoxModule(string boxModuleIceIdentity, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void unlockBoxModule(string boxModuleIceIdentity, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleValidatorOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void validate(string boxModuleIceIdentity, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BoxModuleManagerOperations_
        {
            /// <summary>
            /// Clone box boxModule with all boxes connected to it.
            /// </summary>
            /// <param name="boxModule">The parent box module which we want to clone with all child box modules
            ///
            /// </param>
            /// <returns>The cloned version of box module boxModule</returns>
            /// <param name="current">The Current object for the invocation.</param>

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ferda.Modules.BoxModulePrx CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.Current current = null);
        }

        /// <summary>
        /// Searches for ice objects avariable for work with
        /// </summary>

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ManagersLocatorOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ferda.Modules.BoxModuleFactoryCreatorPrx findBoxModuleCreatorByIdentifier(string identifier, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ferda.Modules.BoxModuleFactoryCreatorPrx findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ferda.Modules.SettingModulePrx findSettingModule(string propertyIceId, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ferda.Modules.ModuleForInteractionPrx findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ferda.Modules.ModuleForInteractionPrx[] findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ice.ObjectPrx[] findAllObjectsWithType(string type, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            global::Ice.ObjectPrx findObjectByType(string type, global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ManagersEngineOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            OutputPrx getOutputInterface(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModuleProjectInformationPrx getProjectInformation(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModuleLockerPrx getBoxModuleLocker(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModuleValidatorPrx getBoxModuleValidator(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            BoxModuleManagerPrx getBoxModuleManager(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            ManagersLocatorPrx getManagersLocator(global::Ice.Current current = null);
        }
    }
}

namespace Ferda
{
    namespace ModulesManager
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class ProgressBarPrxHelper : global::Ice.ObjectPrxHelperBase, ProgressBarPrx
        {
            public ProgressBarPrxHelper()
            {
            }

            public ProgressBarPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void setValue(float value, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setValueAsync(value, message, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void done(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_doneAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task setValueAsync(float value, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setValueAsync(value, message, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setValueAsync(float iceP_value, string iceP_message, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setValue(iceP_value, iceP_message, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setValue_name = "setValue";

            private void _iceI_setValue(float iceP_value, string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setValue_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeFloat(iceP_value);
                        ostr.writeString(iceP_message);
                    });
            }

            public global::System.Threading.Tasks.Task doneAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_doneAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_doneAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_done(context, synchronous, completed);
                return completed.Task;
            }

            private const string _done_name = "done";

            private void _iceI_done(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _done_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_ProgressBar_setValue> begin_setValue(float value, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setValue(value, message, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setValue(float value, string message, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setValue(value, message, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setValue(float value, string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setValue(value, message, context, callback, cookie, false);
            }

            public void end_setValue(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setValue_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ProgressBar_setValue> begin_setValue(float iceP_value, string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ProgressBar_setValue, object>(
                    (Callback_ProgressBar_setValue cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _setValue_name, cookie, completedCallback);
                _iceI_setValue(iceP_value, iceP_message, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ProgressBar_done> begin_done(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_done(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_done(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_done(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_done(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_done(context, callback, cookie, false);
            }

            public void end_done(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _done_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ProgressBar_done> begin_done(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ProgressBar_done, object>(
                    (Callback_ProgressBar_done cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _done_name, cookie, completedCallback);
                _iceI_done(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ProgressBarPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ProgressBarPrx r = b as ProgressBarPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ProgressBarPrxHelper h = new ProgressBarPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ProgressBarPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ProgressBarPrx r = b as ProgressBarPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ProgressBarPrxHelper h = new ProgressBarPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ProgressBarPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ProgressBarPrxHelper h = new ProgressBarPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ProgressBarPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ProgressBarPrxHelper h = new ProgressBarPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ProgressBarPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ProgressBarPrx r = b as ProgressBarPrx;
                if(r == null)
                {
                    ProgressBarPrxHelper h = new ProgressBarPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ProgressBarPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ProgressBarPrxHelper h = new ProgressBarPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::ProgressBar",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ProgressBarPrx v)
            {
                ostr.writeProxy(v);
            }

            public static ProgressBarPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ProgressBarPrxHelper result = new ProgressBarPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class OutputPrxHelper : global::Ice.ObjectPrxHelperBase, OutputPrx
        {
            public OutputPrxHelper()
            {
            }

            public OutputPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void writeMsg(MsgType type, string name, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_writeMsgAsync(type, name, message, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public ProgressBarPrx startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_startProgressAsync(task, name, hint, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task writeMsgAsync(MsgType type, string name, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_writeMsgAsync(type, name, message, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_writeMsgAsync(MsgType iceP_type, string iceP_name, string iceP_message, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_writeMsg(iceP_type, iceP_name, iceP_message, context, synchronous, completed);
                return completed.Task;
            }

            private const string _writeMsg_name = "writeMsg";

            private void _iceI_writeMsg(MsgType iceP_type, string iceP_name, string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _writeMsg_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeEnum((int)iceP_type, 3);
                        ostr.writeString(iceP_name);
                        ostr.writeString(iceP_message);
                    });
            }

            public global::System.Threading.Tasks.Task<ProgressBarPrx> startProgressAsync(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_startProgressAsync(task, name, hint, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ProgressBarPrx> _iceI_startProgressAsync(global::Ferda.Modules.ProgressTaskPrx iceP_task, string iceP_name, string iceP_hint, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_startProgress_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<ProgressBarPrx>(progress, cancel);
                _iceI_startProgress(iceP_task, iceP_name, iceP_hint, context, synchronous, completed);
                return completed.Task;
            }

            private const string _startProgress_name = "startProgress";

            private void _iceI_startProgress(global::Ferda.Modules.ProgressTaskPrx iceP_task, string iceP_name, string iceP_hint, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ProgressBarPrx>(completed);
                outAsync.invoke(
                    _startProgress_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Ferda.Modules.ProgressTaskPrxHelper.write(ostr, iceP_task);
                        ostr.writeString(iceP_name);
                        ostr.writeString(iceP_hint);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        ProgressBarPrx ret;
                        ret = ProgressBarPrxHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_Output_writeMsg> begin_writeMsg(MsgType type, string name, string message, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_writeMsg(type, name, message, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_writeMsg(MsgType type, string name, string message, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_writeMsg(type, name, message, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_writeMsg(MsgType type, string name, string message, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_writeMsg(type, name, message, context, callback, cookie, false);
            }

            public void end_writeMsg(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _writeMsg_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Output_writeMsg> begin_writeMsg(MsgType iceP_type, string iceP_name, string iceP_message, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Output_writeMsg, object>(
                    (Callback_Output_writeMsg cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _writeMsg_name, cookie, completedCallback);
                _iceI_writeMsg(iceP_type, iceP_name, iceP_message, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_Output_startProgress> begin_startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_startProgress(task, name, hint, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_startProgress(task, name, hint, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_startProgress(task, name, hint, context, callback, cookie, false);
            }

            public ProgressBarPrx end_startProgress(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _startProgress_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<ProgressBarPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_Output_startProgress> begin_startProgress(global::Ferda.Modules.ProgressTaskPrx iceP_task, string iceP_name, string iceP_hint, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_startProgress_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Output_startProgress, ProgressBarPrx>(
                    (Callback_Output_startProgress cb, ProgressBarPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _startProgress_name, cookie, completedCallback);
                _iceI_startProgress(iceP_task, iceP_name, iceP_hint, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static OutputPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                OutputPrx r = b as OutputPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    OutputPrxHelper h = new OutputPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static OutputPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                OutputPrx r = b as OutputPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    OutputPrxHelper h = new OutputPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static OutputPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        OutputPrxHelper h = new OutputPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static OutputPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        OutputPrxHelper h = new OutputPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static OutputPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                OutputPrx r = b as OutputPrx;
                if(r == null)
                {
                    OutputPrxHelper h = new OutputPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static OutputPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                OutputPrxHelper h = new OutputPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::Output",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, OutputPrx v)
            {
                ostr.writeProxy(v);
            }

            public static OutputPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    OutputPrxHelper result = new OutputPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BoxModuleProjectInformationPrxHelper : global::Ice.ObjectPrxHelperBase, BoxModuleProjectInformationPrx
        {
            public BoxModuleProjectInformationPrxHelper()
            {
            }

            public BoxModuleProjectInformationPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public string getUserLabel(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getUserLabelAsync(boxModuleIceIdentity, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getUserHint(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getUserHintAsync(boxModuleIceIdentity, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int getProjectIdentifier(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getProjectIdentifierAsync(boxModuleIceIdentity, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<string> getUserLabelAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getUserLabelAsync(boxModuleIceIdentity, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getUserLabelAsync(string iceP_boxModuleIceIdentity, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getUserLabel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getUserLabel(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getUserLabel_name = "getUserLabel";

            private void _iceI_getUserLabel(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getUserLabel_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_boxModuleIceIdentity);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxModuleNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getUserHintAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getUserHintAsync(boxModuleIceIdentity, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getUserHintAsync(string iceP_boxModuleIceIdentity, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getUserHint_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getUserHint(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getUserHint_name = "getUserHint";

            private void _iceI_getUserHint(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getUserHint_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_boxModuleIceIdentity);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxModuleNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int> getProjectIdentifierAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getProjectIdentifierAsync(boxModuleIceIdentity, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_getProjectIdentifierAsync(string iceP_boxModuleIceIdentity, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getProjectIdentifier_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_getProjectIdentifier(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getProjectIdentifier_name = "getProjectIdentifier";

            private void _iceI_getProjectIdentifier(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _getProjectIdentifier_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_boxModuleIceIdentity);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxModuleNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getUserLabel> begin_getUserLabel(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getUserLabel(boxModuleIceIdentity, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getUserLabel(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getUserLabel(boxModuleIceIdentity, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getUserLabel(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getUserLabel(boxModuleIceIdentity, context, callback, cookie, false);
            }

            public string end_getUserLabel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getUserLabel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getUserLabel> begin_getUserLabel(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getUserLabel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleProjectInformation_getUserLabel, string>(
                    (Callback_BoxModuleProjectInformation_getUserLabel cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getUserLabel_name, cookie, completedCallback);
                _iceI_getUserLabel(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getUserHint> begin_getUserHint(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getUserHint(boxModuleIceIdentity, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getUserHint(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getUserHint(boxModuleIceIdentity, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getUserHint(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getUserHint(boxModuleIceIdentity, context, callback, cookie, false);
            }

            public string end_getUserHint(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getUserHint_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getUserHint> begin_getUserHint(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getUserHint_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleProjectInformation_getUserHint, string>(
                    (Callback_BoxModuleProjectInformation_getUserHint cb, string ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getUserHint_name, cookie, completedCallback);
                _iceI_getUserHint(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getProjectIdentifier> begin_getProjectIdentifier(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getProjectIdentifier(boxModuleIceIdentity, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getProjectIdentifier(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProjectIdentifier(boxModuleIceIdentity, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getProjectIdentifier(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProjectIdentifier(boxModuleIceIdentity, context, callback, cookie, false);
            }

            public int end_getProjectIdentifier(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getProjectIdentifier_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleProjectInformation_getProjectIdentifier> begin_getProjectIdentifier(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getProjectIdentifier_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleProjectInformation_getProjectIdentifier, int>(
                    (Callback_BoxModuleProjectInformation_getProjectIdentifier cb, int ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getProjectIdentifier_name, cookie, completedCallback);
                _iceI_getProjectIdentifier(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BoxModuleProjectInformationPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleProjectInformationPrx r = b as BoxModuleProjectInformationPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BoxModuleProjectInformationPrxHelper h = new BoxModuleProjectInformationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleProjectInformationPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleProjectInformationPrx r = b as BoxModuleProjectInformationPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BoxModuleProjectInformationPrxHelper h = new BoxModuleProjectInformationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleProjectInformationPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BoxModuleProjectInformationPrxHelper h = new BoxModuleProjectInformationPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleProjectInformationPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BoxModuleProjectInformationPrxHelper h = new BoxModuleProjectInformationPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleProjectInformationPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleProjectInformationPrx r = b as BoxModuleProjectInformationPrx;
                if(r == null)
                {
                    BoxModuleProjectInformationPrxHelper h = new BoxModuleProjectInformationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleProjectInformationPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BoxModuleProjectInformationPrxHelper h = new BoxModuleProjectInformationPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::BoxModuleProjectInformation",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BoxModuleProjectInformationPrx v)
            {
                ostr.writeProxy(v);
            }

            public static BoxModuleProjectInformationPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BoxModuleProjectInformationPrxHelper result = new BoxModuleProjectInformationPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BoxModuleLockerPrxHelper : global::Ice.ObjectPrxHelperBase, BoxModuleLockerPrx
        {
            public BoxModuleLockerPrxHelper()
            {
            }

            public BoxModuleLockerPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void lockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_lockBoxModuleAsync(boxModuleIceIdentity, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void unlockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_unlockBoxModuleAsync(boxModuleIceIdentity, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task lockBoxModuleAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_lockBoxModuleAsync(boxModuleIceIdentity, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_lockBoxModuleAsync(string iceP_boxModuleIceIdentity, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_lockBoxModule_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_lockBoxModule(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed.Task;
            }

            private const string _lockBoxModule_name = "lockBoxModule";

            private void _iceI_lockBoxModule(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _lockBoxModule_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_boxModuleIceIdentity);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxModuleNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task unlockBoxModuleAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_unlockBoxModuleAsync(boxModuleIceIdentity, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_unlockBoxModuleAsync(string iceP_boxModuleIceIdentity, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_unlockBoxModule_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_unlockBoxModule(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed.Task;
            }

            private const string _unlockBoxModule_name = "unlockBoxModule";

            private void _iceI_unlockBoxModule(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _unlockBoxModule_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_boxModuleIceIdentity);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BoxModuleNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_BoxModuleLocker_lockBoxModule> begin_lockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_lockBoxModule(boxModuleIceIdentity, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_lockBoxModule(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_lockBoxModule(boxModuleIceIdentity, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_lockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_lockBoxModule(boxModuleIceIdentity, context, callback, cookie, false);
            }

            public void end_lockBoxModule(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _lockBoxModule_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleLocker_lockBoxModule> begin_lockBoxModule(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_lockBoxModule_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleLocker_lockBoxModule, object>(
                    (Callback_BoxModuleLocker_lockBoxModule cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _lockBoxModule_name, cookie, completedCallback);
                _iceI_lockBoxModule(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BoxModuleLocker_unlockBoxModule> begin_unlockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_unlockBoxModule(boxModuleIceIdentity, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_unlockBoxModule(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_unlockBoxModule(boxModuleIceIdentity, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_unlockBoxModule(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_unlockBoxModule(boxModuleIceIdentity, context, callback, cookie, false);
            }

            public void end_unlockBoxModule(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _unlockBoxModule_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleLocker_unlockBoxModule> begin_unlockBoxModule(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_unlockBoxModule_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleLocker_unlockBoxModule, object>(
                    (Callback_BoxModuleLocker_unlockBoxModule cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _unlockBoxModule_name, cookie, completedCallback);
                _iceI_unlockBoxModule(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BoxModuleLockerPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleLockerPrx r = b as BoxModuleLockerPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BoxModuleLockerPrxHelper h = new BoxModuleLockerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleLockerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleLockerPrx r = b as BoxModuleLockerPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BoxModuleLockerPrxHelper h = new BoxModuleLockerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleLockerPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BoxModuleLockerPrxHelper h = new BoxModuleLockerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleLockerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BoxModuleLockerPrxHelper h = new BoxModuleLockerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleLockerPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleLockerPrx r = b as BoxModuleLockerPrx;
                if(r == null)
                {
                    BoxModuleLockerPrxHelper h = new BoxModuleLockerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleLockerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BoxModuleLockerPrxHelper h = new BoxModuleLockerPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::BoxModuleLocker",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BoxModuleLockerPrx v)
            {
                ostr.writeProxy(v);
            }

            public static BoxModuleLockerPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BoxModuleLockerPrxHelper result = new BoxModuleLockerPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BoxModuleValidatorPrxHelper : global::Ice.ObjectPrxHelperBase, BoxModuleValidatorPrx
        {
            public BoxModuleValidatorPrxHelper()
            {
            }

            public BoxModuleValidatorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void validate(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_validateAsync(boxModuleIceIdentity, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task validateAsync(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_validateAsync(boxModuleIceIdentity, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_validateAsync(string iceP_boxModuleIceIdentity, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_validate_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_validate(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed.Task;
            }

            private const string _validate_name = "validate";

            private void _iceI_validate(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _validate_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_boxModuleIceIdentity);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(global::Ferda.Modules.BadValueError)
                        {
                            throw;
                        }
                        catch(global::Ferda.Modules.BadParamsError)
                        {
                            throw;
                        }
                        catch(global::Ferda.Modules.NoConnectionInSocketError)
                        {
                            throw;
                        }
                        catch(global::Ferda.Modules.BoxRuntimeError)
                        {
                            throw;
                        }
                        catch(BoxModuleNotExistError)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_BoxModuleValidator_validate> begin_validate(string boxModuleIceIdentity, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_validate(boxModuleIceIdentity, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_validate(string boxModuleIceIdentity, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_validate(boxModuleIceIdentity, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_validate(string boxModuleIceIdentity, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_validate(boxModuleIceIdentity, context, callback, cookie, false);
            }

            public void end_validate(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _validate_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleValidator_validate> begin_validate(string iceP_boxModuleIceIdentity, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_validate_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleValidator_validate, object>(
                    (Callback_BoxModuleValidator_validate cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _validate_name, cookie, completedCallback);
                _iceI_validate(iceP_boxModuleIceIdentity, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BoxModuleValidatorPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleValidatorPrx r = b as BoxModuleValidatorPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BoxModuleValidatorPrxHelper h = new BoxModuleValidatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleValidatorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleValidatorPrx r = b as BoxModuleValidatorPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BoxModuleValidatorPrxHelper h = new BoxModuleValidatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleValidatorPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BoxModuleValidatorPrxHelper h = new BoxModuleValidatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleValidatorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BoxModuleValidatorPrxHelper h = new BoxModuleValidatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleValidatorPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleValidatorPrx r = b as BoxModuleValidatorPrx;
                if(r == null)
                {
                    BoxModuleValidatorPrxHelper h = new BoxModuleValidatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleValidatorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BoxModuleValidatorPrxHelper h = new BoxModuleValidatorPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::BoxModuleValidator",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BoxModuleValidatorPrx v)
            {
                ostr.writeProxy(v);
            }

            public static BoxModuleValidatorPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BoxModuleValidatorPrxHelper result = new BoxModuleValidatorPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class BoxModuleSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ferda.Modules.BoxModulePrx[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ferda.Modules.BoxModulePrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::Ferda.Modules.BoxModulePrx[] read(global::Ice.InputStream istr)
            {
                global::Ferda.Modules.BoxModulePrx[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::Ferda.Modules.BoxModulePrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ferda.Modules.BoxModulePrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class BoxModuleSeqSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ferda.Modules.BoxModulePrx[][] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        BoxModuleSeqHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::Ferda.Modules.BoxModulePrx[][] read(global::Ice.InputStream istr)
            {
                global::Ferda.Modules.BoxModulePrx[][] v;
                {
                    int szx = istr.readAndCheckSeqSize(1);
                    v = new global::Ferda.Modules.BoxModulePrx[szx][];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = BoxModuleSeqHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BoxModuleManagerPrxHelper : global::Ice.ObjectPrxHelperBase, BoxModuleManagerPrx
        {
            public BoxModuleManagerPrxHelper()
            {
            }

            public BoxModuleManagerPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public global::Ferda.Modules.BoxModulePrx CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_CloneBoxModuleWithChildsAsync(boxModule, addToProject, variables, variableValues, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModulePrx> CloneBoxModuleWithChildsAsync(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_CloneBoxModuleWithChildsAsync(boxModule, addToProject, variables, variableValues, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModulePrx> _iceI_CloneBoxModuleWithChildsAsync(global::Ferda.Modules.BoxModulePrx iceP_boxModule, bool iceP_addToProject, global::Ferda.Modules.BoxModulePrx[][] iceP_variables, global::Ferda.Modules.BoxModulePrx[] iceP_variableValues, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_CloneBoxModuleWithChilds_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.BoxModulePrx>(progress, cancel);
                _iceI_CloneBoxModuleWithChilds(iceP_boxModule, iceP_addToProject, iceP_variables, iceP_variableValues, context, synchronous, completed);
                return completed.Task;
            }

            private const string _CloneBoxModuleWithChilds_name = "CloneBoxModuleWithChilds";

            private void _iceI_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx iceP_boxModule, bool iceP_addToProject, global::Ferda.Modules.BoxModulePrx[][] iceP_variables, global::Ferda.Modules.BoxModulePrx[] iceP_variableValues, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ferda.Modules.BoxModulePrx>(completed);
                outAsync.invoke(
                    _CloneBoxModuleWithChilds_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Ferda.Modules.BoxModulePrxHelper.write(ostr, iceP_boxModule);
                        ostr.writeBool(iceP_addToProject);
                        BoxModuleSeqSeqHelper.write(ostr, iceP_variables);
                        BoxModuleSeqHelper.write(ostr, iceP_variableValues);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ferda.Modules.BoxModulePrx ret;
                        ret = global::Ferda.Modules.BoxModulePrxHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_BoxModuleManager_CloneBoxModuleWithChilds> begin_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_CloneBoxModuleWithChilds(boxModule, addToProject, variables, variableValues, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_CloneBoxModuleWithChilds(boxModule, addToProject, variables, variableValues, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_CloneBoxModuleWithChilds(boxModule, addToProject, variables, variableValues, context, callback, cookie, false);
            }

            public global::Ferda.Modules.BoxModulePrx end_CloneBoxModuleWithChilds(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _CloneBoxModuleWithChilds_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.BoxModulePrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BoxModuleManager_CloneBoxModuleWithChilds> begin_CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx iceP_boxModule, bool iceP_addToProject, global::Ferda.Modules.BoxModulePrx[][] iceP_variables, global::Ferda.Modules.BoxModulePrx[] iceP_variableValues, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_CloneBoxModuleWithChilds_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BoxModuleManager_CloneBoxModuleWithChilds, global::Ferda.Modules.BoxModulePrx>(
                    (Callback_BoxModuleManager_CloneBoxModuleWithChilds cb, global::Ferda.Modules.BoxModulePrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _CloneBoxModuleWithChilds_name, cookie, completedCallback);
                _iceI_CloneBoxModuleWithChilds(iceP_boxModule, iceP_addToProject, iceP_variables, iceP_variableValues, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BoxModuleManagerPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleManagerPrx r = b as BoxModuleManagerPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BoxModuleManagerPrxHelper h = new BoxModuleManagerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleManagerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleManagerPrx r = b as BoxModuleManagerPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BoxModuleManagerPrxHelper h = new BoxModuleManagerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleManagerPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BoxModuleManagerPrxHelper h = new BoxModuleManagerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleManagerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BoxModuleManagerPrxHelper h = new BoxModuleManagerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BoxModuleManagerPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BoxModuleManagerPrx r = b as BoxModuleManagerPrx;
                if(r == null)
                {
                    BoxModuleManagerPrxHelper h = new BoxModuleManagerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BoxModuleManagerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BoxModuleManagerPrxHelper h = new BoxModuleManagerPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::BoxModuleManager",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BoxModuleManagerPrx v)
            {
                ostr.writeProxy(v);
            }

            public static BoxModuleManagerPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BoxModuleManagerPrxHelper result = new BoxModuleManagerPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class BoxModuleFactoryCreatorSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] read(global::Ice.InputStream istr)
            {
                global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::Ferda.Modules.BoxModuleFactoryCreatorPrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ModuleForInteractionSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ferda.Modules.ModuleForInteractionPrx[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        global::Ferda.Modules.ModuleForInteractionPrxHelper.write(ostr, v[ix]);
                    }
                }
            }

            public static global::Ferda.Modules.ModuleForInteractionPrx[] read(global::Ice.InputStream istr)
            {
                global::Ferda.Modules.ModuleForInteractionPrx[] v;
                {
                    int szx = istr.readAndCheckSeqSize(2);
                    v = new global::Ferda.Modules.ModuleForInteractionPrx[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = global::Ferda.Modules.ModuleForInteractionPrxHelper.read(istr);
                    }
                }
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ObjectSeqHelper
        {
            public static void write(global::Ice.OutputStream ostr, global::Ice.ObjectPrx[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        ostr.writeProxy(v[ix]);
                    }
                }
            }

            public static global::Ice.ObjectPrx[] read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx[] v;
                int v_lenx = istr.readAndCheckSeqSize(2);
                v = new global::Ice.ObjectPrx[v_lenx];
                for(int ix = 0; ix < v_lenx; ++ix)
                {
                    v[ix] = istr.readProxy();
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class ManagersLocatorPrxHelper : global::Ice.ObjectPrxHelperBase, ManagersLocatorPrx
        {
            public ManagersLocatorPrxHelper()
            {
            }

            public ManagersLocatorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public global::Ferda.Modules.BoxModuleFactoryCreatorPrx findBoxModuleCreatorByIdentifier(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_findBoxModuleCreatorByIdentifierAsync(identifier, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ferda.Modules.BoxModuleFactoryCreatorPrx findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_findBoxModuleCreatorByBoxTypeAsync(moduleType, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_findAllBoxModuleCreatorsWithBoxTypeAsync(moduleType, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ferda.Modules.SettingModulePrx findSettingModule(string propertyIceId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_findSettingModuleAsync(propertyIceId, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ferda.Modules.ModuleForInteractionPrx findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_findModuleForInteractionAsync(creator, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ferda.Modules.ModuleForInteractionPrx[] findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_findAllModulesForInteractionAsync(creator, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.ObjectPrx[] findAllObjectsWithType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_findAllObjectsWithTypeAsync(type, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public global::Ice.ObjectPrx findObjectByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_findObjectByTypeAsync(type, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx> findBoxModuleCreatorByIdentifierAsync(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_findBoxModuleCreatorByIdentifierAsync(identifier, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx> _iceI_findBoxModuleCreatorByIdentifierAsync(string iceP_identifier, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_findBoxModuleCreatorByIdentifier_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.BoxModuleFactoryCreatorPrx>(progress, cancel);
                _iceI_findBoxModuleCreatorByIdentifier(iceP_identifier, context, synchronous, completed);
                return completed.Task;
            }

            private const string _findBoxModuleCreatorByIdentifier_name = "findBoxModuleCreatorByIdentifier";

            private void _iceI_findBoxModuleCreatorByIdentifier(string iceP_identifier, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ferda.Modules.BoxModuleFactoryCreatorPrx>(completed);
                outAsync.invoke(
                    _findBoxModuleCreatorByIdentifier_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_identifier);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ferda.Modules.BoxModuleFactoryCreatorPrx ret;
                        ret = global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx> findBoxModuleCreatorByBoxTypeAsync(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_findBoxModuleCreatorByBoxTypeAsync(moduleType, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx> _iceI_findBoxModuleCreatorByBoxTypeAsync(global::Ferda.Modules.BoxType iceP_moduleType, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_findBoxModuleCreatorByBoxType_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.BoxModuleFactoryCreatorPrx>(progress, cancel);
                _iceI_findBoxModuleCreatorByBoxType(iceP_moduleType, context, synchronous, completed);
                return completed.Task;
            }

            private const string _findBoxModuleCreatorByBoxType_name = "findBoxModuleCreatorByBoxType";

            private void _iceI_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType iceP_moduleType, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ferda.Modules.BoxModuleFactoryCreatorPrx>(completed);
                outAsync.invoke(
                    _findBoxModuleCreatorByBoxType_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Ferda.Modules.BoxType.ice_write(ostr, iceP_moduleType);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ferda.Modules.BoxModuleFactoryCreatorPrx ret;
                        ret = global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx[]> findAllBoxModuleCreatorsWithBoxTypeAsync(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_findAllBoxModuleCreatorsWithBoxTypeAsync(moduleType, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ferda.Modules.BoxModuleFactoryCreatorPrx[]> _iceI_findAllBoxModuleCreatorsWithBoxTypeAsync(global::Ferda.Modules.BoxType iceP_moduleType, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_findAllBoxModuleCreatorsWithBoxType_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.BoxModuleFactoryCreatorPrx[]>(progress, cancel);
                _iceI_findAllBoxModuleCreatorsWithBoxType(iceP_moduleType, context, synchronous, completed);
                return completed.Task;
            }

            private const string _findAllBoxModuleCreatorsWithBoxType_name = "findAllBoxModuleCreatorsWithBoxType";

            private void _iceI_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType iceP_moduleType, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ferda.Modules.BoxModuleFactoryCreatorPrx[]>(completed);
                outAsync.invoke(
                    _findAllBoxModuleCreatorsWithBoxType_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Ferda.Modules.BoxType.ice_write(ostr, iceP_moduleType);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] ret;
                        ret = BoxModuleFactoryCreatorSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ferda.Modules.SettingModulePrx> findSettingModuleAsync(string propertyIceId, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_findSettingModuleAsync(propertyIceId, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ferda.Modules.SettingModulePrx> _iceI_findSettingModuleAsync(string iceP_propertyIceId, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_findSettingModule_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.SettingModulePrx>(progress, cancel);
                _iceI_findSettingModule(iceP_propertyIceId, context, synchronous, completed);
                return completed.Task;
            }

            private const string _findSettingModule_name = "findSettingModule";

            private void _iceI_findSettingModule(string iceP_propertyIceId, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ferda.Modules.SettingModulePrx>(completed);
                outAsync.invoke(
                    _findSettingModule_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_propertyIceId);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ferda.Modules.SettingModulePrx ret;
                        ret = global::Ferda.Modules.SettingModulePrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ferda.Modules.ModuleForInteractionPrx> findModuleForInteractionAsync(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_findModuleForInteractionAsync(creator, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ferda.Modules.ModuleForInteractionPrx> _iceI_findModuleForInteractionAsync(global::Ferda.Modules.BoxModuleFactoryCreatorPrx iceP_creator, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_findModuleForInteraction_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.ModuleForInteractionPrx>(progress, cancel);
                _iceI_findModuleForInteraction(iceP_creator, context, synchronous, completed);
                return completed.Task;
            }

            private const string _findModuleForInteraction_name = "findModuleForInteraction";

            private void _iceI_findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx iceP_creator, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ferda.Modules.ModuleForInteractionPrx>(completed);
                outAsync.invoke(
                    _findModuleForInteraction_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.write(ostr, iceP_creator);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ferda.Modules.ModuleForInteractionPrx ret;
                        ret = global::Ferda.Modules.ModuleForInteractionPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ferda.Modules.ModuleForInteractionPrx[]> findAllModulesForInteractionAsync(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_findAllModulesForInteractionAsync(creator, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ferda.Modules.ModuleForInteractionPrx[]> _iceI_findAllModulesForInteractionAsync(global::Ferda.Modules.BoxModuleFactoryCreatorPrx iceP_creator, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_findAllModulesForInteraction_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ferda.Modules.ModuleForInteractionPrx[]>(progress, cancel);
                _iceI_findAllModulesForInteraction(iceP_creator, context, synchronous, completed);
                return completed.Task;
            }

            private const string _findAllModulesForInteraction_name = "findAllModulesForInteraction";

            private void _iceI_findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx iceP_creator, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ferda.Modules.ModuleForInteractionPrx[]>(completed);
                outAsync.invoke(
                    _findAllModulesForInteraction_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.write(ostr, iceP_creator);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ferda.Modules.ModuleForInteractionPrx[] ret;
                        ret = ModuleForInteractionSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> findAllObjectsWithTypeAsync(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_findAllObjectsWithTypeAsync(type, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx[]> _iceI_findAllObjectsWithTypeAsync(string iceP_type, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_findAllObjectsWithType_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx[]>(progress, cancel);
                _iceI_findAllObjectsWithType(iceP_type, context, synchronous, completed);
                return completed.Task;
            }

            private const string _findAllObjectsWithType_name = "findAllObjectsWithType";

            private void _iceI_findAllObjectsWithType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.ObjectPrx[]>(completed);
                outAsync.invoke(
                    _findAllObjectsWithType_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_type);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.ObjectPrx[] ret;
                        ret = ObjectSeqHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> findObjectByTypeAsync(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_findObjectByTypeAsync(type, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<global::Ice.ObjectPrx> _iceI_findObjectByTypeAsync(string iceP_type, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_findObjectByType_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<global::Ice.ObjectPrx>(progress, cancel);
                _iceI_findObjectByType(iceP_type, context, synchronous, completed);
                return completed.Task;
            }

            private const string _findObjectByType_name = "findObjectByType";

            private void _iceI_findObjectByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<global::Ice.ObjectPrx>(completed);
                outAsync.invoke(
                    _findObjectByType_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_type);
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        global::Ice.ObjectPrx ret;
                        ret = istr.readProxy();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_ManagersLocator_findBoxModuleCreatorByIdentifier> begin_findBoxModuleCreatorByIdentifier(string identifier, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_findBoxModuleCreatorByIdentifier(identifier, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_findBoxModuleCreatorByIdentifier(string identifier, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findBoxModuleCreatorByIdentifier(identifier, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_findBoxModuleCreatorByIdentifier(string identifier, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findBoxModuleCreatorByIdentifier(identifier, context, callback, cookie, false);
            }

            public global::Ferda.Modules.BoxModuleFactoryCreatorPrx end_findBoxModuleCreatorByIdentifier(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findBoxModuleCreatorByIdentifier_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.BoxModuleFactoryCreatorPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersLocator_findBoxModuleCreatorByIdentifier> begin_findBoxModuleCreatorByIdentifier(string iceP_identifier, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_findBoxModuleCreatorByIdentifier_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersLocator_findBoxModuleCreatorByIdentifier, global::Ferda.Modules.BoxModuleFactoryCreatorPrx>(
                    (Callback_ManagersLocator_findBoxModuleCreatorByIdentifier cb, global::Ferda.Modules.BoxModuleFactoryCreatorPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _findBoxModuleCreatorByIdentifier_name, cookie, completedCallback);
                _iceI_findBoxModuleCreatorByIdentifier(iceP_identifier, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersLocator_findBoxModuleCreatorByBoxType> begin_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_findBoxModuleCreatorByBoxType(moduleType, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findBoxModuleCreatorByBoxType(moduleType, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findBoxModuleCreatorByBoxType(moduleType, context, callback, cookie, false);
            }

            public global::Ferda.Modules.BoxModuleFactoryCreatorPrx end_findBoxModuleCreatorByBoxType(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findBoxModuleCreatorByBoxType_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.BoxModuleFactoryCreatorPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersLocator_findBoxModuleCreatorByBoxType> begin_findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType iceP_moduleType, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_findBoxModuleCreatorByBoxType_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersLocator_findBoxModuleCreatorByBoxType, global::Ferda.Modules.BoxModuleFactoryCreatorPrx>(
                    (Callback_ManagersLocator_findBoxModuleCreatorByBoxType cb, global::Ferda.Modules.BoxModuleFactoryCreatorPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _findBoxModuleCreatorByBoxType_name, cookie, completedCallback);
                _iceI_findBoxModuleCreatorByBoxType(iceP_moduleType, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersLocator_findAllBoxModuleCreatorsWithBoxType> begin_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_findAllBoxModuleCreatorsWithBoxType(moduleType, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findAllBoxModuleCreatorsWithBoxType(moduleType, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findAllBoxModuleCreatorsWithBoxType(moduleType, context, callback, cookie, false);
            }

            public global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] end_findAllBoxModuleCreatorsWithBoxType(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findAllBoxModuleCreatorsWithBoxType_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.BoxModuleFactoryCreatorPrx[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersLocator_findAllBoxModuleCreatorsWithBoxType> begin_findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType iceP_moduleType, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_findAllBoxModuleCreatorsWithBoxType_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersLocator_findAllBoxModuleCreatorsWithBoxType, global::Ferda.Modules.BoxModuleFactoryCreatorPrx[]>(
                    (Callback_ManagersLocator_findAllBoxModuleCreatorsWithBoxType cb, global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _findAllBoxModuleCreatorsWithBoxType_name, cookie, completedCallback);
                _iceI_findAllBoxModuleCreatorsWithBoxType(iceP_moduleType, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersLocator_findSettingModule> begin_findSettingModule(string propertyIceId, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_findSettingModule(propertyIceId, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_findSettingModule(string propertyIceId, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findSettingModule(propertyIceId, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_findSettingModule(string propertyIceId, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findSettingModule(propertyIceId, context, callback, cookie, false);
            }

            public global::Ferda.Modules.SettingModulePrx end_findSettingModule(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findSettingModule_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.SettingModulePrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersLocator_findSettingModule> begin_findSettingModule(string iceP_propertyIceId, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_findSettingModule_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersLocator_findSettingModule, global::Ferda.Modules.SettingModulePrx>(
                    (Callback_ManagersLocator_findSettingModule cb, global::Ferda.Modules.SettingModulePrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _findSettingModule_name, cookie, completedCallback);
                _iceI_findSettingModule(iceP_propertyIceId, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersLocator_findModuleForInteraction> begin_findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_findModuleForInteraction(creator, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findModuleForInteraction(creator, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findModuleForInteraction(creator, context, callback, cookie, false);
            }

            public global::Ferda.Modules.ModuleForInteractionPrx end_findModuleForInteraction(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findModuleForInteraction_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.ModuleForInteractionPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersLocator_findModuleForInteraction> begin_findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx iceP_creator, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_findModuleForInteraction_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersLocator_findModuleForInteraction, global::Ferda.Modules.ModuleForInteractionPrx>(
                    (Callback_ManagersLocator_findModuleForInteraction cb, global::Ferda.Modules.ModuleForInteractionPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _findModuleForInteraction_name, cookie, completedCallback);
                _iceI_findModuleForInteraction(iceP_creator, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersLocator_findAllModulesForInteraction> begin_findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_findAllModulesForInteraction(creator, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findAllModulesForInteraction(creator, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findAllModulesForInteraction(creator, context, callback, cookie, false);
            }

            public global::Ferda.Modules.ModuleForInteractionPrx[] end_findAllModulesForInteraction(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findAllModulesForInteraction_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ferda.Modules.ModuleForInteractionPrx[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersLocator_findAllModulesForInteraction> begin_findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx iceP_creator, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_findAllModulesForInteraction_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersLocator_findAllModulesForInteraction, global::Ferda.Modules.ModuleForInteractionPrx[]>(
                    (Callback_ManagersLocator_findAllModulesForInteraction cb, global::Ferda.Modules.ModuleForInteractionPrx[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _findAllModulesForInteraction_name, cookie, completedCallback);
                _iceI_findAllModulesForInteraction(iceP_creator, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersLocator_findAllObjectsWithType> begin_findAllObjectsWithType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_findAllObjectsWithType(type, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_findAllObjectsWithType(string type, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findAllObjectsWithType(type, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_findAllObjectsWithType(string type, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findAllObjectsWithType(type, context, callback, cookie, false);
            }

            public global::Ice.ObjectPrx[] end_findAllObjectsWithType(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findAllObjectsWithType_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersLocator_findAllObjectsWithType> begin_findAllObjectsWithType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_findAllObjectsWithType_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersLocator_findAllObjectsWithType, global::Ice.ObjectPrx[]>(
                    (Callback_ManagersLocator_findAllObjectsWithType cb, global::Ice.ObjectPrx[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _findAllObjectsWithType_name, cookie, completedCallback);
                _iceI_findAllObjectsWithType(iceP_type, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersLocator_findObjectByType> begin_findObjectByType(string type, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_findObjectByType(type, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_findObjectByType(string type, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findObjectByType(type, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_findObjectByType(string type, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_findObjectByType(type, context, callback, cookie, false);
            }

            public global::Ice.ObjectPrx end_findObjectByType(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _findObjectByType_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<global::Ice.ObjectPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersLocator_findObjectByType> begin_findObjectByType(string iceP_type, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_findObjectByType_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersLocator_findObjectByType, global::Ice.ObjectPrx>(
                    (Callback_ManagersLocator_findObjectByType cb, global::Ice.ObjectPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _findObjectByType_name, cookie, completedCallback);
                _iceI_findObjectByType(iceP_type, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ManagersLocatorPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ManagersLocatorPrx r = b as ManagersLocatorPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ManagersLocatorPrxHelper h = new ManagersLocatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ManagersLocatorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ManagersLocatorPrx r = b as ManagersLocatorPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ManagersLocatorPrxHelper h = new ManagersLocatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ManagersLocatorPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ManagersLocatorPrxHelper h = new ManagersLocatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ManagersLocatorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ManagersLocatorPrxHelper h = new ManagersLocatorPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ManagersLocatorPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ManagersLocatorPrx r = b as ManagersLocatorPrx;
                if(r == null)
                {
                    ManagersLocatorPrxHelper h = new ManagersLocatorPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ManagersLocatorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ManagersLocatorPrxHelper h = new ManagersLocatorPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::ManagersLocator",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ManagersLocatorPrx v)
            {
                ostr.writeProxy(v);
            }

            public static ManagersLocatorPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ManagersLocatorPrxHelper result = new ManagersLocatorPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class ManagersEnginePrxHelper : global::Ice.ObjectPrxHelperBase, ManagersEnginePrx
        {
            public ManagersEnginePrxHelper()
            {
            }

            public ManagersEnginePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public OutputPrx getOutputInterface(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getOutputInterfaceAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModuleProjectInformationPrx getProjectInformation(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getProjectInformationAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModuleLockerPrx getBoxModuleLocker(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxModuleLockerAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModuleValidatorPrx getBoxModuleValidator(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxModuleValidatorAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public BoxModuleManagerPrx getBoxModuleManager(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getBoxModuleManagerAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public ManagersLocatorPrx getManagersLocator(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getManagersLocatorAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<OutputPrx> getOutputInterfaceAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getOutputInterfaceAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<OutputPrx> _iceI_getOutputInterfaceAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getOutputInterface_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<OutputPrx>(progress, cancel);
                _iceI_getOutputInterface(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getOutputInterface_name = "getOutputInterface";

            private void _iceI_getOutputInterface(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<OutputPrx>(completed);
                outAsync.invoke(
                    _getOutputInterface_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        OutputPrx ret;
                        ret = OutputPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModuleProjectInformationPrx> getProjectInformationAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getProjectInformationAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModuleProjectInformationPrx> _iceI_getProjectInformationAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getProjectInformation_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModuleProjectInformationPrx>(progress, cancel);
                _iceI_getProjectInformation(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getProjectInformation_name = "getProjectInformation";

            private void _iceI_getProjectInformation(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModuleProjectInformationPrx>(completed);
                outAsync.invoke(
                    _getProjectInformation_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModuleProjectInformationPrx ret;
                        ret = BoxModuleProjectInformationPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModuleLockerPrx> getBoxModuleLockerAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxModuleLockerAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModuleLockerPrx> _iceI_getBoxModuleLockerAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxModuleLocker_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModuleLockerPrx>(progress, cancel);
                _iceI_getBoxModuleLocker(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxModuleLocker_name = "getBoxModuleLocker";

            private void _iceI_getBoxModuleLocker(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModuleLockerPrx>(completed);
                outAsync.invoke(
                    _getBoxModuleLocker_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModuleLockerPrx ret;
                        ret = BoxModuleLockerPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModuleValidatorPrx> getBoxModuleValidatorAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxModuleValidatorAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModuleValidatorPrx> _iceI_getBoxModuleValidatorAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxModuleValidator_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModuleValidatorPrx>(progress, cancel);
                _iceI_getBoxModuleValidator(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxModuleValidator_name = "getBoxModuleValidator";

            private void _iceI_getBoxModuleValidator(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModuleValidatorPrx>(completed);
                outAsync.invoke(
                    _getBoxModuleValidator_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModuleValidatorPrx ret;
                        ret = BoxModuleValidatorPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<BoxModuleManagerPrx> getBoxModuleManagerAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getBoxModuleManagerAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<BoxModuleManagerPrx> _iceI_getBoxModuleManagerAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getBoxModuleManager_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<BoxModuleManagerPrx>(progress, cancel);
                _iceI_getBoxModuleManager(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getBoxModuleManager_name = "getBoxModuleManager";

            private void _iceI_getBoxModuleManager(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<BoxModuleManagerPrx>(completed);
                outAsync.invoke(
                    _getBoxModuleManager_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        BoxModuleManagerPrx ret;
                        ret = BoxModuleManagerPrxHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<ManagersLocatorPrx> getManagersLocatorAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getManagersLocatorAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ManagersLocatorPrx> _iceI_getManagersLocatorAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getManagersLocator_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<ManagersLocatorPrx>(progress, cancel);
                _iceI_getManagersLocator(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getManagersLocator_name = "getManagersLocator";

            private void _iceI_getManagersLocator(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ManagersLocatorPrx>(completed);
                outAsync.invoke(
                    _getManagersLocator_name,
                    global::Ice.OperationMode.Idempotent,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        ManagersLocatorPrx ret;
                        ret = ManagersLocatorPrxHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_ManagersEngine_getOutputInterface> begin_getOutputInterface(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getOutputInterface(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getOutputInterface(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getOutputInterface(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getOutputInterface(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getOutputInterface(context, callback, cookie, false);
            }

            public OutputPrx end_getOutputInterface(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getOutputInterface_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<OutputPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersEngine_getOutputInterface> begin_getOutputInterface(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getOutputInterface_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersEngine_getOutputInterface, OutputPrx>(
                    (Callback_ManagersEngine_getOutputInterface cb, OutputPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getOutputInterface_name, cookie, completedCallback);
                _iceI_getOutputInterface(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersEngine_getProjectInformation> begin_getProjectInformation(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getProjectInformation(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getProjectInformation(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProjectInformation(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getProjectInformation(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProjectInformation(context, callback, cookie, false);
            }

            public BoxModuleProjectInformationPrx end_getProjectInformation(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getProjectInformation_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModuleProjectInformationPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersEngine_getProjectInformation> begin_getProjectInformation(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getProjectInformation_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersEngine_getProjectInformation, BoxModuleProjectInformationPrx>(
                    (Callback_ManagersEngine_getProjectInformation cb, BoxModuleProjectInformationPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getProjectInformation_name, cookie, completedCallback);
                _iceI_getProjectInformation(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleLocker> begin_getBoxModuleLocker(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxModuleLocker(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleLocker(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleLocker(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleLocker(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleLocker(context, callback, cookie, false);
            }

            public BoxModuleLockerPrx end_getBoxModuleLocker(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxModuleLocker_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModuleLockerPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleLocker> begin_getBoxModuleLocker(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxModuleLocker_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersEngine_getBoxModuleLocker, BoxModuleLockerPrx>(
                    (Callback_ManagersEngine_getBoxModuleLocker cb, BoxModuleLockerPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxModuleLocker_name, cookie, completedCallback);
                _iceI_getBoxModuleLocker(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleValidator> begin_getBoxModuleValidator(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxModuleValidator(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleValidator(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleValidator(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleValidator(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleValidator(context, callback, cookie, false);
            }

            public BoxModuleValidatorPrx end_getBoxModuleValidator(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxModuleValidator_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModuleValidatorPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleValidator> begin_getBoxModuleValidator(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxModuleValidator_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersEngine_getBoxModuleValidator, BoxModuleValidatorPrx>(
                    (Callback_ManagersEngine_getBoxModuleValidator cb, BoxModuleValidatorPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxModuleValidator_name, cookie, completedCallback);
                _iceI_getBoxModuleValidator(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleManager> begin_getBoxModuleManager(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getBoxModuleManager(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleManager(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleManager(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getBoxModuleManager(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getBoxModuleManager(context, callback, cookie, false);
            }

            public BoxModuleManagerPrx end_getBoxModuleManager(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getBoxModuleManager_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<BoxModuleManagerPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersEngine_getBoxModuleManager> begin_getBoxModuleManager(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getBoxModuleManager_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersEngine_getBoxModuleManager, BoxModuleManagerPrx>(
                    (Callback_ManagersEngine_getBoxModuleManager cb, BoxModuleManagerPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getBoxModuleManager_name, cookie, completedCallback);
                _iceI_getBoxModuleManager(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ManagersEngine_getManagersLocator> begin_getManagersLocator(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getManagersLocator(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getManagersLocator(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getManagersLocator(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getManagersLocator(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getManagersLocator(context, callback, cookie, false);
            }

            public ManagersLocatorPrx end_getManagersLocator(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getManagersLocator_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<ManagersLocatorPrx>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ManagersEngine_getManagersLocator> begin_getManagersLocator(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getManagersLocator_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ManagersEngine_getManagersLocator, ManagersLocatorPrx>(
                    (Callback_ManagersEngine_getManagersLocator cb, ManagersLocatorPrx ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getManagersLocator_name, cookie, completedCallback);
                _iceI_getManagersLocator(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ManagersEnginePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ManagersEnginePrx r = b as ManagersEnginePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    ManagersEnginePrxHelper h = new ManagersEnginePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ManagersEnginePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                ManagersEnginePrx r = b as ManagersEnginePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ManagersEnginePrxHelper h = new ManagersEnginePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ManagersEnginePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        ManagersEnginePrxHelper h = new ManagersEnginePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ManagersEnginePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        ManagersEnginePrxHelper h = new ManagersEnginePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static ManagersEnginePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                ManagersEnginePrx r = b as ManagersEnginePrx;
                if(r == null)
                {
                    ManagersEnginePrxHelper h = new ManagersEnginePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static ManagersEnginePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ManagersEnginePrxHelper h = new ManagersEnginePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::ManagersEngine",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ManagersEnginePrx v)
            {
                ostr.writeProxy(v);
            }

            public static ManagersEnginePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    ManagersEnginePrxHelper result = new ManagersEnginePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace Ferda
{
    namespace ModulesManager
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class ProgressBarDisp_ : global::Ice.ObjectImpl, ProgressBar
        {
            #region Slice operations

            public abstract void setValue(float value, string message, global::Ice.Current current = null);

            public abstract void done(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::ProgressBar",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_setValue(ProgressBar obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                float iceP_value;
                string iceP_message;
                iceP_value = istr.readFloat();
                iceP_message = istr.readString();
                inS.endReadParams();
                obj.setValue(iceP_value, iceP_message, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_done(ProgressBar obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                obj.done(current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "done",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "setValue"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_done(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_setValue(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class OutputDisp_ : global::Ice.ObjectImpl, Output
        {
            #region Slice operations

            public abstract void writeMsg(MsgType type, string name, string message, global::Ice.Current current = null);

            public abstract ProgressBarPrx startProgress(global::Ferda.Modules.ProgressTaskPrx task, string name, string hint, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::Output",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_writeMsg(Output obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                MsgType iceP_type;
                string iceP_name;
                string iceP_message;
                iceP_type = (MsgType)istr.readEnum(3);
                iceP_name = istr.readString();
                iceP_message = istr.readString();
                inS.endReadParams();
                obj.writeMsg(iceP_type, iceP_name, iceP_message, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_startProgress(Output obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ferda.Modules.ProgressTaskPrx iceP_task;
                string iceP_name;
                string iceP_hint;
                iceP_task = global::Ferda.Modules.ProgressTaskPrxHelper.read(istr);
                iceP_name = istr.readString();
                iceP_hint = istr.readString();
                inS.endReadParams();
                var ret = obj.startProgress(iceP_task, iceP_name, iceP_hint, current);
                var ostr = inS.startWriteParams();
                ProgressBarPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "startProgress",
                "writeMsg"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_startProgress(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_writeMsg(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BoxModuleProjectInformationDisp_ : global::Ice.ObjectImpl, BoxModuleProjectInformation
        {
            #region Slice operations

            public abstract string getUserLabel(string boxModuleIceIdentity, global::Ice.Current current = null);

            public abstract string getUserHint(string boxModuleIceIdentity, global::Ice.Current current = null);

            public abstract int getProjectIdentifier(string boxModuleIceIdentity, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::BoxModuleProjectInformation",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getUserLabel(BoxModuleProjectInformation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_boxModuleIceIdentity;
                iceP_boxModuleIceIdentity = istr.readString();
                inS.endReadParams();
                var ret = obj.getUserLabel(iceP_boxModuleIceIdentity, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getUserHint(BoxModuleProjectInformation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_boxModuleIceIdentity;
                iceP_boxModuleIceIdentity = istr.readString();
                inS.endReadParams();
                var ret = obj.getUserHint(iceP_boxModuleIceIdentity, current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getProjectIdentifier(BoxModuleProjectInformation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_boxModuleIceIdentity;
                iceP_boxModuleIceIdentity = istr.readString();
                inS.endReadParams();
                var ret = obj.getProjectIdentifier(iceP_boxModuleIceIdentity, current);
                var ostr = inS.startWriteParams();
                ostr.writeInt(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getProjectIdentifier",
                "getUserHint",
                "getUserLabel",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getProjectIdentifier(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getUserHint(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getUserLabel(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BoxModuleLockerDisp_ : global::Ice.ObjectImpl, BoxModuleLocker
        {
            #region Slice operations

            public abstract void lockBoxModule(string boxModuleIceIdentity, global::Ice.Current current = null);

            public abstract void unlockBoxModule(string boxModuleIceIdentity, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::BoxModuleLocker",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_lockBoxModule(BoxModuleLocker obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_boxModuleIceIdentity;
                iceP_boxModuleIceIdentity = istr.readString();
                inS.endReadParams();
                obj.lockBoxModule(iceP_boxModuleIceIdentity, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_unlockBoxModule(BoxModuleLocker obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_boxModuleIceIdentity;
                iceP_boxModuleIceIdentity = istr.readString();
                inS.endReadParams();
                obj.unlockBoxModule(iceP_boxModuleIceIdentity, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "lockBoxModule",
                "unlockBoxModule"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_lockBoxModule(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_unlockBoxModule(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BoxModuleValidatorDisp_ : global::Ice.ObjectImpl, BoxModuleValidator
        {
            #region Slice operations

            public abstract void validate(string boxModuleIceIdentity, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::BoxModuleValidator",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_validate(BoxModuleValidator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_boxModuleIceIdentity;
                iceP_boxModuleIceIdentity = istr.readString();
                inS.endReadParams();
                obj.validate(iceP_boxModuleIceIdentity, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "validate"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_validate(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BoxModuleManagerDisp_ : global::Ice.ObjectImpl, BoxModuleManager
        {
            #region Slice operations

            public abstract global::Ferda.Modules.BoxModulePrx CloneBoxModuleWithChilds(global::Ferda.Modules.BoxModulePrx boxModule, bool addToProject, global::Ferda.Modules.BoxModulePrx[][] variables, global::Ferda.Modules.BoxModulePrx[] variableValues, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::BoxModuleManager",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_CloneBoxModuleWithChilds(BoxModuleManager obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                global::Ferda.Modules.BoxModulePrx iceP_boxModule;
                bool iceP_addToProject;
                global::Ferda.Modules.BoxModulePrx[][] iceP_variables;
                global::Ferda.Modules.BoxModulePrx[] iceP_variableValues;
                iceP_boxModule = global::Ferda.Modules.BoxModulePrxHelper.read(istr);
                iceP_addToProject = istr.readBool();
                iceP_variables = BoxModuleSeqSeqHelper.read(istr);
                iceP_variableValues = BoxModuleSeqHelper.read(istr);
                inS.endReadParams();
                var ret = obj.CloneBoxModuleWithChilds(iceP_boxModule, iceP_addToProject, iceP_variables, iceP_variableValues, current);
                var ostr = inS.startWriteParams();
                global::Ferda.Modules.BoxModulePrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "CloneBoxModuleWithChilds",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_CloneBoxModuleWithChilds(this, inS, current);
                    }
                    case 1:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class ManagersLocatorDisp_ : global::Ice.ObjectImpl, ManagersLocator
        {
            #region Slice operations

            public abstract global::Ferda.Modules.BoxModuleFactoryCreatorPrx findBoxModuleCreatorByIdentifier(string identifier, global::Ice.Current current = null);

            public abstract global::Ferda.Modules.BoxModuleFactoryCreatorPrx findBoxModuleCreatorByBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.Current current = null);

            public abstract global::Ferda.Modules.BoxModuleFactoryCreatorPrx[] findAllBoxModuleCreatorsWithBoxType(global::Ferda.Modules.BoxType moduleType, global::Ice.Current current = null);

            public abstract global::Ferda.Modules.SettingModulePrx findSettingModule(string propertyIceId, global::Ice.Current current = null);

            public abstract global::Ferda.Modules.ModuleForInteractionPrx findModuleForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.Current current = null);

            public abstract global::Ferda.Modules.ModuleForInteractionPrx[] findAllModulesForInteraction(global::Ferda.Modules.BoxModuleFactoryCreatorPrx creator, global::Ice.Current current = null);

            public abstract global::Ice.ObjectPrx[] findAllObjectsWithType(string type, global::Ice.Current current = null);

            public abstract global::Ice.ObjectPrx findObjectByType(string type, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::ManagersLocator",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_findBoxModuleCreatorByIdentifier(ManagersLocator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_identifier;
                iceP_identifier = istr.readString();
                inS.endReadParams();
                var ret = obj.findBoxModuleCreatorByIdentifier(iceP_identifier, current);
                var ostr = inS.startWriteParams();
                global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_findBoxModuleCreatorByBoxType(ManagersLocator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                global::Ferda.Modules.BoxType iceP_moduleType;
                iceP_moduleType = null;
                iceP_moduleType = global::Ferda.Modules.BoxType.ice_read(istr);
                inS.endReadParams();
                var ret = obj.findBoxModuleCreatorByBoxType(iceP_moduleType, current);
                var ostr = inS.startWriteParams();
                global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_findAllBoxModuleCreatorsWithBoxType(ManagersLocator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                global::Ferda.Modules.BoxType iceP_moduleType;
                iceP_moduleType = null;
                iceP_moduleType = global::Ferda.Modules.BoxType.ice_read(istr);
                inS.endReadParams();
                var ret = obj.findAllBoxModuleCreatorsWithBoxType(iceP_moduleType, current);
                var ostr = inS.startWriteParams();
                BoxModuleFactoryCreatorSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_findSettingModule(ManagersLocator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_propertyIceId;
                iceP_propertyIceId = istr.readString();
                inS.endReadParams();
                var ret = obj.findSettingModule(iceP_propertyIceId, current);
                var ostr = inS.startWriteParams();
                global::Ferda.Modules.SettingModulePrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_findModuleForInteraction(ManagersLocator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                global::Ferda.Modules.BoxModuleFactoryCreatorPrx iceP_creator;
                iceP_creator = global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.read(istr);
                inS.endReadParams();
                var ret = obj.findModuleForInteraction(iceP_creator, current);
                var ostr = inS.startWriteParams();
                global::Ferda.Modules.ModuleForInteractionPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_findAllModulesForInteraction(ManagersLocator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                global::Ferda.Modules.BoxModuleFactoryCreatorPrx iceP_creator;
                iceP_creator = global::Ferda.Modules.BoxModuleFactoryCreatorPrxHelper.read(istr);
                inS.endReadParams();
                var ret = obj.findAllModulesForInteraction(iceP_creator, current);
                var ostr = inS.startWriteParams();
                ModuleForInteractionSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_findAllObjectsWithType(ManagersLocator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_type;
                iceP_type = istr.readString();
                inS.endReadParams();
                var ret = obj.findAllObjectsWithType(iceP_type, current);
                var ostr = inS.startWriteParams();
                ObjectSeqHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_findObjectByType(ManagersLocator obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_type;
                iceP_type = istr.readString();
                inS.endReadParams();
                var ret = obj.findObjectByType(iceP_type, current);
                var ostr = inS.startWriteParams();
                ostr.writeProxy(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "findAllBoxModuleCreatorsWithBoxType",
                "findAllModulesForInteraction",
                "findAllObjectsWithType",
                "findBoxModuleCreatorByBoxType",
                "findBoxModuleCreatorByIdentifier",
                "findModuleForInteraction",
                "findObjectByType",
                "findSettingModule",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_findAllBoxModuleCreatorsWithBoxType(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_findAllModulesForInteraction(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_findAllObjectsWithType(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_findBoxModuleCreatorByBoxType(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_findBoxModuleCreatorByIdentifier(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_findModuleForInteraction(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_findObjectByType(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_findSettingModule(this, inS, current);
                    }
                    case 8:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 9:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 10:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 11:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class ManagersEngineDisp_ : global::Ice.ObjectImpl, ManagersEngine
        {
            #region Slice operations

            public abstract OutputPrx getOutputInterface(global::Ice.Current current = null);

            public abstract BoxModuleProjectInformationPrx getProjectInformation(global::Ice.Current current = null);

            public abstract BoxModuleLockerPrx getBoxModuleLocker(global::Ice.Current current = null);

            public abstract BoxModuleValidatorPrx getBoxModuleValidator(global::Ice.Current current = null);

            public abstract BoxModuleManagerPrx getBoxModuleManager(global::Ice.Current current = null);

            public abstract ManagersLocatorPrx getManagersLocator(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ferda::ModulesManager::ManagersEngine",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getOutputInterface(ManagersEngine obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getOutputInterface(current);
                var ostr = inS.startWriteParams();
                OutputPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getProjectInformation(ManagersEngine obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getProjectInformation(current);
                var ostr = inS.startWriteParams();
                BoxModuleProjectInformationPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getBoxModuleLocker(ManagersEngine obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getBoxModuleLocker(current);
                var ostr = inS.startWriteParams();
                BoxModuleLockerPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getBoxModuleValidator(ManagersEngine obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getBoxModuleValidator(current);
                var ostr = inS.startWriteParams();
                BoxModuleValidatorPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getBoxModuleManager(ManagersEngine obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getBoxModuleManager(current);
                var ostr = inS.startWriteParams();
                BoxModuleManagerPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getManagersLocator(ManagersEngine obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                var ret = obj.getManagersLocator(current);
                var ostr = inS.startWriteParams();
                ManagersLocatorPrxHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getBoxModuleLocker",
                "getBoxModuleManager",
                "getBoxModuleValidator",
                "getManagersLocator",
                "getOutputInterface",
                "getProjectInformation",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_getBoxModuleLocker(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getBoxModuleManager(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getBoxModuleValidator(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_getManagersLocator(this, inS, current);
                    }
                    case 4:
                    {
                        return iceD_getOutputInterface(this, inS, current);
                    }
                    case 5:
                    {
                        return iceD_getProjectInformation(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 7:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 8:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 9:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
