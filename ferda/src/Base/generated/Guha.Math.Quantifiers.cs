//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `Guha.Math.Quantifiers.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace Ferda
{
    namespace Guha
    {
        namespace MiningProcessor
        {
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public enum MissingInformationHandlingEnum
                {
                    Deleting,
                    Optimistic,
                    Secured
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class MissingInformationHandlingEnumHelper
                {
                    public static void write(global::Ice.OutputStream ostr, MissingInformationHandlingEnum v)
                    {
                        ostr.writeEnum((int)v, 2);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static MissingInformationHandlingEnum read(global::Ice.InputStream istr)
                    {
                        MissingInformationHandlingEnum v;
                        v = (MissingInformationHandlingEnum)istr.readEnum(2);
                        return v;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public enum OperationModeEnum
                {
                    FirstSetFrequencies,
                    SecondSetFrequencies,
                    DifferenceOfFrequencies,
                    DifferenceOfQuantifierValues
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class OperationModeEnumHelper
                {
                    public static void write(global::Ice.OutputStream ostr, OperationModeEnum v)
                    {
                        ostr.writeEnum((int)v, 3);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static OperationModeEnum read(global::Ice.InputStream istr)
                    {
                        OperationModeEnum v;
                        v = (OperationModeEnum)istr.readEnum(3);
                        return v;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public enum BoundTypeEnum
                {
                    Number,
                    All,
                    Half
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class BoundTypeEnumHelper
                {
                    public static void write(global::Ice.OutputStream ostr, BoundTypeEnum v)
                    {
                        ostr.writeEnum((int)v, 2);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static BoundTypeEnum read(global::Ice.InputStream istr)
                    {
                        BoundTypeEnum v;
                        v = (BoundTypeEnum)istr.readEnum(2);
                        return v;
                    }
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                [global::System.Serializable]
                public partial struct Bound
                {
                    #region Slice data members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public BoundTypeEnum boundType;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public int number;

                    #endregion

                    partial void ice_initialize();

                    #region Constructor

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public Bound(BoundTypeEnum boundType, int number)
                    {
                        this.boundType = boundType;
                        this.number = number;
                        ice_initialize();
                    }

                    #endregion

                    #region Object members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public override int GetHashCode()
                    {
                        int h_ = 5381;
                        global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::Math::Quantifiers::Bound");
                        global::IceInternal.HashUtil.hashAdd(ref h_, boundType);
                        global::IceInternal.HashUtil.hashAdd(ref h_, number);
                        return h_;
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public override bool Equals(object other)
                    {
                        if(!(other is Bound))
                        {
                            return false;
                        }
                        Bound o = (Bound)other;
                        if(!this.boundType.Equals(o.boundType))
                        {
                            return false;
                        }
                        if(!this.number.Equals(o.number))
                        {
                            return false;
                        }
                        return true;
                    }

                    #endregion

                    #region Comparison members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static bool operator==(Bound lhs, Bound rhs)
                    {
                        return Equals(lhs, rhs);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static bool operator!=(Bound lhs, Bound rhs)
                    {
                        return !Equals(lhs, rhs);
                    }

                    #endregion

                    #region Marshaling support

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public void ice_writeMembers(global::Ice.OutputStream ostr)
                    {
                        ostr.writeEnum((int)this.boundType, 2);
                        ostr.writeInt(this.number);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public void ice_readMembers(global::Ice.InputStream istr)
                    {
                        this.boundType = (BoundTypeEnum)istr.readEnum(2);
                        this.number = istr.readInt();
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static void ice_write(global::Ice.OutputStream ostr, Bound v)
                    {
                        v.ice_writeMembers(ostr);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static Bound ice_read(global::Ice.InputStream istr)
                    {
                        var v = new Bound();
                        v.ice_readMembers(istr);
                        return v;
                    }

                    #endregion
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public enum QuantifierClassEnum
                {
                    Unknown,
                    Implicational,
                    DoubleImplicational,
                    SigmaDoubleImplicational,
                    Equivalency,
                    SigmaEquivalency,
                    Symetrical,
                    FPropertyQuantifier
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class QuantifierClassEnumHelper
                {
                    public static void write(global::Ice.OutputStream ostr, QuantifierClassEnum v)
                    {
                        ostr.writeEnum((int)v, 7);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static QuantifierClassEnum read(global::Ice.InputStream istr)
                    {
                        QuantifierClassEnum v;
                        v = (QuantifierClassEnum)istr.readEnum(7);
                        return v;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public enum PerformanceDifficultyEnum
                {
                    Easy,
                    QuiteEasy,
                    Medium,
                    QuiteDifficult,
                    Difficult
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class PerformanceDifficultyEnumHelper
                {
                    public static void write(global::Ice.OutputStream ostr, PerformanceDifficultyEnum v)
                    {
                        ostr.writeEnum((int)v, 4);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static PerformanceDifficultyEnum read(global::Ice.InputStream istr)
                    {
                        PerformanceDifficultyEnum v;
                        v = (PerformanceDifficultyEnum)istr.readEnum(4);
                        return v;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public enum UnitsEnum
                {
                    Irrelevant,
                    AbsoluteNumber,
                    RelativeToActCondition,
                    RelativeToAllObjects,
                    RelativeToMaxFrequency
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class UnitsEnumHelper
                {
                    public static void write(global::Ice.OutputStream ostr, UnitsEnum v)
                    {
                        ostr.writeEnum((int)v, 4);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static UnitsEnum read(global::Ice.InputStream istr)
                    {
                        UnitsEnum v;
                        v = (UnitsEnum)istr.readEnum(4);
                        return v;
                    }
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                [global::System.Serializable]
                public partial class QuantifierSetting : global::System.ICloneable
                {
                    #region Slice data members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public string stringIceIdentity;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public string boxTypeIdentifier;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public MissingInformationHandlingEnum missingInformationHandling;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public OperationModeEnum operationMode;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public global::Ferda.Guha.Math.RelationEnum relation;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public double treshold;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public Bound FromRow;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public Bound ToRow;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public Bound FromColumn;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public Bound ToColumn;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public QuantifierClassEnum[] quantifierClasses;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public PerformanceDifficultyEnum performanceDifficulty;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public bool needsNumericValues;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public global::Ferda.Guha.Data.CardinalityEnum supportedData;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public UnitsEnum units;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public bool supportsFloatContingencyTable;

                    #endregion

                    partial void ice_initialize();

                    #region Constructors

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public QuantifierSetting()
                    {
                        this.stringIceIdentity = "";
                        this.boxTypeIdentifier = "";
                        this.FromRow = new Bound();
                        this.ToRow = new Bound();
                        this.FromColumn = new Bound();
                        this.ToColumn = new Bound();
                        ice_initialize();
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public QuantifierSetting(string stringIceIdentity, string boxTypeIdentifier, MissingInformationHandlingEnum missingInformationHandling, OperationModeEnum operationMode, global::Ferda.Guha.Math.RelationEnum relation, double treshold, Bound FromRow, Bound ToRow, Bound FromColumn, Bound ToColumn, QuantifierClassEnum[] quantifierClasses, PerformanceDifficultyEnum performanceDifficulty, bool needsNumericValues, global::Ferda.Guha.Data.CardinalityEnum supportedData, UnitsEnum units, bool supportsFloatContingencyTable)
                    {
                        this.stringIceIdentity = stringIceIdentity;
                        this.boxTypeIdentifier = boxTypeIdentifier;
                        this.missingInformationHandling = missingInformationHandling;
                        this.operationMode = operationMode;
                        this.relation = relation;
                        this.treshold = treshold;
                        this.FromRow = FromRow;
                        this.ToRow = ToRow;
                        this.FromColumn = FromColumn;
                        this.ToColumn = ToColumn;
                        this.quantifierClasses = quantifierClasses;
                        this.performanceDifficulty = performanceDifficulty;
                        this.needsNumericValues = needsNumericValues;
                        this.supportedData = supportedData;
                        this.units = units;
                        this.supportsFloatContingencyTable = supportsFloatContingencyTable;
                        ice_initialize();
                    }

                    #endregion

                    #region ICloneable members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public object Clone()
                    {
                        return MemberwiseClone();
                    }

                    #endregion

                    #region Object members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public override int GetHashCode()
                    {
                        int h_ = 5381;
                        global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::Math::Quantifiers::QuantifierSetting");
                        global::IceInternal.HashUtil.hashAdd(ref h_, stringIceIdentity);
                        global::IceInternal.HashUtil.hashAdd(ref h_, boxTypeIdentifier);
                        global::IceInternal.HashUtil.hashAdd(ref h_, missingInformationHandling);
                        global::IceInternal.HashUtil.hashAdd(ref h_, operationMode);
                        global::IceInternal.HashUtil.hashAdd(ref h_, relation);
                        global::IceInternal.HashUtil.hashAdd(ref h_, treshold);
                        global::IceInternal.HashUtil.hashAdd(ref h_, FromRow);
                        global::IceInternal.HashUtil.hashAdd(ref h_, ToRow);
                        global::IceInternal.HashUtil.hashAdd(ref h_, FromColumn);
                        global::IceInternal.HashUtil.hashAdd(ref h_, ToColumn);
                        global::IceInternal.HashUtil.hashAdd(ref h_, quantifierClasses);
                        global::IceInternal.HashUtil.hashAdd(ref h_, performanceDifficulty);
                        global::IceInternal.HashUtil.hashAdd(ref h_, needsNumericValues);
                        global::IceInternal.HashUtil.hashAdd(ref h_, supportedData);
                        global::IceInternal.HashUtil.hashAdd(ref h_, units);
                        global::IceInternal.HashUtil.hashAdd(ref h_, supportsFloatContingencyTable);
                        return h_;
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public override bool Equals(object other)
                    {
                        if(object.ReferenceEquals(this, other))
                        {
                            return true;
                        }
                        if(other == null)
                        {
                            return false;
                        }
                        if(GetType() != other.GetType())
                        {
                            return false;
                        }
                        QuantifierSetting o = (QuantifierSetting)other;
                        if(this.stringIceIdentity == null)
                        {
                            if(o.stringIceIdentity != null)
                            {
                                return false;
                            }
                        }
                        else
                        {
                            if(!this.stringIceIdentity.Equals(o.stringIceIdentity))
                            {
                                return false;
                            }
                        }
                        if(this.boxTypeIdentifier == null)
                        {
                            if(o.boxTypeIdentifier != null)
                            {
                                return false;
                            }
                        }
                        else
                        {
                            if(!this.boxTypeIdentifier.Equals(o.boxTypeIdentifier))
                            {
                                return false;
                            }
                        }
                        if(!this.missingInformationHandling.Equals(o.missingInformationHandling))
                        {
                            return false;
                        }
                        if(!this.operationMode.Equals(o.operationMode))
                        {
                            return false;
                        }
                        if(!this.relation.Equals(o.relation))
                        {
                            return false;
                        }
                        if(!this.treshold.Equals(o.treshold))
                        {
                            return false;
                        }
                        if(!this.FromRow.Equals(o.FromRow))
                        {
                            return false;
                        }
                        if(!this.ToRow.Equals(o.ToRow))
                        {
                            return false;
                        }
                        if(!this.FromColumn.Equals(o.FromColumn))
                        {
                            return false;
                        }
                        if(!this.ToColumn.Equals(o.ToColumn))
                        {
                            return false;
                        }
                        if(this.quantifierClasses == null)
                        {
                            if(o.quantifierClasses != null)
                            {
                                return false;
                            }
                        }
                        else
                        {
                            if(!IceUtilInternal.Arrays.Equals(this.quantifierClasses, o.quantifierClasses))
                            {
                                return false;
                            }
                        }
                        if(!this.performanceDifficulty.Equals(o.performanceDifficulty))
                        {
                            return false;
                        }
                        if(!this.needsNumericValues.Equals(o.needsNumericValues))
                        {
                            return false;
                        }
                        if(!this.supportedData.Equals(o.supportedData))
                        {
                            return false;
                        }
                        if(!this.units.Equals(o.units))
                        {
                            return false;
                        }
                        if(!this.supportsFloatContingencyTable.Equals(o.supportsFloatContingencyTable))
                        {
                            return false;
                        }
                        return true;
                    }

                    #endregion

                    #region Comparison members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static bool operator==(QuantifierSetting lhs, QuantifierSetting rhs)
                    {
                        return Equals(lhs, rhs);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static bool operator!=(QuantifierSetting lhs, QuantifierSetting rhs)
                    {
                        return !Equals(lhs, rhs);
                    }

                    #endregion

                    #region Marshaling support

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public void ice_writeMembers(global::Ice.OutputStream ostr)
                    {
                        ostr.writeString(this.stringIceIdentity);
                        ostr.writeString(this.boxTypeIdentifier);
                        ostr.writeEnum((int)this.missingInformationHandling, 2);
                        ostr.writeEnum((int)this.operationMode, 3);
                        ostr.writeEnum((int)this.relation, 4);
                        ostr.writeDouble(this.treshold);
                        this.FromRow.ice_writeMembers(ostr);
                        this.ToRow.ice_writeMembers(ostr);
                        this.FromColumn.ice_writeMembers(ostr);
                        this.ToColumn.ice_writeMembers(ostr);
                        QuantifierClassEnumSeqHelper.write(ostr, this.quantifierClasses);
                        ostr.writeEnum((int)this.performanceDifficulty, 4);
                        ostr.writeBool(this.needsNumericValues);
                        ostr.writeEnum((int)this.supportedData, 3);
                        ostr.writeEnum((int)this.units, 4);
                        ostr.writeBool(this.supportsFloatContingencyTable);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public void ice_readMembers(global::Ice.InputStream istr)
                    {
                        this.stringIceIdentity = istr.readString();
                        this.boxTypeIdentifier = istr.readString();
                        this.missingInformationHandling = (MissingInformationHandlingEnum)istr.readEnum(2);
                        this.operationMode = (OperationModeEnum)istr.readEnum(3);
                        this.relation = (global::Ferda.Guha.Math.RelationEnum)istr.readEnum(4);
                        this.treshold = istr.readDouble();
                        this.FromRow.ice_readMembers(istr);
                        this.ToRow.ice_readMembers(istr);
                        this.FromColumn.ice_readMembers(istr);
                        this.ToColumn.ice_readMembers(istr);
                        this.quantifierClasses = QuantifierClassEnumSeqHelper.read(istr);
                        this.performanceDifficulty = (PerformanceDifficultyEnum)istr.readEnum(4);
                        this.needsNumericValues = istr.readBool();
                        this.supportedData = (global::Ferda.Guha.Data.CardinalityEnum)istr.readEnum(3);
                        this.units = (UnitsEnum)istr.readEnum(4);
                        this.supportsFloatContingencyTable = istr.readBool();
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static void ice_write(global::Ice.OutputStream ostr, QuantifierSetting v)
                    {
                        if(v == null)
                        {
                            _nullMarshalValue.ice_writeMembers(ostr);
                        }
                        else
                        {
                            v.ice_writeMembers(ostr);
                        }
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static QuantifierSetting ice_read(global::Ice.InputStream istr)
                    {
                        var v = new QuantifierSetting();
                        v.ice_readMembers(istr);
                        return v;
                    }

                    private static readonly QuantifierSetting _nullMarshalValue = new QuantifierSetting();

                    #endregion
                }

                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                [global::System.Serializable]
                public partial class QuantifierEvaluateSetting : global::System.ICloneable
                {
                    #region Slice data members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public double[][] contingencyTable;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public double denominator;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public global::Ferda.Modules.GuidStruct numericValuesAttributeId;

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public global::Ferda.Guha.MiningProcessor.BitStringGeneratorPrx numericValuesProviders;

                    #endregion

                    partial void ice_initialize();

                    #region Constructors

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public QuantifierEvaluateSetting()
                    {
                        this.numericValuesAttributeId = new global::Ferda.Modules.GuidStruct();
                        ice_initialize();
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public QuantifierEvaluateSetting(double[][] contingencyTable, double denominator, global::Ferda.Modules.GuidStruct numericValuesAttributeId, global::Ferda.Guha.MiningProcessor.BitStringGeneratorPrx numericValuesProviders)
                    {
                        this.contingencyTable = contingencyTable;
                        this.denominator = denominator;
                        this.numericValuesAttributeId = numericValuesAttributeId;
                        this.numericValuesProviders = numericValuesProviders;
                        ice_initialize();
                    }

                    #endregion

                    #region ICloneable members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public object Clone()
                    {
                        return MemberwiseClone();
                    }

                    #endregion

                    #region Object members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public override int GetHashCode()
                    {
                        int h_ = 5381;
                        global::IceInternal.HashUtil.hashAdd(ref h_, "::Ferda::Guha::Math::Quantifiers::QuantifierEvaluateSetting");
                        global::IceInternal.HashUtil.hashAdd(ref h_, contingencyTable);
                        global::IceInternal.HashUtil.hashAdd(ref h_, denominator);
                        global::IceInternal.HashUtil.hashAdd(ref h_, numericValuesAttributeId);
                        global::IceInternal.HashUtil.hashAdd(ref h_, numericValuesProviders);
                        return h_;
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public override bool Equals(object other)
                    {
                        if(object.ReferenceEquals(this, other))
                        {
                            return true;
                        }
                        if(other == null)
                        {
                            return false;
                        }
                        if(GetType() != other.GetType())
                        {
                            return false;
                        }
                        QuantifierEvaluateSetting o = (QuantifierEvaluateSetting)other;
                        if(this.contingencyTable == null)
                        {
                            if(o.contingencyTable != null)
                            {
                                return false;
                            }
                        }
                        else
                        {
                            if(!IceUtilInternal.Arrays.Equals(this.contingencyTable, o.contingencyTable))
                            {
                                return false;
                            }
                        }
                        if(!this.denominator.Equals(o.denominator))
                        {
                            return false;
                        }
                        if(this.numericValuesAttributeId == null)
                        {
                            if(o.numericValuesAttributeId != null)
                            {
                                return false;
                            }
                        }
                        else
                        {
                            if(!this.numericValuesAttributeId.Equals(o.numericValuesAttributeId))
                            {
                                return false;
                            }
                        }
                        if(this.numericValuesProviders == null)
                        {
                            if(o.numericValuesProviders != null)
                            {
                                return false;
                            }
                        }
                        else
                        {
                            if(!this.numericValuesProviders.Equals(o.numericValuesProviders))
                            {
                                return false;
                            }
                        }
                        return true;
                    }

                    #endregion

                    #region Comparison members

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static bool operator==(QuantifierEvaluateSetting lhs, QuantifierEvaluateSetting rhs)
                    {
                        return Equals(lhs, rhs);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static bool operator!=(QuantifierEvaluateSetting lhs, QuantifierEvaluateSetting rhs)
                    {
                        return !Equals(lhs, rhs);
                    }

                    #endregion

                    #region Marshaling support

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public void ice_writeMembers(global::Ice.OutputStream ostr)
                    {
                        global::Ferda.Modules.DoubleSeqSeqHelper.write(ostr, this.contingencyTable);
                        ostr.writeDouble(this.denominator);
                        global::Ferda.Modules.GuidStruct.ice_write(ostr, this.numericValuesAttributeId);
                        global::Ferda.Guha.MiningProcessor.BitStringGeneratorPrxHelper.write(ostr, this.numericValuesProviders);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public void ice_readMembers(global::Ice.InputStream istr)
                    {
                        this.contingencyTable = global::Ferda.Modules.DoubleSeqSeqHelper.read(istr);
                        this.denominator = istr.readDouble();
                        this.numericValuesAttributeId = global::Ferda.Modules.GuidStruct.ice_read(istr);
                        this.numericValuesProviders = global::Ferda.Guha.MiningProcessor.BitStringGeneratorPrxHelper.read(istr);
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static void ice_write(global::Ice.OutputStream ostr, QuantifierEvaluateSetting v)
                    {
                        if(v == null)
                        {
                            _nullMarshalValue.ice_writeMembers(ostr);
                        }
                        else
                        {
                            v.ice_writeMembers(ostr);
                        }
                    }

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    public static QuantifierEvaluateSetting ice_read(global::Ice.InputStream istr)
                    {
                        var v = new QuantifierEvaluateSetting();
                        v.ice_readMembers(istr);
                        return v;
                    }

                    private static readonly QuantifierEvaluateSetting _nullMarshalValue = new QuantifierEvaluateSetting();

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface QuantifierBaseFunctions : global::Ice.Object, QuantifierBaseFunctionsOperations_
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface QuantifierValueBaseFunctions : global::Ice.Object, QuantifierValueBaseFunctionsOperations_
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface QuantifierValidFunctions : global::Ice.Object, QuantifierValidFunctionsOperations_, QuantifierBaseFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface QuantifierSignificantValueFunctions : global::Ice.Object, QuantifierSignificantValueFunctionsOperations_, QuantifierBaseFunctions, QuantifierValueBaseFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface QuantifierValueFunctions : global::Ice.Object, QuantifierValueFunctionsOperations_, QuantifierBaseFunctions, QuantifierValueBaseFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldValid : global::Ice.Object, FourFoldValidOperations_, QuantifierValidFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface TwoDimensionsValid : global::Ice.Object, TwoDimensionsValidOperations_, QuantifierValidFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface SingleDimensionValid : global::Ice.Object, SingleDimensionValidOperations_, QuantifierValidFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldTwoDimensionsValid : global::Ice.Object, FourFoldTwoDimensionsValidOperations_, QuantifierValidFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldSingleDimensionValid : global::Ice.Object, FourFoldSingleDimensionValidOperations_, QuantifierValidFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface SingleDimensionTwoDimensionsValid : global::Ice.Object, SingleDimensionTwoDimensionsValidOperations_, QuantifierValidFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldSingleDimensionTwoDimensionsValid : global::Ice.Object, FourFoldSingleDimensionTwoDimensionsValidOperations_, QuantifierValidFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldValue : global::Ice.Object, FourFoldValueOperations_, QuantifierValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface TwoDimensionsValue : global::Ice.Object, TwoDimensionsValueOperations_, QuantifierValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface SingleDimensionValue : global::Ice.Object, SingleDimensionValueOperations_, QuantifierValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldTwoDimensionsValue : global::Ice.Object, FourFoldTwoDimensionsValueOperations_, QuantifierValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldSingleDimensionValue : global::Ice.Object, FourFoldSingleDimensionValueOperations_, QuantifierValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface SingleDimensionTwoDimensionsValue : global::Ice.Object, SingleDimensionTwoDimensionsValueOperations_, QuantifierValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldSingleDimensionTwoDimensionsValue : global::Ice.Object, FourFoldSingleDimensionTwoDimensionsValueOperations_, QuantifierValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldSignificantValue : global::Ice.Object, FourFoldSignificantValueOperations_, QuantifierSignificantValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface TwoDimensionsSignificantValue : global::Ice.Object, TwoDimensionsSignificantValueOperations_, QuantifierSignificantValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface SingleDimensionSignificantValue : global::Ice.Object, SingleDimensionSignificantValueOperations_, QuantifierSignificantValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldTwoDimensionsSignificantValue : global::Ice.Object, FourFoldTwoDimensionsSignificantValueOperations_, QuantifierSignificantValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldSingleDimensionSignificantValue : global::Ice.Object, FourFoldSingleDimensionSignificantValueOperations_, QuantifierSignificantValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface SingleDimensionTwoDimensionsSignificantValue : global::Ice.Object, SingleDimensionTwoDimensionsSignificantValueOperations_, QuantifierSignificantValueFunctions
                {
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface FourFoldSingleDimensionTwoDimensionsSignificantValue : global::Ice.Object, FourFoldSingleDimensionTwoDimensionsSignificantValueOperations_, QuantifierSignificantValueFunctions
                {
                }
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierBaseFunctions_GetQuantifierSetting(QuantifierSetting ret);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel(string ret);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel(string ret);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierBaseFunctions_Compute(bool ret);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierBaseFunctions_ComputeBatch(bool[] ret);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierBaseFunctions_BeginOfUse();

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierBaseFunctions_EndOfUse();

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierValueBaseFunctions_ComputeValidValue(bool ret, double value);

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public delegate void Callback_QuantifierValueFunctions_ComputeValue(double ret);
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
                public struct QuantifierValueBaseFunctions_ComputeValidValueResult
                {
                    public QuantifierValueBaseFunctions_ComputeValidValueResult(bool returnValue, double value)
                    {
                        this.returnValue = returnValue;
                        this.value = value;
                    }

                    public bool returnValue;
                    public double value;
                }
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierBaseFunctionsPrx : global::Ice.ObjectPrx
                {
                    QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult);

                    string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult);

                    string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult);

                    bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    bool end_Compute(global::Ice.AsyncResult asyncResult);

                    bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult);

                    void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    void end_BeginOfUse(global::Ice.AsyncResult asyncResult);

                    void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    void end_EndOfUse(global::Ice.AsyncResult asyncResult);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierValueBaseFunctionsPrx : global::Ice.ObjectPrx
                {
                    bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierValidFunctionsPrx : QuantifierBaseFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierSignificantValueFunctionsPrx : QuantifierBaseFunctionsPrx, QuantifierValueBaseFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierValueFunctionsPrx : QuantifierBaseFunctionsPrx, QuantifierValueBaseFunctionsPrx
                {
                    double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

                    global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

                    global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie);

                    global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

                    double end_ComputeValue(global::Ice.AsyncResult asyncResult);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldValidPrx : QuantifierValidFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface TwoDimensionsValidPrx : QuantifierValidFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionValidPrx : QuantifierValidFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldTwoDimensionsValidPrx : QuantifierValidFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionValidPrx : QuantifierValidFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionTwoDimensionsValidPrx : QuantifierValidFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionTwoDimensionsValidPrx : QuantifierValidFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldValuePrx : QuantifierValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface TwoDimensionsValuePrx : QuantifierValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionValuePrx : QuantifierValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldTwoDimensionsValuePrx : QuantifierValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionValuePrx : QuantifierValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionTwoDimensionsValuePrx : QuantifierValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionTwoDimensionsValuePrx : QuantifierValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSignificantValuePrx : QuantifierSignificantValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface TwoDimensionsSignificantValuePrx : QuantifierSignificantValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionSignificantValuePrx : QuantifierSignificantValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldTwoDimensionsSignificantValuePrx : QuantifierSignificantValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionSignificantValuePrx : QuantifierSignificantValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionTwoDimensionsSignificantValuePrx : QuantifierSignificantValueFunctionsPrx
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionTwoDimensionsSignificantValuePrx : QuantifierSignificantValueFunctionsPrx
                {
                }
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierBaseFunctionsOperations_
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    void BeginOfUse(global::Ice.Current current = null);

                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    void EndOfUse(global::Ice.Current current = null);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierValueBaseFunctionsOperations_
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierValidFunctionsOperations_ : QuantifierBaseFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierSignificantValueFunctionsOperations_ : QuantifierBaseFunctionsOperations_, QuantifierValueBaseFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface QuantifierValueFunctionsOperations_ : QuantifierBaseFunctionsOperations_, QuantifierValueBaseFunctionsOperations_
                {
                    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                    double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldValidOperations_ : QuantifierValidFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface TwoDimensionsValidOperations_ : QuantifierValidFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionValidOperations_ : QuantifierValidFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldTwoDimensionsValidOperations_ : QuantifierValidFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionValidOperations_ : QuantifierValidFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionTwoDimensionsValidOperations_ : QuantifierValidFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionTwoDimensionsValidOperations_ : QuantifierValidFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldValueOperations_ : QuantifierValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface TwoDimensionsValueOperations_ : QuantifierValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionValueOperations_ : QuantifierValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldTwoDimensionsValueOperations_ : QuantifierValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionValueOperations_ : QuantifierValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionTwoDimensionsValueOperations_ : QuantifierValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionTwoDimensionsValueOperations_ : QuantifierValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSignificantValueOperations_ : QuantifierSignificantValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface TwoDimensionsSignificantValueOperations_ : QuantifierSignificantValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionSignificantValueOperations_ : QuantifierSignificantValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldTwoDimensionsSignificantValueOperations_ : QuantifierSignificantValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionSignificantValueOperations_ : QuantifierSignificantValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface SingleDimensionTwoDimensionsSignificantValueOperations_ : QuantifierSignificantValueFunctionsOperations_
                {
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public interface FourFoldSingleDimensionTwoDimensionsSignificantValueOperations_ : QuantifierSignificantValueFunctionsOperations_
                {
                }
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class QuantifierClassEnumSeqHelper
                {
                    public static void write(global::Ice.OutputStream ostr, QuantifierClassEnum[] v)
                    {
                        if(v == null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Length);
                            for(int ix = 0; ix < v.Length; ++ix)
                            {
                                ostr.writeEnum((int)v[ix], 7);
                            }
                        }
                    }

                    public static QuantifierClassEnum[] read(global::Ice.InputStream istr)
                    {
                        QuantifierClassEnum[] v;
                        {
                            int szx = istr.readAndCheckSeqSize(1);
                            v = new QuantifierClassEnum[szx];
                            for(int ix = 0; ix < szx; ++ix)
                            {
                                v[ix] = (QuantifierClassEnum)istr.readEnum(7);
                            }
                        }
                        return v;
                    }
                }

                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public sealed class QuantifierEvaluateSettingSeqHelper
                {
                    public static void write(global::Ice.OutputStream ostr, QuantifierEvaluateSetting[] v)
                    {
                        if(v == null)
                        {
                            ostr.writeSize(0);
                        }
                        else
                        {
                            ostr.writeSize(v.Length);
                            for(int ix = 0; ix < v.Length; ++ix)
                            {
                                (v[ix] == null ? new QuantifierEvaluateSetting() : v[ix]).ice_writeMembers(ostr);
                            }
                        }
                    }

                    public static QuantifierEvaluateSetting[] read(global::Ice.InputStream istr)
                    {
                        QuantifierEvaluateSetting[] v;
                        {
                            int szx = istr.readAndCheckSeqSize(12);
                            v = new QuantifierEvaluateSetting[szx];
                            for(int ix = 0; ix < szx; ++ix)
                            {
                                v[ix] = new QuantifierEvaluateSetting();
                                v[ix].ice_readMembers(istr);
                            }
                        }
                        return v;
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class QuantifierBaseFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, QuantifierBaseFunctionsPrx
                {
                    public QuantifierBaseFunctionsPrxHelper()
                    {
                    }

                    public QuantifierBaseFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static QuantifierBaseFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierBaseFunctionsPrx r = b as QuantifierBaseFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            QuantifierBaseFunctionsPrxHelper h = new QuantifierBaseFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierBaseFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierBaseFunctionsPrx r = b as QuantifierBaseFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            QuantifierBaseFunctionsPrxHelper h = new QuantifierBaseFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierBaseFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                QuantifierBaseFunctionsPrxHelper h = new QuantifierBaseFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierBaseFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                QuantifierBaseFunctionsPrxHelper h = new QuantifierBaseFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierBaseFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierBaseFunctionsPrx r = b as QuantifierBaseFunctionsPrx;
                        if(r == null)
                        {
                            QuantifierBaseFunctionsPrxHelper h = new QuantifierBaseFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierBaseFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        QuantifierBaseFunctionsPrxHelper h = new QuantifierBaseFunctionsPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, QuantifierBaseFunctionsPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static QuantifierBaseFunctionsPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            QuantifierBaseFunctionsPrxHelper result = new QuantifierBaseFunctionsPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class QuantifierValueBaseFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, QuantifierValueBaseFunctionsPrx
                {
                    public QuantifierValueBaseFunctionsPrxHelper()
                    {
                    }

                    public QuantifierValueBaseFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static QuantifierValueBaseFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValueBaseFunctionsPrx r = b as QuantifierValueBaseFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            QuantifierValueBaseFunctionsPrxHelper h = new QuantifierValueBaseFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValueBaseFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValueBaseFunctionsPrx r = b as QuantifierValueBaseFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            QuantifierValueBaseFunctionsPrxHelper h = new QuantifierValueBaseFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValueBaseFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                QuantifierValueBaseFunctionsPrxHelper h = new QuantifierValueBaseFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierValueBaseFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                QuantifierValueBaseFunctionsPrxHelper h = new QuantifierValueBaseFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierValueBaseFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValueBaseFunctionsPrx r = b as QuantifierValueBaseFunctionsPrx;
                        if(r == null)
                        {
                            QuantifierValueBaseFunctionsPrxHelper h = new QuantifierValueBaseFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValueBaseFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        QuantifierValueBaseFunctionsPrxHelper h = new QuantifierValueBaseFunctionsPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, QuantifierValueBaseFunctionsPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static QuantifierValueBaseFunctionsPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            QuantifierValueBaseFunctionsPrxHelper result = new QuantifierValueBaseFunctionsPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class QuantifierValidFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, QuantifierValidFunctionsPrx
                {
                    public QuantifierValidFunctionsPrxHelper()
                    {
                    }

                    public QuantifierValidFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static QuantifierValidFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValidFunctionsPrx r = b as QuantifierValidFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            QuantifierValidFunctionsPrxHelper h = new QuantifierValidFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValidFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValidFunctionsPrx r = b as QuantifierValidFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            QuantifierValidFunctionsPrxHelper h = new QuantifierValidFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValidFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                QuantifierValidFunctionsPrxHelper h = new QuantifierValidFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierValidFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                QuantifierValidFunctionsPrxHelper h = new QuantifierValidFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierValidFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValidFunctionsPrx r = b as QuantifierValidFunctionsPrx;
                        if(r == null)
                        {
                            QuantifierValidFunctionsPrxHelper h = new QuantifierValidFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValidFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        QuantifierValidFunctionsPrxHelper h = new QuantifierValidFunctionsPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[1];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, QuantifierValidFunctionsPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static QuantifierValidFunctionsPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            QuantifierValidFunctionsPrxHelper result = new QuantifierValidFunctionsPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class QuantifierSignificantValueFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, QuantifierSignificantValueFunctionsPrx
                {
                    public QuantifierSignificantValueFunctionsPrxHelper()
                    {
                    }

                    public QuantifierSignificantValueFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static QuantifierSignificantValueFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierSignificantValueFunctionsPrx r = b as QuantifierSignificantValueFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            QuantifierSignificantValueFunctionsPrxHelper h = new QuantifierSignificantValueFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierSignificantValueFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierSignificantValueFunctionsPrx r = b as QuantifierSignificantValueFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            QuantifierSignificantValueFunctionsPrxHelper h = new QuantifierSignificantValueFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierSignificantValueFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                QuantifierSignificantValueFunctionsPrxHelper h = new QuantifierSignificantValueFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierSignificantValueFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                QuantifierSignificantValueFunctionsPrxHelper h = new QuantifierSignificantValueFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierSignificantValueFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierSignificantValueFunctionsPrx r = b as QuantifierSignificantValueFunctionsPrx;
                        if(r == null)
                        {
                            QuantifierSignificantValueFunctionsPrxHelper h = new QuantifierSignificantValueFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierSignificantValueFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        QuantifierSignificantValueFunctionsPrxHelper h = new QuantifierSignificantValueFunctionsPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[1];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, QuantifierSignificantValueFunctionsPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static QuantifierSignificantValueFunctionsPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            QuantifierSignificantValueFunctionsPrxHelper result = new QuantifierSignificantValueFunctionsPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class QuantifierValueFunctionsPrxHelper : global::Ice.ObjectPrxHelperBase, QuantifierValueFunctionsPrx
                {
                    public QuantifierValueFunctionsPrxHelper()
                    {
                    }

                    public QuantifierValueFunctionsPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<double> _iceI_ComputeValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValue_name = "ComputeValue";

                    private void _iceI_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<double>(completed);
                        outAsync.invoke(
                            _ComputeValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                double ret;
                                ret = istr.readDouble();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, context, callback, cookie, false);
                    }

                    public double end_ComputeValue(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueFunctions_ComputeValue, double>(
                            (Callback_QuantifierValueFunctions_ComputeValue cb, double ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeValue_name, cookie, completedCallback);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static QuantifierValueFunctionsPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValueFunctionsPrx r = b as QuantifierValueFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            QuantifierValueFunctionsPrxHelper h = new QuantifierValueFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValueFunctionsPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValueFunctionsPrx r = b as QuantifierValueFunctionsPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            QuantifierValueFunctionsPrxHelper h = new QuantifierValueFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValueFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                QuantifierValueFunctionsPrxHelper h = new QuantifierValueFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierValueFunctionsPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                QuantifierValueFunctionsPrxHelper h = new QuantifierValueFunctionsPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static QuantifierValueFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        QuantifierValueFunctionsPrx r = b as QuantifierValueFunctionsPrx;
                        if(r == null)
                        {
                            QuantifierValueFunctionsPrxHelper h = new QuantifierValueFunctionsPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static QuantifierValueFunctionsPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        QuantifierValueFunctionsPrxHelper h = new QuantifierValueFunctionsPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[2];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, QuantifierValueFunctionsPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static QuantifierValueFunctionsPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            QuantifierValueFunctionsPrxHelper result = new QuantifierValueFunctionsPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldValidPrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldValidPrx
                {
                    public FourFoldValidPrxHelper()
                    {
                    }

                    public FourFoldValidPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldValidPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldValidPrx r = b as FourFoldValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldValidPrxHelper h = new FourFoldValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldValidPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldValidPrx r = b as FourFoldValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldValidPrxHelper h = new FourFoldValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldValidPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldValidPrxHelper h = new FourFoldValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldValidPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldValidPrxHelper h = new FourFoldValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldValidPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldValidPrx r = b as FourFoldValidPrx;
                        if(r == null)
                        {
                            FourFoldValidPrxHelper h = new FourFoldValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldValidPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldValidPrxHelper h = new FourFoldValidPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldValid",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldValidPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldValidPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldValidPrxHelper result = new FourFoldValidPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class TwoDimensionsValidPrxHelper : global::Ice.ObjectPrxHelperBase, TwoDimensionsValidPrx
                {
                    public TwoDimensionsValidPrxHelper()
                    {
                    }

                    public TwoDimensionsValidPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static TwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsValidPrx r = b as TwoDimensionsValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            TwoDimensionsValidPrxHelper h = new TwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsValidPrx r = b as TwoDimensionsValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            TwoDimensionsValidPrxHelper h = new TwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                TwoDimensionsValidPrxHelper h = new TwoDimensionsValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static TwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                TwoDimensionsValidPrxHelper h = new TwoDimensionsValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static TwoDimensionsValidPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsValidPrx r = b as TwoDimensionsValidPrx;
                        if(r == null)
                        {
                            TwoDimensionsValidPrxHelper h = new TwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsValidPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        TwoDimensionsValidPrxHelper h = new TwoDimensionsValidPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ferda::Guha::Math::Quantifiers::TwoDimensionsValid",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[2];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, TwoDimensionsValidPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static TwoDimensionsValidPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            TwoDimensionsValidPrxHelper result = new TwoDimensionsValidPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class SingleDimensionValidPrxHelper : global::Ice.ObjectPrxHelperBase, SingleDimensionValidPrx
                {
                    public SingleDimensionValidPrxHelper()
                    {
                    }

                    public SingleDimensionValidPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static SingleDimensionValidPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionValidPrx r = b as SingleDimensionValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            SingleDimensionValidPrxHelper h = new SingleDimensionValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionValidPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionValidPrx r = b as SingleDimensionValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            SingleDimensionValidPrxHelper h = new SingleDimensionValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionValidPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                SingleDimensionValidPrxHelper h = new SingleDimensionValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionValidPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                SingleDimensionValidPrxHelper h = new SingleDimensionValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionValidPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionValidPrx r = b as SingleDimensionValidPrx;
                        if(r == null)
                        {
                            SingleDimensionValidPrxHelper h = new SingleDimensionValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionValidPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        SingleDimensionValidPrxHelper h = new SingleDimensionValidPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionValid",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[2];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, SingleDimensionValidPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static SingleDimensionValidPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            SingleDimensionValidPrxHelper result = new SingleDimensionValidPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldTwoDimensionsValidPrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldTwoDimensionsValidPrx
                {
                    public FourFoldTwoDimensionsValidPrxHelper()
                    {
                    }

                    public FourFoldTwoDimensionsValidPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsValidPrx r = b as FourFoldTwoDimensionsValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldTwoDimensionsValidPrxHelper h = new FourFoldTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsValidPrx r = b as FourFoldTwoDimensionsValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldTwoDimensionsValidPrxHelper h = new FourFoldTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldTwoDimensionsValidPrxHelper h = new FourFoldTwoDimensionsValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldTwoDimensionsValidPrxHelper h = new FourFoldTwoDimensionsValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldTwoDimensionsValidPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsValidPrx r = b as FourFoldTwoDimensionsValidPrx;
                        if(r == null)
                        {
                            FourFoldTwoDimensionsValidPrxHelper h = new FourFoldTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsValidPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldTwoDimensionsValidPrxHelper h = new FourFoldTwoDimensionsValidPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldTwoDimensionsValid",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldTwoDimensionsValidPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldTwoDimensionsValidPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldTwoDimensionsValidPrxHelper result = new FourFoldTwoDimensionsValidPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldSingleDimensionValidPrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldSingleDimensionValidPrx
                {
                    public FourFoldSingleDimensionValidPrxHelper()
                    {
                    }

                    public FourFoldSingleDimensionValidPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldSingleDimensionValidPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionValidPrx r = b as FourFoldSingleDimensionValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldSingleDimensionValidPrxHelper h = new FourFoldSingleDimensionValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionValidPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionValidPrx r = b as FourFoldSingleDimensionValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldSingleDimensionValidPrxHelper h = new FourFoldSingleDimensionValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionValidPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldSingleDimensionValidPrxHelper h = new FourFoldSingleDimensionValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionValidPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldSingleDimensionValidPrxHelper h = new FourFoldSingleDimensionValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionValidPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionValidPrx r = b as FourFoldSingleDimensionValidPrx;
                        if(r == null)
                        {
                            FourFoldSingleDimensionValidPrxHelper h = new FourFoldSingleDimensionValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionValidPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldSingleDimensionValidPrxHelper h = new FourFoldSingleDimensionValidPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionValid",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldSingleDimensionValidPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldSingleDimensionValidPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldSingleDimensionValidPrxHelper result = new FourFoldSingleDimensionValidPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class SingleDimensionTwoDimensionsValidPrxHelper : global::Ice.ObjectPrxHelperBase, SingleDimensionTwoDimensionsValidPrx
                {
                    public SingleDimensionTwoDimensionsValidPrxHelper()
                    {
                    }

                    public SingleDimensionTwoDimensionsValidPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static SingleDimensionTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsValidPrx r = b as SingleDimensionTwoDimensionsValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            SingleDimensionTwoDimensionsValidPrxHelper h = new SingleDimensionTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsValidPrx r = b as SingleDimensionTwoDimensionsValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            SingleDimensionTwoDimensionsValidPrxHelper h = new SingleDimensionTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                SingleDimensionTwoDimensionsValidPrxHelper h = new SingleDimensionTwoDimensionsValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                SingleDimensionTwoDimensionsValidPrxHelper h = new SingleDimensionTwoDimensionsValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionTwoDimensionsValidPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsValidPrx r = b as SingleDimensionTwoDimensionsValidPrx;
                        if(r == null)
                        {
                            SingleDimensionTwoDimensionsValidPrxHelper h = new SingleDimensionTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsValidPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        SingleDimensionTwoDimensionsValidPrxHelper h = new SingleDimensionTwoDimensionsValidPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionTwoDimensionsValid",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[2];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, SingleDimensionTwoDimensionsValidPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static SingleDimensionTwoDimensionsValidPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            SingleDimensionTwoDimensionsValidPrxHelper result = new SingleDimensionTwoDimensionsValidPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldSingleDimensionTwoDimensionsValidPrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldSingleDimensionTwoDimensionsValidPrx
                {
                    public FourFoldSingleDimensionTwoDimensionsValidPrxHelper()
                    {
                    }

                    public FourFoldSingleDimensionTwoDimensionsValidPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldSingleDimensionTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsValidPrx r = b as FourFoldSingleDimensionTwoDimensionsValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldSingleDimensionTwoDimensionsValidPrxHelper h = new FourFoldSingleDimensionTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsValidPrx r = b as FourFoldSingleDimensionTwoDimensionsValidPrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldSingleDimensionTwoDimensionsValidPrxHelper h = new FourFoldSingleDimensionTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldSingleDimensionTwoDimensionsValidPrxHelper h = new FourFoldSingleDimensionTwoDimensionsValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValidPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldSingleDimensionTwoDimensionsValidPrxHelper h = new FourFoldSingleDimensionTwoDimensionsValidPrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValidPrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsValidPrx r = b as FourFoldSingleDimensionTwoDimensionsValidPrx;
                        if(r == null)
                        {
                            FourFoldSingleDimensionTwoDimensionsValidPrxHelper h = new FourFoldSingleDimensionTwoDimensionsValidPrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValidPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldSingleDimensionTwoDimensionsValidPrxHelper h = new FourFoldSingleDimensionTwoDimensionsValidPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionTwoDimensionsValid",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldSingleDimensionTwoDimensionsValidPrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValidPrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldSingleDimensionTwoDimensionsValidPrxHelper result = new FourFoldSingleDimensionTwoDimensionsValidPrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldValuePrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldValuePrx
                {
                    public FourFoldValuePrxHelper()
                    {
                    }

                    public FourFoldValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<double> _iceI_ComputeValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValue_name = "ComputeValue";

                    private void _iceI_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<double>(completed);
                        outAsync.invoke(
                            _ComputeValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                double ret;
                                ret = istr.readDouble();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, context, callback, cookie, false);
                    }

                    public double end_ComputeValue(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueFunctions_ComputeValue, double>(
                            (Callback_QuantifierValueFunctions_ComputeValue cb, double ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeValue_name, cookie, completedCallback);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldValuePrx r = b as FourFoldValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldValuePrxHelper h = new FourFoldValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldValuePrx r = b as FourFoldValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldValuePrxHelper h = new FourFoldValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldValuePrxHelper h = new FourFoldValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldValuePrxHelper h = new FourFoldValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldValuePrx r = b as FourFoldValuePrx;
                        if(r == null)
                        {
                            FourFoldValuePrxHelper h = new FourFoldValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldValuePrxHelper h = new FourFoldValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldValuePrxHelper result = new FourFoldValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class TwoDimensionsValuePrxHelper : global::Ice.ObjectPrxHelperBase, TwoDimensionsValuePrx
                {
                    public TwoDimensionsValuePrxHelper()
                    {
                    }

                    public TwoDimensionsValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<double> _iceI_ComputeValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValue_name = "ComputeValue";

                    private void _iceI_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<double>(completed);
                        outAsync.invoke(
                            _ComputeValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                double ret;
                                ret = istr.readDouble();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, context, callback, cookie, false);
                    }

                    public double end_ComputeValue(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueFunctions_ComputeValue, double>(
                            (Callback_QuantifierValueFunctions_ComputeValue cb, double ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeValue_name, cookie, completedCallback);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static TwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsValuePrx r = b as TwoDimensionsValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            TwoDimensionsValuePrxHelper h = new TwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsValuePrx r = b as TwoDimensionsValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            TwoDimensionsValuePrxHelper h = new TwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                TwoDimensionsValuePrxHelper h = new TwoDimensionsValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static TwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                TwoDimensionsValuePrxHelper h = new TwoDimensionsValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static TwoDimensionsValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsValuePrx r = b as TwoDimensionsValuePrx;
                        if(r == null)
                        {
                            TwoDimensionsValuePrxHelper h = new TwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        TwoDimensionsValuePrxHelper h = new TwoDimensionsValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::TwoDimensionsValue",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, TwoDimensionsValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static TwoDimensionsValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            TwoDimensionsValuePrxHelper result = new TwoDimensionsValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class SingleDimensionValuePrxHelper : global::Ice.ObjectPrxHelperBase, SingleDimensionValuePrx
                {
                    public SingleDimensionValuePrxHelper()
                    {
                    }

                    public SingleDimensionValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<double> _iceI_ComputeValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValue_name = "ComputeValue";

                    private void _iceI_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<double>(completed);
                        outAsync.invoke(
                            _ComputeValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                double ret;
                                ret = istr.readDouble();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, context, callback, cookie, false);
                    }

                    public double end_ComputeValue(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueFunctions_ComputeValue, double>(
                            (Callback_QuantifierValueFunctions_ComputeValue cb, double ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeValue_name, cookie, completedCallback);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static SingleDimensionValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionValuePrx r = b as SingleDimensionValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            SingleDimensionValuePrxHelper h = new SingleDimensionValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionValuePrx r = b as SingleDimensionValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            SingleDimensionValuePrxHelper h = new SingleDimensionValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                SingleDimensionValuePrxHelper h = new SingleDimensionValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                SingleDimensionValuePrxHelper h = new SingleDimensionValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionValuePrx r = b as SingleDimensionValuePrx;
                        if(r == null)
                        {
                            SingleDimensionValuePrxHelper h = new SingleDimensionValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        SingleDimensionValuePrxHelper h = new SingleDimensionValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionValue",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, SingleDimensionValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static SingleDimensionValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            SingleDimensionValuePrxHelper result = new SingleDimensionValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldTwoDimensionsValuePrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldTwoDimensionsValuePrx
                {
                    public FourFoldTwoDimensionsValuePrxHelper()
                    {
                    }

                    public FourFoldTwoDimensionsValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<double> _iceI_ComputeValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValue_name = "ComputeValue";

                    private void _iceI_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<double>(completed);
                        outAsync.invoke(
                            _ComputeValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                double ret;
                                ret = istr.readDouble();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, context, callback, cookie, false);
                    }

                    public double end_ComputeValue(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueFunctions_ComputeValue, double>(
                            (Callback_QuantifierValueFunctions_ComputeValue cb, double ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeValue_name, cookie, completedCallback);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsValuePrx r = b as FourFoldTwoDimensionsValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldTwoDimensionsValuePrxHelper h = new FourFoldTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsValuePrx r = b as FourFoldTwoDimensionsValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldTwoDimensionsValuePrxHelper h = new FourFoldTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldTwoDimensionsValuePrxHelper h = new FourFoldTwoDimensionsValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldTwoDimensionsValuePrxHelper h = new FourFoldTwoDimensionsValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldTwoDimensionsValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsValuePrx r = b as FourFoldTwoDimensionsValuePrx;
                        if(r == null)
                        {
                            FourFoldTwoDimensionsValuePrxHelper h = new FourFoldTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldTwoDimensionsValuePrxHelper h = new FourFoldTwoDimensionsValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldTwoDimensionsValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldTwoDimensionsValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldTwoDimensionsValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldTwoDimensionsValuePrxHelper result = new FourFoldTwoDimensionsValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldSingleDimensionValuePrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldSingleDimensionValuePrx
                {
                    public FourFoldSingleDimensionValuePrxHelper()
                    {
                    }

                    public FourFoldSingleDimensionValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<double> _iceI_ComputeValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValue_name = "ComputeValue";

                    private void _iceI_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<double>(completed);
                        outAsync.invoke(
                            _ComputeValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                double ret;
                                ret = istr.readDouble();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, context, callback, cookie, false);
                    }

                    public double end_ComputeValue(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueFunctions_ComputeValue, double>(
                            (Callback_QuantifierValueFunctions_ComputeValue cb, double ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeValue_name, cookie, completedCallback);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldSingleDimensionValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionValuePrx r = b as FourFoldSingleDimensionValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldSingleDimensionValuePrxHelper h = new FourFoldSingleDimensionValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionValuePrx r = b as FourFoldSingleDimensionValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldSingleDimensionValuePrxHelper h = new FourFoldSingleDimensionValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldSingleDimensionValuePrxHelper h = new FourFoldSingleDimensionValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldSingleDimensionValuePrxHelper h = new FourFoldSingleDimensionValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionValuePrx r = b as FourFoldSingleDimensionValuePrx;
                        if(r == null)
                        {
                            FourFoldSingleDimensionValuePrxHelper h = new FourFoldSingleDimensionValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldSingleDimensionValuePrxHelper h = new FourFoldSingleDimensionValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldSingleDimensionValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldSingleDimensionValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldSingleDimensionValuePrxHelper result = new FourFoldSingleDimensionValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class SingleDimensionTwoDimensionsValuePrxHelper : global::Ice.ObjectPrxHelperBase, SingleDimensionTwoDimensionsValuePrx
                {
                    public SingleDimensionTwoDimensionsValuePrxHelper()
                    {
                    }

                    public SingleDimensionTwoDimensionsValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<double> _iceI_ComputeValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValue_name = "ComputeValue";

                    private void _iceI_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<double>(completed);
                        outAsync.invoke(
                            _ComputeValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                double ret;
                                ret = istr.readDouble();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, context, callback, cookie, false);
                    }

                    public double end_ComputeValue(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueFunctions_ComputeValue, double>(
                            (Callback_QuantifierValueFunctions_ComputeValue cb, double ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeValue_name, cookie, completedCallback);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static SingleDimensionTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsValuePrx r = b as SingleDimensionTwoDimensionsValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            SingleDimensionTwoDimensionsValuePrxHelper h = new SingleDimensionTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsValuePrx r = b as SingleDimensionTwoDimensionsValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            SingleDimensionTwoDimensionsValuePrxHelper h = new SingleDimensionTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                SingleDimensionTwoDimensionsValuePrxHelper h = new SingleDimensionTwoDimensionsValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                SingleDimensionTwoDimensionsValuePrxHelper h = new SingleDimensionTwoDimensionsValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionTwoDimensionsValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsValuePrx r = b as SingleDimensionTwoDimensionsValuePrx;
                        if(r == null)
                        {
                            SingleDimensionTwoDimensionsValuePrxHelper h = new SingleDimensionTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        SingleDimensionTwoDimensionsValuePrxHelper h = new SingleDimensionTwoDimensionsValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionTwoDimensionsValue",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, SingleDimensionTwoDimensionsValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static SingleDimensionTwoDimensionsValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            SingleDimensionTwoDimensionsValuePrxHelper result = new SingleDimensionTwoDimensionsValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldSingleDimensionTwoDimensionsValuePrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldSingleDimensionTwoDimensionsValuePrx
                {
                    public FourFoldSingleDimensionTwoDimensionsValuePrxHelper()
                    {
                    }

                    public FourFoldSingleDimensionTwoDimensionsValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public double ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<double> ComputeValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<double> _iceI_ComputeValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<double>(progress, cancel);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValue_name = "ComputeValue";

                    private void _iceI_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<double>(completed);
                        outAsync.invoke(
                            _ComputeValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                double ret;
                                ret = istr.readDouble();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValue(param, context, callback, cookie, false);
                    }

                    public double end_ComputeValue(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<double>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueFunctions_ComputeValue> begin_ComputeValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueFunctions_ComputeValue, double>(
                            (Callback_QuantifierValueFunctions_ComputeValue cb, double ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeValue_name, cookie, completedCallback);
                        _iceI_ComputeValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldSingleDimensionTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsValuePrx r = b as FourFoldSingleDimensionTwoDimensionsValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldSingleDimensionTwoDimensionsValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsValuePrx r = b as FourFoldSingleDimensionTwoDimensionsValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldSingleDimensionTwoDimensionsValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldSingleDimensionTwoDimensionsValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldSingleDimensionTwoDimensionsValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsValuePrx r = b as FourFoldSingleDimensionTwoDimensionsValuePrx;
                        if(r == null)
                        {
                            FourFoldSingleDimensionTwoDimensionsValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldSingleDimensionTwoDimensionsValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionTwoDimensionsValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldSingleDimensionTwoDimensionsValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldSingleDimensionTwoDimensionsValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldSingleDimensionTwoDimensionsValuePrxHelper result = new FourFoldSingleDimensionTwoDimensionsValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldSignificantValuePrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldSignificantValuePrx
                {
                    public FourFoldSignificantValuePrxHelper()
                    {
                    }

                    public FourFoldSignificantValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldSignificantValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSignificantValuePrx r = b as FourFoldSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldSignificantValuePrxHelper h = new FourFoldSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSignificantValuePrx r = b as FourFoldSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldSignificantValuePrxHelper h = new FourFoldSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldSignificantValuePrxHelper h = new FourFoldSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldSignificantValuePrxHelper h = new FourFoldSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSignificantValuePrx r = b as FourFoldSignificantValuePrx;
                        if(r == null)
                        {
                            FourFoldSignificantValuePrxHelper h = new FourFoldSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldSignificantValuePrxHelper h = new FourFoldSignificantValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSignificantValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldSignificantValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldSignificantValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldSignificantValuePrxHelper result = new FourFoldSignificantValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class TwoDimensionsSignificantValuePrxHelper : global::Ice.ObjectPrxHelperBase, TwoDimensionsSignificantValuePrx
                {
                    public TwoDimensionsSignificantValuePrxHelper()
                    {
                    }

                    public TwoDimensionsSignificantValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static TwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsSignificantValuePrx r = b as TwoDimensionsSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            TwoDimensionsSignificantValuePrxHelper h = new TwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsSignificantValuePrx r = b as TwoDimensionsSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            TwoDimensionsSignificantValuePrxHelper h = new TwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                TwoDimensionsSignificantValuePrxHelper h = new TwoDimensionsSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static TwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                TwoDimensionsSignificantValuePrxHelper h = new TwoDimensionsSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static TwoDimensionsSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        TwoDimensionsSignificantValuePrx r = b as TwoDimensionsSignificantValuePrx;
                        if(r == null)
                        {
                            TwoDimensionsSignificantValuePrxHelper h = new TwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static TwoDimensionsSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        TwoDimensionsSignificantValuePrxHelper h = new TwoDimensionsSignificantValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::TwoDimensionsSignificantValue",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, TwoDimensionsSignificantValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static TwoDimensionsSignificantValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            TwoDimensionsSignificantValuePrxHelper result = new TwoDimensionsSignificantValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class SingleDimensionSignificantValuePrxHelper : global::Ice.ObjectPrxHelperBase, SingleDimensionSignificantValuePrx
                {
                    public SingleDimensionSignificantValuePrxHelper()
                    {
                    }

                    public SingleDimensionSignificantValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static SingleDimensionSignificantValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionSignificantValuePrx r = b as SingleDimensionSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            SingleDimensionSignificantValuePrxHelper h = new SingleDimensionSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionSignificantValuePrx r = b as SingleDimensionSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            SingleDimensionSignificantValuePrxHelper h = new SingleDimensionSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                SingleDimensionSignificantValuePrxHelper h = new SingleDimensionSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                SingleDimensionSignificantValuePrxHelper h = new SingleDimensionSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionSignificantValuePrx r = b as SingleDimensionSignificantValuePrx;
                        if(r == null)
                        {
                            SingleDimensionSignificantValuePrxHelper h = new SingleDimensionSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        SingleDimensionSignificantValuePrxHelper h = new SingleDimensionSignificantValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionSignificantValue",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, SingleDimensionSignificantValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static SingleDimensionSignificantValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            SingleDimensionSignificantValuePrxHelper result = new SingleDimensionSignificantValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldTwoDimensionsSignificantValuePrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldTwoDimensionsSignificantValuePrx
                {
                    public FourFoldTwoDimensionsSignificantValuePrxHelper()
                    {
                    }

                    public FourFoldTwoDimensionsSignificantValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsSignificantValuePrx r = b as FourFoldTwoDimensionsSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldTwoDimensionsSignificantValuePrxHelper h = new FourFoldTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsSignificantValuePrx r = b as FourFoldTwoDimensionsSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldTwoDimensionsSignificantValuePrxHelper h = new FourFoldTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldTwoDimensionsSignificantValuePrxHelper h = new FourFoldTwoDimensionsSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldTwoDimensionsSignificantValuePrxHelper h = new FourFoldTwoDimensionsSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldTwoDimensionsSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldTwoDimensionsSignificantValuePrx r = b as FourFoldTwoDimensionsSignificantValuePrx;
                        if(r == null)
                        {
                            FourFoldTwoDimensionsSignificantValuePrxHelper h = new FourFoldTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldTwoDimensionsSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldTwoDimensionsSignificantValuePrxHelper h = new FourFoldTwoDimensionsSignificantValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldTwoDimensionsSignificantValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldTwoDimensionsSignificantValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldTwoDimensionsSignificantValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldTwoDimensionsSignificantValuePrxHelper result = new FourFoldTwoDimensionsSignificantValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldSingleDimensionSignificantValuePrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldSingleDimensionSignificantValuePrx
                {
                    public FourFoldSingleDimensionSignificantValuePrxHelper()
                    {
                    }

                    public FourFoldSingleDimensionSignificantValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldSingleDimensionSignificantValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionSignificantValuePrx r = b as FourFoldSingleDimensionSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldSingleDimensionSignificantValuePrxHelper h = new FourFoldSingleDimensionSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionSignificantValuePrx r = b as FourFoldSingleDimensionSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldSingleDimensionSignificantValuePrxHelper h = new FourFoldSingleDimensionSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldSingleDimensionSignificantValuePrxHelper h = new FourFoldSingleDimensionSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldSingleDimensionSignificantValuePrxHelper h = new FourFoldSingleDimensionSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionSignificantValuePrx r = b as FourFoldSingleDimensionSignificantValuePrx;
                        if(r == null)
                        {
                            FourFoldSingleDimensionSignificantValuePrxHelper h = new FourFoldSingleDimensionSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldSingleDimensionSignificantValuePrxHelper h = new FourFoldSingleDimensionSignificantValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionSignificantValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldSingleDimensionSignificantValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldSingleDimensionSignificantValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldSingleDimensionSignificantValuePrxHelper result = new FourFoldSingleDimensionSignificantValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class SingleDimensionTwoDimensionsSignificantValuePrxHelper : global::Ice.ObjectPrxHelperBase, SingleDimensionTwoDimensionsSignificantValuePrx
                {
                    public SingleDimensionTwoDimensionsSignificantValuePrxHelper()
                    {
                    }

                    public SingleDimensionTwoDimensionsSignificantValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static SingleDimensionTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsSignificantValuePrx r = b as SingleDimensionTwoDimensionsSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            SingleDimensionTwoDimensionsSignificantValuePrxHelper h = new SingleDimensionTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsSignificantValuePrx r = b as SingleDimensionTwoDimensionsSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            SingleDimensionTwoDimensionsSignificantValuePrxHelper h = new SingleDimensionTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                SingleDimensionTwoDimensionsSignificantValuePrxHelper h = new SingleDimensionTwoDimensionsSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                SingleDimensionTwoDimensionsSignificantValuePrxHelper h = new SingleDimensionTwoDimensionsSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static SingleDimensionTwoDimensionsSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        SingleDimensionTwoDimensionsSignificantValuePrx r = b as SingleDimensionTwoDimensionsSignificantValuePrx;
                        if(r == null)
                        {
                            SingleDimensionTwoDimensionsSignificantValuePrxHelper h = new SingleDimensionTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static SingleDimensionTwoDimensionsSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        SingleDimensionTwoDimensionsSignificantValuePrxHelper h = new SingleDimensionTwoDimensionsSignificantValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionTwoDimensionsSignificantValue",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, SingleDimensionTwoDimensionsSignificantValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static SingleDimensionTwoDimensionsSignificantValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            SingleDimensionTwoDimensionsSignificantValuePrxHelper result = new SingleDimensionTwoDimensionsSignificantValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                [global::System.Serializable]
                public sealed class FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper : global::Ice.ObjectPrxHelperBase, FourFoldSingleDimensionTwoDimensionsSignificantValuePrx
                {
                    public FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper()
                    {
                    }

                    public FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
                    {
                    }

                    #region Synchronous operations

                    public QuantifierSetting GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetQuantifierSettingAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            return _iceI_ComputeBatchAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_BeginOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public void EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            _iceI_EndOfUseAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    public bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        try
                        {
                            var result_ = _iceI_ComputeValidValueAsync(param, context, null, global::System.Threading.CancellationToken.None, true).Result;
                            value = result_.value;
                            return result_.returnValue;
                        }
                        catch(global::System.AggregateException ex_)
                        {
                            throw ex_.InnerException;
                        }
                    }

                    #endregion

                    #region Async Task operations

                    public global::System.Threading.Tasks.Task<QuantifierSetting> GetQuantifierSettingAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetQuantifierSettingAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierSetting> _iceI_GetQuantifierSettingAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierSetting>(progress, cancel);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetQuantifierSetting_name = "GetQuantifierSetting";

                    private void _iceI_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierSetting>(completed);
                        outAsync.invoke(
                            _GetQuantifierSetting_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierSetting ret = null;
                                ret = QuantifierSetting.ice_read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedBoxLabel_name = "GetLocalizedBoxLabel";

                    private void _iceI_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<string> GetLocalizedUserBoxLabelAsync(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_GetLocalizedUserBoxLabelAsync(localePrefs, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<string> _iceI_GetLocalizedUserBoxLabelAsync(string[] iceP_localePrefs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _GetLocalizedUserBoxLabel_name = "GetLocalizedUserBoxLabel";

                    private void _iceI_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<string>(completed);
                        outAsync.invoke(
                            _GetLocalizedUserBoxLabel_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                global::Ferda.Modules.StringSeqHelper.write(ostr, iceP_localePrefs);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                string ret;
                                ret = istr.readString();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool> ComputeAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool> _iceI_ComputeAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _Compute_name = "Compute";

                    private void _iceI_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool>(completed);
                        outAsync.invoke(
                            _Compute_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool ret;
                                ret = istr.readBool();
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task<bool[]> ComputeBatchAsync(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeBatchAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<bool[]> _iceI_ComputeBatchAsync(QuantifierEvaluateSetting[] iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<bool[]>(progress, cancel);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeBatch_name = "ComputeBatch";

                    private void _iceI_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<bool[]>(completed);
                        outAsync.invoke(
                            _ComputeBatch_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSettingSeqHelper.write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                bool[] ret;
                                ret = global::Ferda.Modules.BoolSeqHelper.read(istr);
                                return ret;
                            });
                    }

                    public global::System.Threading.Tasks.Task BeginOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_BeginOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_BeginOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _BeginOfUse_name = "BeginOfUse";

                    private void _iceI_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _BeginOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task EndOfUseAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_EndOfUseAsync(context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task _iceI_EndOfUseAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _EndOfUse_name = "EndOfUse";

                    private void _iceI_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<object>(completed);
                        outAsync.invoke(
                            _EndOfUse_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous);
                    }

                    public global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> ComputeValidValueAsync(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
                    {
                        return _iceI_ComputeValidValueAsync(param, context, progress, cancel, false);
                    }

                    private global::System.Threading.Tasks.Task<QuantifierValueBaseFunctions_ComputeValidValueResult> _iceI_ComputeValidValueAsync(QuantifierEvaluateSetting iceP_param, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
                    {
                        iceCheckTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationTaskCompletionCallback<QuantifierValueBaseFunctions_ComputeValidValueResult>(progress, cancel);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed.Task;
                    }

                    private const string _ComputeValidValue_name = "ComputeValidValue";

                    private void _iceI_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
                    {
                        var outAsync = getOutgoingAsync<QuantifierValueBaseFunctions_ComputeValidValueResult>(completed);
                        outAsync.invoke(
                            _ComputeValidValue_name,
                            global::Ice.OperationMode.Idempotent,
                            global::Ice.FormatType.DefaultFormat,
                            context,
                            synchronous,
                            write: (global::Ice.OutputStream ostr) =>
                            {
                                QuantifierEvaluateSetting.ice_write(ostr, iceP_param);
                            },
                            userException: (global::Ice.UserException ex) =>
                            {
                                try
                                {
                                    throw ex;
                                }
                                catch(global::Ferda.Modules.BoxRuntimeError)
                                {
                                    throw;
                                }
                                catch(global::Ice.UserException)
                                {
                                }
                            },
                            read: (global::Ice.InputStream istr) =>
                            {
                                QuantifierValueBaseFunctions_ComputeValidValueResult ret = new QuantifierValueBaseFunctions_ComputeValidValueResult();
                                ret.value = istr.readDouble();
                                ret.returnValue = istr.readBool();
                                return ret;
                            });
                    }

                    #endregion

                    #region Asynchronous operations

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetQuantifierSetting(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetQuantifierSetting(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetQuantifierSetting(context, callback, cookie, false);
                    }

                    public QuantifierSetting end_GetQuantifierSetting(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetQuantifierSetting_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierSetting>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetQuantifierSetting> begin_GetQuantifierSetting(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetQuantifierSetting_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetQuantifierSetting, QuantifierSetting>(
                            (Callback_QuantifierBaseFunctions_GetQuantifierSetting cb, QuantifierSetting ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetQuantifierSetting_name, cookie, completedCallback);
                        _iceI_GetQuantifierSetting(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel> begin_GetLocalizedBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_GetLocalizedUserBoxLabel(localePrefs, context, callback, cookie, false);
                    }

                    public string end_GetLocalizedUserBoxLabel(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _GetLocalizedUserBoxLabel_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel> begin_GetLocalizedUserBoxLabel(string[] iceP_localePrefs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_GetLocalizedUserBoxLabel_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel, string>(
                            (Callback_QuantifierBaseFunctions_GetLocalizedUserBoxLabel cb, string ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _GetLocalizedUserBoxLabel_name, cookie, completedCallback);
                        _iceI_GetLocalizedUserBoxLabel(iceP_localePrefs, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_Compute(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_Compute(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_Compute(param, context, callback, cookie, false);
                    }

                    public bool end_Compute(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _Compute_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_Compute> begin_Compute(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_Compute_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_Compute, bool>(
                            (Callback_QuantifierBaseFunctions_Compute cb, bool ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _Compute_name, cookie, completedCallback);
                        _iceI_Compute(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeBatch(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeBatch(param, context, callback, cookie, false);
                    }

                    public bool[] end_ComputeBatch(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeBatch_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool[]>)resultI_.OutgoingAsync;
                        return outgoing_.getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_ComputeBatch> begin_ComputeBatch(QuantifierEvaluateSetting[] iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeBatch_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_ComputeBatch, bool[]>(
                            (Callback_QuantifierBaseFunctions_ComputeBatch cb, bool[] ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret);
                                }
                            },
                            this, _ComputeBatch_name, cookie, completedCallback);
                        _iceI_ComputeBatch(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_BeginOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_BeginOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_BeginOfUse(context, callback, cookie, false);
                    }

                    public void end_BeginOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _BeginOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_BeginOfUse> begin_BeginOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_BeginOfUse, object>(
                            (Callback_QuantifierBaseFunctions_BeginOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _BeginOfUse_name, cookie, completedCallback);
                        _iceI_BeginOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_EndOfUse(context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_EndOfUse(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_EndOfUse(context, callback, cookie, false);
                    }

                    public void end_EndOfUse(global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _EndOfUse_name);
                        ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierBaseFunctions_EndOfUse> begin_EndOfUse(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierBaseFunctions_EndOfUse, object>(
                            (Callback_QuantifierBaseFunctions_EndOfUse cb, object ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke();
                                }
                            },
                            this, _EndOfUse_name, cookie, completedCallback);
                        _iceI_EndOfUse(context, synchronous, completed);
                        return completed;
                    }

                    public global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
                    {
                        return begin_ComputeValidValue(param, context, null, null, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, new global::Ice.OptionalContext(), callback, cookie, false);
                    }

                    public global::Ice.AsyncResult begin_ComputeValidValue(QuantifierEvaluateSetting param, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
                    {
                        return begin_ComputeValidValue(param, context, callback, cookie, false);
                    }

                    public bool end_ComputeValidValue(out double value, global::Ice.AsyncResult asyncResult)
                    {
                        var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _ComputeValidValue_name);
                        var outgoing_ = (global::IceInternal.OutgoingAsyncT<QuantifierValueBaseFunctions_ComputeValidValueResult>)resultI_.OutgoingAsync;
                        var result_ = outgoing_.getResult(resultI_.wait());
                        value = result_.value;
                        return result_.returnValue;
                    }

                    private global::Ice.AsyncResult<Callback_QuantifierValueBaseFunctions_ComputeValidValue> begin_ComputeValidValue(QuantifierEvaluateSetting iceP_param, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
                    {
                        iceCheckAsyncTwowayOnly(_ComputeValidValue_name);
                        var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_QuantifierValueBaseFunctions_ComputeValidValue, QuantifierValueBaseFunctions_ComputeValidValueResult>(
                            (Callback_QuantifierValueBaseFunctions_ComputeValidValue cb, QuantifierValueBaseFunctions_ComputeValidValueResult ret) =>
                            {
                                if(cb != null)
                                {
                                    cb.Invoke(ret.returnValue, ret.value);
                                }
                            },
                            this, _ComputeValidValue_name, cookie, completedCallback);
                        _iceI_ComputeValidValue(iceP_param, context, synchronous, completed);
                        return completed;
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static FourFoldSingleDimensionTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsSignificantValuePrx r = b as FourFoldSingleDimensionTwoDimensionsSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsSignificantValuePrx r = b as FourFoldSingleDimensionTwoDimensionsSignificantValuePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsSignificantValuePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper();
                                h.iceCopyFrom(bb);
                                return h;
                            }
                        }
                        catch(global::Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        FourFoldSingleDimensionTwoDimensionsSignificantValuePrx r = b as FourFoldSingleDimensionTwoDimensionsSignificantValuePrx;
                        if(r == null)
                        {
                            FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper();
                            h.iceCopyFrom(b);
                            r = h;
                        }
                        return r;
                    }

                    public static FourFoldSingleDimensionTwoDimensionsSignificantValuePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        global::Ice.ObjectPrx bb = b.ice_facet(f);
                        FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper h = new FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionTwoDimensionsSignificantValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public static string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write(global::Ice.OutputStream ostr, FourFoldSingleDimensionTwoDimensionsSignificantValuePrx v)
                    {
                        ostr.writeProxy(v);
                    }

                    public static FourFoldSingleDimensionTwoDimensionsSignificantValuePrx read(global::Ice.InputStream istr)
                    {
                        global::Ice.ObjectPrx proxy = istr.readProxy();
                        if(proxy != null)
                        {
                            FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper result = new FourFoldSingleDimensionTwoDimensionsSignificantValuePrxHelper();
                            result.iceCopyFrom(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }
            }
        }
    }
}

namespace Ferda
{
    namespace Guha
    {
        namespace Math
        {
            namespace Quantifiers
            {
                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class QuantifierBaseFunctionsDisp_ : global::Ice.ObjectImpl, QuantifierBaseFunctions
                {
                    #region Slice operations

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Operation dispatch

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_GetQuantifierSetting(QuantifierBaseFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        inS.readEmptyParams();
                        var ret = obj.GetQuantifierSetting(current);
                        var ostr = inS.startWriteParams();
                        QuantifierSetting.ice_write(ostr, ret);
                        inS.endWriteParams(ostr);
                        return inS.setResult(ostr);
                    }

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_GetLocalizedBoxLabel(QuantifierBaseFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        var istr = inS.startReadParams();
                        string[] iceP_localePrefs;
                        iceP_localePrefs = global::Ferda.Modules.StringSeqHelper.read(istr);
                        inS.endReadParams();
                        var ret = obj.GetLocalizedBoxLabel(iceP_localePrefs, current);
                        var ostr = inS.startWriteParams();
                        ostr.writeString(ret);
                        inS.endWriteParams(ostr);
                        return inS.setResult(ostr);
                    }

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_GetLocalizedUserBoxLabel(QuantifierBaseFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        var istr = inS.startReadParams();
                        string[] iceP_localePrefs;
                        iceP_localePrefs = global::Ferda.Modules.StringSeqHelper.read(istr);
                        inS.endReadParams();
                        var ret = obj.GetLocalizedUserBoxLabel(iceP_localePrefs, current);
                        var ostr = inS.startWriteParams();
                        ostr.writeString(ret);
                        inS.endWriteParams(ostr);
                        return inS.setResult(ostr);
                    }

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_Compute(QuantifierBaseFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        var istr = inS.startReadParams();
                        QuantifierEvaluateSetting iceP_param;
                        iceP_param = null;
                        iceP_param = QuantifierEvaluateSetting.ice_read(istr);
                        inS.endReadParams();
                        var ret = obj.Compute(iceP_param, current);
                        var ostr = inS.startWriteParams();
                        ostr.writeBool(ret);
                        inS.endWriteParams(ostr);
                        return inS.setResult(ostr);
                    }

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_ComputeBatch(QuantifierBaseFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        var istr = inS.startReadParams();
                        QuantifierEvaluateSetting[] iceP_param;
                        iceP_param = QuantifierEvaluateSettingSeqHelper.read(istr);
                        inS.endReadParams();
                        var ret = obj.ComputeBatch(iceP_param, current);
                        var ostr = inS.startWriteParams();
                        global::Ferda.Modules.BoolSeqHelper.write(ostr, ret);
                        inS.endWriteParams(ostr);
                        return inS.setResult(ostr);
                    }

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_BeginOfUse(QuantifierBaseFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        inS.readEmptyParams();
                        obj.BeginOfUse(current);
                        return inS.setResult(inS.writeEmptyParams());
                    }

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_EndOfUse(QuantifierBaseFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        inS.readEmptyParams();
                        obj.EndOfUse(current);
                        return inS.setResult(inS.writeEmptyParams());
                    }

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class QuantifierValueBaseFunctionsDisp_ : global::Ice.ObjectImpl, QuantifierValueBaseFunctions
                {
                    #region Slice operations

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    #region Operation dispatch

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_ComputeValidValue(QuantifierValueBaseFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        var istr = inS.startReadParams();
                        QuantifierEvaluateSetting iceP_param;
                        iceP_param = null;
                        iceP_param = QuantifierEvaluateSetting.ice_read(istr);
                        inS.endReadParams();
                        double iceP_value;
                        var ret = obj.ComputeValidValue(iceP_param, out iceP_value, current);
                        var ostr = inS.startWriteParams();
                        ostr.writeDouble(iceP_value);
                        ostr.writeBool(ret);
                        inS.endWriteParams(ostr);
                        return inS.setResult(ostr);
                    }

                    private static readonly string[] _all =
                    {
                        "ComputeValidValue",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return iceD_ComputeValidValue(this, inS, current);
                            }
                            case 1:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 2:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 3:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 4:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class QuantifierValidFunctionsDisp_ : global::Ice.ObjectImpl, QuantifierValidFunctions
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[1];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[1];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class QuantifierSignificantValueFunctionsDisp_ : global::Ice.ObjectImpl, QuantifierSignificantValueFunctions
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[1];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[1];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class QuantifierValueFunctionsDisp_ : global::Ice.ObjectImpl, QuantifierValueFunctions
                {
                    #region Slice operations

                    public abstract double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    #endregion

                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[2];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[2];
                    }

                    #endregion

                    #region Operation dispatch

                    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceD_ComputeValue(QuantifierValueFunctions obj, global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
                        var istr = inS.startReadParams();
                        QuantifierEvaluateSetting iceP_param;
                        iceP_param = null;
                        iceP_param = QuantifierEvaluateSetting.ice_read(istr);
                        inS.endReadParams();
                        var ret = obj.ComputeValue(iceP_param, current);
                        var ostr = inS.startWriteParams();
                        ostr.writeDouble(ret);
                        inS.endWriteParams(ostr);
                        return inS.setResult(ostr);
                    }

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "ComputeValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return iceD_ComputeValue(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 8:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 12:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }

                    #endregion
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldValidDisp_ : global::Ice.ObjectImpl, FourFoldValid
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldValid",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class TwoDimensionsValidDisp_ : global::Ice.ObjectImpl, TwoDimensionsValid
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ferda::Guha::Math::Quantifiers::TwoDimensionsValid",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[2];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[2];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class SingleDimensionValidDisp_ : global::Ice.ObjectImpl, SingleDimensionValid
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionValid",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[2];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[2];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldTwoDimensionsValidDisp_ : global::Ice.ObjectImpl, FourFoldTwoDimensionsValid
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldTwoDimensionsValid",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldSingleDimensionValidDisp_ : global::Ice.ObjectImpl, FourFoldSingleDimensionValid
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionValid",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class SingleDimensionTwoDimensionsValidDisp_ : global::Ice.ObjectImpl, SingleDimensionTwoDimensionsValid
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionTwoDimensionsValid",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[2];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[2];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldSingleDimensionTwoDimensionsValidDisp_ : global::Ice.ObjectImpl, FourFoldSingleDimensionTwoDimensionsValid
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionTwoDimensionsValid",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValidFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 7:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldValueDisp_ : global::Ice.ObjectImpl, FourFoldValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    public abstract double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "ComputeValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierValueFunctionsDisp_.iceD_ComputeValue(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 8:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 12:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class TwoDimensionsValueDisp_ : global::Ice.ObjectImpl, TwoDimensionsValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    public abstract double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::TwoDimensionsValue",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[3];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "ComputeValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierValueFunctionsDisp_.iceD_ComputeValue(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 8:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 12:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class SingleDimensionValueDisp_ : global::Ice.ObjectImpl, SingleDimensionValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    public abstract double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionValue",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[3];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "ComputeValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierValueFunctionsDisp_.iceD_ComputeValue(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 8:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 12:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldTwoDimensionsValueDisp_ : global::Ice.ObjectImpl, FourFoldTwoDimensionsValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    public abstract double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldTwoDimensionsValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "ComputeValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierValueFunctionsDisp_.iceD_ComputeValue(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 8:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 12:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldSingleDimensionValueDisp_ : global::Ice.ObjectImpl, FourFoldSingleDimensionValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    public abstract double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "ComputeValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierValueFunctionsDisp_.iceD_ComputeValue(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 8:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 12:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class SingleDimensionTwoDimensionsValueDisp_ : global::Ice.ObjectImpl, SingleDimensionTwoDimensionsValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    public abstract double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionTwoDimensionsValue",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[3];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "ComputeValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierValueFunctionsDisp_.iceD_ComputeValue(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 8:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 12:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldSingleDimensionTwoDimensionsValueDisp_ : global::Ice.ObjectImpl, FourFoldSingleDimensionTwoDimensionsValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    public abstract double ComputeValue(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionTwoDimensionsValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "ComputeValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierValueFunctionsDisp_.iceD_ComputeValue(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 8:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 12:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldSignificantValueDisp_ : global::Ice.ObjectImpl, FourFoldSignificantValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSignificantValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class TwoDimensionsSignificantValueDisp_ : global::Ice.ObjectImpl, TwoDimensionsSignificantValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::TwoDimensionsSignificantValue",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[3];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class SingleDimensionSignificantValueDisp_ : global::Ice.ObjectImpl, SingleDimensionSignificantValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionSignificantValue",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[3];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldTwoDimensionsSignificantValueDisp_ : global::Ice.ObjectImpl, FourFoldTwoDimensionsSignificantValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldTwoDimensionsSignificantValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldSingleDimensionSignificantValueDisp_ : global::Ice.ObjectImpl, FourFoldSingleDimensionSignificantValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionSignificantValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class SingleDimensionTwoDimensionsSignificantValueDisp_ : global::Ice.ObjectImpl, SingleDimensionTwoDimensionsSignificantValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::SingleDimensionTwoDimensionsSignificantValue",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[3];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[3];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }

                [global::System.Runtime.InteropServices.ComVisible(false)]
                [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
                public abstract class FourFoldSingleDimensionTwoDimensionsSignificantValueDisp_ : global::Ice.ObjectImpl, FourFoldSingleDimensionTwoDimensionsSignificantValue
                {
                    #region Inherited Slice operations

                    public abstract void BeginOfUse(global::Ice.Current current = null);

                    public abstract bool Compute(QuantifierEvaluateSetting param, global::Ice.Current current = null);

                    public abstract bool[] ComputeBatch(QuantifierEvaluateSetting[] param, global::Ice.Current current = null);

                    public abstract void EndOfUse(global::Ice.Current current = null);

                    public abstract string GetLocalizedBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract string GetLocalizedUserBoxLabel(string[] localePrefs, global::Ice.Current current = null);

                    public abstract QuantifierSetting GetQuantifierSetting(global::Ice.Current current = null);

                    public abstract bool ComputeValidValue(QuantifierEvaluateSetting param, out double value, global::Ice.Current current = null);

                    #endregion

                    #region Slice type-related members

                    private static readonly string[] _ids =
                    {
                        "::Ferda::Guha::Math::Quantifiers::FourFoldSingleDimensionTwoDimensionsSignificantValue",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierBaseFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierSignificantValueFunctions",
                        "::Ferda::Guha::Math::Quantifiers::QuantifierValueBaseFunctions",
                        "::Ice::Object"
                    };

                    public override bool ice_isA(string s, global::Ice.Current current = null)
                    {
                        return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids(global::Ice.Current current = null)
                    {
                        return _ids;
                    }

                    public override string ice_id(global::Ice.Current current = null)
                    {
                        return _ids[0];
                    }

                    public static new string ice_staticId()
                    {
                        return _ids[0];
                    }

                    #endregion

                    private static readonly string[] _all =
                    {
                        "BeginOfUse",
                        "Compute",
                        "ComputeBatch",
                        "ComputeValidValue",
                        "EndOfUse",
                        "GetLocalizedBoxLabel",
                        "GetLocalizedUserBoxLabel",
                        "GetQuantifierSetting",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                    iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
                    {
                        int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_BeginOfUse(this, inS, current);
                            }
                            case 1:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_Compute(this, inS, current);
                            }
                            case 2:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_ComputeBatch(this, inS, current);
                            }
                            case 3:
                            {
                                return QuantifierValueBaseFunctionsDisp_.iceD_ComputeValidValue(this, inS, current);
                            }
                            case 4:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_EndOfUse(this, inS, current);
                            }
                            case 5:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedBoxLabel(this, inS, current);
                            }
                            case 6:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetLocalizedUserBoxLabel(this, inS, current);
                            }
                            case 7:
                            {
                                return QuantifierBaseFunctionsDisp_.iceD_GetQuantifierSetting(this, inS, current);
                            }
                            case 8:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                            }
                            case 9:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                            }
                            case 10:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                            }
                            case 11:
                            {
                                return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                            }
                        }

                        global::System.Diagnostics.Debug.Assert(false);
                        throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                    }
                }
            }
        }
    }
}
