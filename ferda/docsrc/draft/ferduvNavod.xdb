<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article lang="cs">
  <articleinfo>
    <author>
      <firstname>Martin</firstname>
      <surname>Ralbovský</surname>
      <email>martin.ralbovsky@gmail.com</email>
    </author>
    <pubdate>2006-6-3</pubdate>
    <title>Ferdův návod k prvnímu projektu</title>
    <titleabbrev>FerduvNavod</titleabbrev>
  <!--
    <revhistory>
      <revision>
        <revnumber>0.1</revnumber>
        <date>2006-8-3</date>
        <revdescription>
          <para>
            Zanesené poznámky doc. Raucha
          </para>
        </revdescription>
      </revision>      
    </revhistory>
  -->
  </articleinfo>
  <abstract>
    <para>
      Tento dokument je určen začátečníkům ve Ferdovi, kteří neví jak se systémem
      pracovat. Obsahuje postup při vytvoření jednoduché 4ft úlohy nad zkušební 
      databází fiktivní banky Barbora.
    </para>
  </abstract>
  <section>
    <title>Úvod</title>
    <para>
      Vítejte ve Ferdovi ;) Jestliže jste program Ferda spustili a nevíte si s ním rady,
      nebo jestli se potřebujete doučit některou ze základních dovedností Ferdy, čtěte
      pozorně tento návod a doufáme že po jeho přečtení vám bude vše jasnější.
    </para>
  </section>
  <section>
    <title>Systém Ferda a LISp-Miner v kostce</title>
    <para>
      Ferda je systém pro dobývání znalostí z dat. Navazuje na starší systém
      <ulink url="http://lispminer.vse.cz">LISp-Miner</ulink>, který se už řadu
      let úspěšně vyvíjí na VŠE v Praze. Ferda i LISp-Miner dobývají znalosti
      pomocí asociačních pravidel a používají k tomu rozšíření metody GUHA. Podrobnější
      teoretické informace o procedurách najdete na 
      <ulink url="http://lispminer.vse.cz">webových stránkách</ulink>
    </para>
  </section>
  <section>
    <title>Náš příklad</title>
    <para>
      V tomto návodu se pokusíme získat znalosti z údajů fiktivní banky Barbora
      o výhodnosti jejich půjček. Použijeme k tomu nejznámější z LISp procedur,
      proceduru 4ft. Tato procedura počítá čtyřpolní kontingenční tabulky jednotlivých
      hypotéz a porovnává je vzhledem ke kvantifikátorům. Více o proceduře a jejích
      parametrech se dozvíme v průbehu tohoto návodu.
    </para>
  </section>
  <section>
    <title>1. Vytvoření první krabičky</title>
    <para>
      Ferda je systém, který používá pro tvorbu svých úloh tzv. vizuální programování,
      tj. úlohy se tvoří na ploše propojováním jednotlivých vizuálních prvků a
      nastavování vlastností těchto prvků. Ve Ferdovi se vizuální prvek nazývá krabička.
      Panel se všemi krabičkami, které máme k dispozici, je na levé straně dokovacího
      prostředí a obsahuje několik složek. Proces dobývání obvykle začíná identifikací
      datového zdroje. K tomu slouží krabička <classname>Databáze</classname> ve složce
      <classname>Zdroj dat</classname>. Kliknutím na krabičku a jejím přetažením na
      pracovní plochu vytvoříme svoji první krabičku.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="make1boxCZ.png" format="PNG" />
      </imageobject>
    </mediaobject>
  </section>
  <section>
    <title>2. Nastavení ODBC připojení a Moduly pro nastavení</title>
    <para>
      Rozhraní ODBC poskytuje jednotný způsob připojení k datovému zdroji pro různé typy
      zdrojů. Pro náš příklad použijeme databázi fiktivní banky Barbora s informacemi
      o účtech. Můžete si ji stáhnout spolu se instalačním programem Ferdy na
      <ulink url="http://ferda.sourceforge.net/">domovské stránce Ferdy</ulink>.
    </para>    
    <para>
      K tomu, aby krabička <classname>Databáze</classname> správně fungovala, potřebujeme
      ji připojit k datovému zdroji. K tomu slouží vlastnost 
      <classname>ODBC připojovací řetězec</classname>.
      Když klikneme levým tlačítkem na krabičku na ploše,
      zobrazí se nám všechny její vlastnosti v <classname>Panelu Vlastostí</classname>.
      v levé horní části dokovacího prostředí.
      Jesliže na vlastnost <classname>ODBC připojovací řetězec</classname> klikneme, 
      můžeme buď vepsat
      připojovací řetězec rovnou do políčka, nebo kliknout na tlačítko se třema tečkama
      a použít pro nastavení vlastnosti modul. Modulů pro nastavení se výužívá,
      jestliže je nastavování nějakým způsobem složité. Po kliknutí na tečky se zobrazí
      dialog pro nastavení ODBC připojení.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="odbcCZ.png" format="PNG"/>
      </imageobject>
    </mediaobject>
    <para>
      V dialogu se zobrazí všechny definované ODBC zdroje. Jestliže jste ještě Barboru
      nezavedli jako datový zdroj, klikněte na <classname>Vytvořit datový zdroj
      </classname> na tlačítkové liště. V tomto dialogu můžete mimojiné testovat
      připojení k definovaným datovým zdrojům. Vyberte ze seznamu datový zdroj
      odpovídající Barboře. K tomu, abychom zjistili zda je datový zdroj platný, můžeme
      použít tlačítko <classname>Test</classname> na dialogu.
    </para>
    <note>
      <para>
        Ferda podporuje pouze vytvoření Uživatelského a Systémového zdroje dat v prvním
        kroku průvodce, který se spustí (nepodporuje Souborový zdroj dat).
      </para>
      <para>
        Pro znalce LM (LISp-Mineru):
        Při práci se systémem LISp-Miner bylo třeba definovat metabázi
        (obvykle soubor databáze Microsoft Access (LM_Empty.mdb)) pro uložení
        projektu a vzájemnou výměnu dat mezi jednotlivými moduly systému
        LISp-Miner. Používání metabáze je v systému Ferda zcela transparentní
        tj. uživatel o ní neví. Uživatel pracuje pouze se soubory projektu
        (*.xfp). (Implementace: kdykoli krabičky Ferdy spouští moduly
        LISp-Mineru (jeho *Gen.exe) dávají mu jako parametr metabázi, kterou
        předtím přímo vygenerují. Jakmile *Gen.exe ukončí svou práci, je
        výsledek přečten z metabáze a ta je smazána.)
      </para>
    </note>
  </section>
  <section>
    <title>3. Vytvoření tabulky a Krabičky nabízené na vytvoření</title>
    <para>
      Když už máme vytvořenou a správně zapojenou krabičku <classname>Databáze</classname>,
      můžeme pomocí ní tvořit další krabičky. Slouží k tomu postup nazvaný
      <classname>Krabičky nabízené na vytvoření</classname>. Například krabička
      <classname>Databáze</classname> reprezentuje datový zdroj, který může
      obsahovat několik tabulek. Konkrétně databáze Barbora obsahuje jednu tabulku
      s názvem <classname>Loans</classname>. Proto z této krabičky lze vytvořit
      krabičku <classname>Tabulka</classname>, které se nastaví jméno v databázi
      na <classname>Loans</classname>. Uděláme to tak, že klikneme nad krabičku
      Barbory pravým tlačítkem a z kontextového menu krabičky vybereme skupinu
      <classname>Krabičky nabízené na vytvoření</classname> a v podmenu vybereme
      <classname>Tabulka Loans</classname>. Vytvoří se nová krabička, která nyní
      reprezentuje tabulku.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="boxesAskingCZ.png" format="PNG"/>
      </imageobject>
    </mediaobject>
    <para>
    </para>
    <para>
      Krabička <classname>Loans</classname> se dá vytvořit i bez použití Krabiček
      nabízených na vytvoření. Obdobný postup by byl udělat prázdnou krabičku 
      <classname>Tabulka</classname> přetažením z nových krabiček, propojením výstupní
      zásuvky krabičky <classname>Barbora</classname> se vstupní zásuvkou nové krabičky
      a nastavením vlastnosti <classname>Jméno</classname> na 
      <classname>Loans</classname>.
    </para>
    <para>
      Aby Ferdovy procedury pro dobývání znalostí mohli fungovat, musíme označit
      primární klíč tabulky, nad kterou pracujeme. Označme proto hodnotu
      <classname>loan_id</classname> ve vlastnosti <classname>Primární klíč</classname>
      tabulky.
    </para>
  </section>
  <section>
    <title>5. Vytvoření atributů</title>
    <para>
      Princip krabiček nabízených na vytvoření lze aplikovat i na jiné krabičky než
      <classname>Databáze</classname>. Například <classname>Tabulka</classname> nabízí
      na vytvoření všechny sloupce, které obsahuje. Tabulka <classname>Loans</classname>
      obsahuje sloupce, které se týkají výhodnosti půjček u klientů s různými 
      charakteristikami. Managera naší fiktivní banky by třeba mohlo zajímat, 
      jakým způsobem na sobě závisí plat věřitele a výhodnost jeho úvěrů. Můžeme
      si následující úlohu zkusit vyřešit na Ferdovi.
    </para>
    <para>
      Nejdříve vytvoříme krabičky <classname>Sloupec</classname> pro sloupce
      <classname>Salary</classname> udávající plat klienta a <classname>status</classname>
      pro výhodnost úroku. Poté z nich vytvoříme atributy. Atribut znamená vhodná
      kategorizace hodnot domény (sloupce). Jestliže si zobrazíme vlastnosti sloupce
      <classname>Salary</classname>, vidíme například že ve sloupci je 76 různých
      hodnot. Není zřejmě vhodné, abychom počítali se všemi hodnotami, mnohem lepší
      by bylo vytvořit jen pár intervalů, které by všechny možné hodnoty
      pokrývali. K tomuto slouží krabička nabízená na vytvoření 
      <classname>Equidistant intervals attribute</classname>. Ta vezme všechny hodnoty
      sloupce a rozdělí je do x stejně dlouhých intervalů, kde x se dá zvolit v Panelu
      vlastností. Vytvořme tedy tuto krabičku a zadejme do vlastnosti
      <classname>Délky</classname> číslo 1000 - intervaly budou rozdělené po 1000
      korunách.
    </para>
    <para>
      Sloupec <classname>status</classname> má na druhou stranu jenom 4 možné hodnoty:
      A, B, C, D. V tomto případě již má smysl vytvořit pro každou hodnotu jednu
      kategorii. K tomu slouží krabička nabízená na vytvoření 
      <classname>Each value one category attribute</classname>. Po vytvoření budeme
      mít atribut, který obsahuje 4 kategorie.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="attributesCZ.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </section>
  <section>
    <title>6. Tvorba úlohy až po zadání dílčích booleovských cedentů</title>
    <para>
      Pokračujme tedy v úloze a zadávejme pomocí krabiček všechny parametry
      které jsou potřebné pro zadání cedentu, který je už vstup pro 4ft proceduru.
      Budeme opět pokračovat pomocí krabiček nabízených na vytvoření. Nejdříve
      vytvoříme <classname>Zadání atomu</classname>. Tato krabička vyjadřuje, 
      jakým způsobem budou kategorie vystupovat v pozdějším literálu. Pro náš
      příklad ponecháme všechny implicitní vlastnosti. Dále pokračujeme
      <classname>Zadaním literálu</classname>. Literál je tvořen z atomů a je
      základním prvkem při konstrukci cedentů. U této krabičky se dá nastavit buď
      jeho typ, nebo znaménko. Zde nastavíme vlastnost 
      <classname>Znaménko literálu</classname> na pozitivní, protože je lepší
      zajímat se o pozitivní literály (například je pro nás cennější informace
      o zákaznících se statutem A než o těch kteří mají jiný status).
      Nakonec vytvoříme ze <classname>zadání literálu</classname> krabičku 
      <classname>Booleovský (dílčí) cedent</classname>. Cedent je konjunkce literálů
      a vstupuje do 4ft procedury jako jeden z parametrů. Ve vlastnostech krabičky
      se nastavuje délka dílčího cedentu, opět můžeme nechat výchozí hodnoty.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="cedentsCZ.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </section>
  <section>
    <title>7. Dokončení 4ft úlohy</title>
    <para>
      Procedura 4ft je nejrozšířenější a nejvíce intuitivní ze LISp-Miner procedur.
      Vstupují do ní 3 cedenty nazvané <classname>antecedent</classname>,
      <classname>sukcedent</classname> a <classname>podmínka</classname>. Procedura
      zkoumá souvislost antecedentu a sukcedentu za dané podmínky. Pro výpočet úlohy
      také <classname>4ft Kvantifikátor</classname>. Je to vzoreček (funkce) definovaná
      nad čtyřpolní tabulkou, vůči kterému se ověřují hypotézy. Pro náš příklad
      použijeme nejčastější 4ft kvantifikátor, <classname>fundovanou implikaci</classname>.
      Tento kvantifikátor má jeden vstupní parametr <classname>p</classname> a testuje
      se, jestli alespoň <classname>p</classname> procent objektů splňující antecedent
      splňuje také sukcedent. Neboli jinými slovy jestli to že objekt splňuje antecedent,
      znamená že splňuje také sukcedent alespoň v <classname>p</classname> procentech
      případů.
    </para>
    <para>
      Nyní už máme připravené vše abychom mohli dokončit naši úlohu. Z panelu
      <classname>Nové krabičky</classname> ze složky <classname>4ft-Miner</classname>
      přetáhneme za dílčí cedenty krabičku <classname>4ft Úloha</classname>.
      Tato krabička má 4 vstupní zásuvky - 
      <classname>Zadání antecedentu</classname>,
      <classname>Zadání sukcedentu</classname>,
      <classname>Zadání podmínky</classname> a <classname>4ft Kvantifikátor</classname>.
      Nyní do <classname>Zadání antecedentu</classname> zapojíme zadání cedentu
      vzniklého ze sloupce <classname>Salary</classname>, do
      <classname>Zadání sukcedentu</classname> zapojíme zadání cedentu
      vzniklého ze sloupce <classname>status</classname>. Podmínku v tomto případě
      nepoužijeme. Do poslední zásuvky pro kvantifikátor potřebujeme kvantifikátor
      <classname>Founded implication</classname>, který najdeme v nových krabičkách
      ve složce <classname>Kvantifikátory</classname> a <classname>4ft-Miner</classname>.
      Úloha je připravená ke spuštění.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="4ftTaskCZ.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </section>
  <section>
    <title>8. Spuštění 4ft úlohy a Akce krabiček</title>
    <para>
      Spouštění akcí krabiček je další možné využití krabičky. Akce definované pro
      krabičku jsou přístupné z položky <classname>Akce</classname> kontextového
      menu nad krabičkou. Jak vidíme krabička <classname>4ft Úloha</classname> má
      pouze jednu akci nazvanou <classname>Spusť</classname>. Tato akce spustí
      generování hypotéz pro příslušnou úlohu. Můžete si všimnout že i jiné 
      krabičky mají své akce.
    </para>
    <para>
      Když tedy klikneme na spuštění generování hypotéz, spustí se dialog, ve
      kterém je znázorněný průběh generování. Poté znovu označíme na ploše krabičku
      4ft úlohy. Pozorný uživatel si všimne, že se krabičče změnili vlastnosti. 
      Vlastnost <classname>Stav</classname> ukazuje hodnotu 
      <classname>Completed</classname>, to znamená že generování doběhlo. Bohužel se
      nám z 16 verifikací nepodařilo vybrat žádnou, která by vyhovovala podmínkám
      kvantifikátoru. Nastavíme tedy vlastnost <classname>p</classname> v
      kvantifikátoru z 0,9 na 0,8 a zkusíme spustit úlohu znovu. Výborně, nyní už jedna
      hypotéza prošla.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="hypotheses.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </section>
  <section>
    <title>9. Zobrazení výsledků a Moduly pro interakci</title>
    <para>
      Pomocí <classname>Modulů pro interakci</classname> krabičky zobrazují svůj
      obsah uživateli. Takže abychom zobrazili naše hypotézy, použijeme k tomu
      modul pro interakci <classname>Modul pro prohlížení výsledků</classname> 
      krabičky <classname>4ft Úloha</classname>. V kontextovém menu nad označenou
      krabičkou na něho klikneme v podmenu <classname>Moduly pro interakci</classname>.
      Následně se nám zobrazí tabulka s hypotézami a pod ní prostor pro graf.
      Jestliže vybereme naši (jedinou) hypotézu, ukáže se nám graf reprezentující
      čtyřpolní tabulku pro danou hypotézu a v Panelu vlastností se zobrazí další
      informace o hypotéze.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="contingencyCZ.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </section>
  <section>
    <title>10. Interpretace výsledků</title>
    <para>
      Výsledná hypotéza říka, že dvojice antecedent - plat mezi 11110 a 12110 a
      sukcedent - status C splňuje kvantifikátor fundované implikace na 80%. 
      To znamená, že jestliže bude mít některý klient tento plat, tak je velká
      pravděpodobnost, že jeho výsledný status bude C. Na první pohled se to
      může zdát jako dobrý výsledek. Když se ale podíváme na čtyřpolní tabulku,
      vidíme že podpora této hypotézy je velmi malá - antecedent splňuje jenom
      45 záznamů z celkových asi 6000 které v tabulce máme (a to není ani 1 procento). 
      Když se podíváme na
      modul pro interakci <classname>Modul frekvence sloupců</classname> u atributu
      s platem, zjistíme velmi nerovnoměrné rozložení hodnot. Nabízí se nám možnost
      například použít ekvifrekvenčního atributu, modifikace kvantifikátorů....
      Doufáme, že nyní už víte, jak s Ferdou pracovat aby ste dosáhli co
      nejlepších výsledků. Hodně štěstí.
    </para>
  </section>
</article>