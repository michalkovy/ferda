<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article lang="en">
  <articleinfo>
    <authorgroup>
      <author>
        <personname>
          <firstname>Martin</firstname>
          <surname>Ralbovský</surname>
        </personname>
        <email>martin.ralbovsky@gmail.com</email>
      </author>
      <othercredit>
        <personname>
          <firstname>Tomáš</firstname>
          <surname>Kuchař</surname>
        </personname>
        <email>tomas.kuchar@gmail.com</email>
      </othercredit>
    </authorgroup>
    <pubdate>2007-07-19</pubdate>
    <title>Ferda Core documentation</title>
    <titleabbrev>Ferda Core</titleabbrev>
    <!--
    <revhistory>
      <revision>
        <revnumber>1.0</revnumber>
        <date>2007-07-19</date>
        <revremark>First version of the document
        </revremark>
      </revision>
    </revhistory>
    -->
  </articleinfo>
  <abstract>
    <para>
      The document describes collection of dynamic libraries 
      Ferda Core. Each of the library provides specific functionality
      for several boxes in the Ferda system. Document describes
      the architecture of Ferda Core and individual libraries.
    </para>
  </abstract>
  <section>
    <title>What is Ferda Core</title>
    <para>
      Ferda Core is a collection of dynamic libraries that provide specific
      functionality for several boxes in the Ferda system.
    </para>
    <section>
      <title>Why to have Ferda Core libraries?</title>
      <para>
        Each box module in the Ferda system is from the design point of view independent
        module with ability to run anywhere over the network connected with the rest of
        the system via the ICE middleware. However, often happens that more boxes need
        the same functionality. Therefore it is needed
        to have shared libraries that provide this functionality.
      </para>
      <para>
        Moreover, in some cases such as
        bitstring handling in GUHA tasks generation, the additional cost of using 
        middleware would be too large and performance of the system would suffer.
        Therefore the boxes perform only calls of the Ferda Core libraries and these
        libraries do the computationally difficult job.
      </para>
    </section>
    <section>
      <title>Architecture overview</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="ferdaCoreArchitecture.png" format="PNG"/>
        </imageobject>
      </mediaobject>      
      <para>
        The image shows architecture of Ferda Core libraries with respect to
        other parts of the Ferda system. The user communicates with the box
        modules via the Ferda FrontEnd environment. The boxes then use Ferda
        core libraries for their functionality. 
      </para>
      <para>
        Programmer can see source code of all the libraries in the
        <classname>ferda\src\Modules\Core\Core.sln</classname>
        Visual Studio project. Here each library corresponds to one VS project.
        The libraries are built and distributed
        to directories according to a <classname>ferda\src\Modules\default.build</classname>
        nant script.
      </para>
      <para>
        Below are listed the Ferda Core libraries:
      </para>
      <itemizedlist>
        <listitem>
          <simpara>
            Attribute
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Base
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Boxes
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Data
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Helpers
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            Math
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            MiningProcessor
          </simpara>
        </listitem>        
      </itemizedlist>
    </section>
  </section>
  <section>
    <title>Attribute</title>
    <para>
      The Attribute library handles construction of attributes in the Ferda system.
      Creation of attributes belongs to the data preparation phase of data mining.
      By creation of attributes we mean creation of finite subsets of a domain of a
      data column. Attribute can consist of individual categories and intervals
      (only on ordinal and cardinal data).
      The library can guarantee disjunctions of intervals or determine, if a category
      lies within the interval.
    </para>
    <para>
      User can define attribute in two ways. One way is to create an empty attribute
      and fill it with categories or intervals. The other way is to use algorithms for
      automatic construction of intervals. These are contained in the 
      <classname>Ferda.Guha.Attribute.DynamicAlgorithm</classname> namespace. There are
      algorithms for construction equidistant and equifrequency intervals. 
    </para>
    <para>
      The <classname>Ferda.Guha.Attribute.Axis</classname> class is an important class that
      provides attribute with a lot of the functionality, such as bit string generation,
      disjunctivity setting or string operations with the attribute.
    </para>
  </section>
  <section>
    <title>Base</title>
    <para>
      The Base library contains basics of box modules implementation in the Ferda system
      and thus we will describe it more carefully. 
      <classname>Ferda.Modules.BoxModuleFactoryCreatorI</classname>,
      <classname>Ferda.Modules.BoxModuleFactoryI</classname> and
      <classname>Ferda.Modules.BoxModuleI</classname> implement the important Ice
      interfaces of box modules. One can read more about box modules implementation in
      the "Implementace Ferdy" document (available only in Czech). These interfaces provide
      box functionality for the <classname>ModulesManager</classname> component of the
      system. The classes make it easier for a C# developer to write his own boxes. Note
      that developer using other programming language would have to implement these
      interfaces on his own. 
    </para>
    <para>
		There are two important interfaces defined for the work with the boxes. These are
		the <classname>Ferda.Modules.IBoxInfo</classname> and 
		<classname>Ferda.Modules.IFunctions</classname>. The first one implements fundamental
		functionality and a lot of basic features of a box type. The second one implements
		boxe's ICE functionality. More on how to create boxes can be found in 
		"HowToBoxModule" tutorial (available only in Czech). 
    </para>
    <para>
		The remaining classes of the library take also care for the boxes implementation. The
		<classname>Ferda.Modules.SocketConnections</classname> is worth mentioning.
		It contains static functions for operating with socket of a box, for retrieving the function
		proxies, box modules proxies and default user labels. 
    </para>
  </section>
  <section>
			<title>Boxes</title>
			<para>
				The Base library defined the <classname>Ferda.Modules.IBoxInfo</classname>
				interface. This interface provides information about types of a box. It
				contain information about boxes label, sockets, properties actions and so on. 
				We decided to store most of these information in XML configuration files for
				easier access and configuration. The main function of the Boxes library is
				to handle these XML configuration files.
			</para>
			<para>
				<classname>Ferda.Modules.Boxes.BoxInfo</classname> is the main abstract
				class of this library. It implements the <classname>Ferda.Modules.IBoxInfo</classname>
				interface. Other classes serve mainly for serializing contents of this class into
				the XML files. There are XML schemas named <classname>box(es).xsd</classname>
				and <classname>box(es)Localizatoin.xsd</classname> that show schema of XML
				configuration files. 
			</para>
			<para>
				One class worth mentioning is the
				<classname>Ferda.Modules.Boxes.ExceptionHandler.cs</classname> class.
				It provides static functions for method handling with specified error behavior.
				This is widely used for getting boxes properties or functional outputs. When
				getting property of a box, the process should not throw an exception. On contrary,
				when validating a box or getting functional output of a box, exception should be 
				thrown. 
			</para>
	</section>
	<section>
		<title>Data</title>
		<para>
			The Data library provides DAL (Data Access Layer) for the Ferda system.
			In terms of GUHA mining, this means construction of task up to 
			creation of attributes. The classes of this library take care of connecting to a 
			database, retrieving information about datat tables and columns of the tables.
			The library is used by boxes from the 
			<classname>Data preparation.Data source</classname> group.
		</para>
		<para>
			The <classname>Ferda.Guha.Data.IceDesignDocumentation</classname> class
			describes the slice design of the data layer. 
		</para>
	</section>
	<section>
		<title>Helpers</title>
		<para>
			The Helpers library contains some functionality that can be useful. It contains of
			two parts: caching and common
		</para>
		<section>
			<title>Caching</title>
			<para>
				This part provides caching functionality. There is an implementation of
				most recently used items holder and implementation of a simple cache.
			</para>
		</section>
		<section>
			<title>Common</title>
			<para>
				This part provides some other common functionality. See the class summaries
				for more details. 
			</para>
		</section>
	</section>
	<section>
		<title>Math</title>
		<para>
			The Math library provides mathematical formulas for complex mathematical computing
			in Ferda. There are several classes defined, each of which deals with specific part
			of the library. There are classes for combinatorics, factorial, information theory and
			contingency tables. The <classname>Ferda.Guha.Math.SpecialFunctions</classname>
			define several other functions that could be used. 
		</para>
		<para>
			Another important class is the 
			<classname>Ferda.Guha.Math.Quantifiers.IceDesignDocumentation</classname>.
			This class describes the slice design of the GUHA quantifiers.
		</para>
		<para>
			The <classname>Ferda.Guha.Math.Karby-FourFTQuantifiers</classname>
			file contains commented code of quantifiers in Tomáš Karban's work <citation>Karban</citation>.
			Our implementation of quantifiers in Ferda was greatly inspired by this work.
		</para>
	</section>
	<section>
		<title>Mining Processor</title>
		<para>
      The mining processor is by far the most complex library in Ferda Core. 
      The library takes care about running the GUHA procedures defined
      in the system (there are 6 relational and 2 multirelational procedures
      defined). Therefore we pay special attention to this library.
    </para>
    <para>
      In contrary to other libraries that are used as dynamic libraries
      for the box modules, the mining procesor is an Ice module on its own.
      It is a servise that is running and individual task boxes can access
      this service and perform computation of GUHA mining tasks. The 
      slice code can be found in 
      <classname>slice/Modules/Guha.MiningProcessor.ice</classname>.
      For the computation, the task box modules access only the
      <classname>Run</classname> and 
      <classname>GetNextBitString</classname> method of the
      <classname>MiningProcessorFunctions</classname> interface.
      The parameters of this function contain all the information needed
      for the computation.
    </para>
    <para>
      This way, all the computing done when calculating the tasks, is done
      in one module and there are no performance problems with transporting
      large amount of data over the Ice middleware layer. More on this topic
      can be found in <citation>Kuchar</citation>
    </para>
    <para>
      The library is divided into 7 parts and we will explain in more detail
      each of the parts. 
    </para>
    <section>
      <title>BitStrings</title>
      <para>
        Our implementation of the GUHA method
        <footnote>
          <para>
            Originating from the LISp-Miner system
          </para>
        </footnote>
        uses the bit string approach (called also <classname>granular computing</classname>
        for computing hypotheses. This provides efficient bit string handling, because
        of the Boolean operations carried out by elementary instructions of a processor. 
        More details can be found in <citation>Rauch</citation>. This part of the library
        defines the bit string and cache of bit string implementation. 
      </para>
      <para>
        There are two main interfaces to handle bit strings. The <classname>IBitString</classname>
        interface defines the basic operations with bit strings and
        <classname>IBitStringCache</classname> defines how to deal with cache of 
        bit strings. 
      </para>
    </section>
    <section>
      <title>Design</title>
      <para>
        The Design part is a documentation of the slice design of the mining processor. The
        class diagram of the design is located in
        <classname>slice/Modules/Guha.MiningProcessor.csd</classname>. 
      </para>
    </section>
    <section>
      <title>Formulas</title>
      <para>
        The Formula part handles creation of formulas of Boolean and categorial attributes,
        mainly for interpretation of the results. These two types of formulas are
        also the main abstract classes that derive from the general
        <classname>Formula</classname> class. For Boolean attributes, there are
        classes that represent atom, negation, conjunction and disjunction formulas.
        These classes can describe underlying formulas in form of comprehensible
        text representation. Moreover, the Formula part contains simple helping classes
        for building formulas.
      </para>
    </section>
    <section>
      <title>Generation</title>
      <para>
        The Generation part of mining processor takes care about the very important
        process of bit string generation. In GUHA terminology, this means to construct
        data representation of all the relevant questions. Ferda uses bit strings for
        the data representation, details are to be found in <citation>Rauch</citation>. 
        In principle, for each category of a defined attribute one bit string is created.
        The length of this bit string is equal to the lenght of records in the source
        data matrix. The bit string contains a 1 on position n, iff the n-th record
        of the data matrix contains the category (for which the bit string is created).
        The bit strings of categories are aftewrards dealt according to the Boolean
        attribute setting of the task. The Generation part allows to perform all the
        bit string operations that can occur in a Boolean attribute setting.
      </para>
      <para>
        In Ferda, we implement the generation of Boolean (and categorial) attributes
        via the C# enumerators of bit strings. Enumerator is a class, that can effectivelly return 
        objects in the <classname>foreach</classname> cycle. For a programmer, the
        C# language provides easy to use implementatio of enumerators with the 
        <classname>yield</classname> keyword. <classname>IEntityEnumerator</classname>
        is the basic interface for bit string enumerators. The 
        <classname>EntityEnumerable</classname> class is the abstract class that
        implements the interface. There are also other classes defined in the
        <classname>src/Modules/core/MiningProcessor/Generation/Common.cs</classname>,
        which are successors of the <classname>EntityEnumerable</classname>
        and provide some more functionality. There are classes for leaf entities
        (atom settings of some kind), classes for single-operand entities
        (sign setting) and classes for multi-operand entities (conjunction, disjunction...).
        There is also the skip step optimalization defined, currently only for 
        Base parameter. 
      </para>
      <para>
        Let us pay special attention to the generation of multi-operand bit strings. The
        <classname>MultiOperandEntity</classname> abstract class contains code for
        implementing not only conjunction and disjunction, but general boolean operator.
        The class provides enumerator with the aid of a rather complicated automaton.
        The picture shows basic design of that automaton.
      </para>
      <mediaobject>
        <imageobject>
          <imagedata fileref="multiOperandGenerationAutomaton.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </section>
    <section>
      <title>Miners</title>
      <para>
        The Miners part of the mining processor does actual computing of GUHA
        procedures. The part includes implementation of the 
        <classname>slice/Modules/Guha.MiningProcessor.ice</classname> interface.
        Class for each miner is defined. These classes derive from the
        <classname>MiningProcessorBase</classname> abstract class, which implements
        common functionality of every particular miner.
      </para>
      <para>
        Each miner class has the <classname>Trace</classname> method
        for computation of normal (non-multirelational) task and the
        <classname>TraceBoolean</classname> method. These methods
        do the verifications of relevant questions.
      </para>
    </section>
    <section>
      <title>QuantifierEvaluator</title>
      <para>
        The Miners part generated the all the relevant questions and
        verified them. For verification it uses the functionality from the
        QuantifierEvaluator. This part consists of three logical parts.
      </para>
      <para>
        The <classname>IEvaluator</classname> interface and its implementations
        is the first part. The evaluator is class responsible of evaluation
        of all relevant questions and composition of result of the task
        from the evaluation. Currently, the <classname>FirstN</classname>
        and <classname>FirstNoN</classname> evaluators are implemented,
        the second used is used for multirelational data mining. The remaining
        logical parts are contingency table handling and quantifier handling.
        Both contain untrivial code to deal with their objects of interest.
      </para>
    </section>
	</section>
  <bibliography>
		<biblioentry>
			 <abbrev>Karban</abbrev>
			  <authorgroup>
				<author><firstname>Tomáš</firstname><surname>Karban</surname></author>
			  </authorgroup>
			  <title>Data Mining in Relational Databases</title>
			  <publisher>
						<publishername>Doctoral work at Faculty of Mathematics and Physics,
						Charles University, Prague</publishername>
				</publisher>
		</biblioentry>
    <biblioentry>
      <abbrev>Kuchar</abbrev>
      <authorgroup>
        <author>
          <firstname>Tomáš</firstname>
          <surname>Kuchař</surname>
        </author>
      </authorgroup>
      <title>Experimentální GUHA procedury</title>
      <publisher>
        <publishername>
          Master thesis at Faculty of Mathematics and Physics,
          Charles University, Prague (in Czech)
        </publishername>
      </publisher>
    </biblioentry>
    <biblioentry>
      <abbrev>Rauch</abbrev>
      <authorgroup>
        <author>
          <firstname>Jan</firstname>
          <surname>Rauch</surname>
        </author>
      </authorgroup>
      <title>GUHA Method and Granular Computing</title>
      <publisher>
        <publishername>
          Presented in the Proceedings of IEEE
          International Conference on Granular
          Computing 2005. see
          <ulink url="http://www.cs.sjsu.edu/~grc/grc2005/index.html">
            http://www.cs.sjsu.edu/~grc/grc2005/index.html
          </ulink>
        </publishername>
      </publisher>
    </biblioentry>
  </bibliography>
</article>
