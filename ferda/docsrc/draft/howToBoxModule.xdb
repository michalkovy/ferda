<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article lang="en">
	<articleinfo>
		<authorgroup>
			<author>
				<personname>
					<firstname>Martin</firstname>
					<surname>Ralbovský</surname>
				</personname>
				<email>martin.ralbovsky@gmail.com</email>
			</author>
			<othercredit>
				<personname>
					<firstname>Tomáš</firstname>
					<surname>Kuchař</surname>
				</personname>
				<email>tomas.kuchar@gmail.com</email>
			</othercredit>
		</authorgroup>
		<pubdate>2007-02-03</pubdate>
		<title>Jak přidat do Ferdy novou krabičku</title>
		<titleabbrev>Jak přidat krabičku</titleabbrev>
		<!--
    <revhistory>
      <revision>
        <revnumber>1.0</revnumber>
        <date>2007-03-22</date>
        <revremark>První verze dokumentu
        </revremark>
      </revision>
		<revision>
		<revnumber>1.1</revnumber>
		<date>2007-07-23</date>
		<revremark>Přidal jsem do tvorby knihovny použití sdíleného komunikátoru</revremark>
		</revision>
		<revision>
			<revnumber>1.2</revnumber>
			<date>2009-01-09</date>
			<revremark>
				Aktualizace nových verzí produktů
			<revremark>
		</revision>
    </revhistory>
    -->
	</articleinfo>
	<abstract>
		<para>
      Tento dokument popisuje, jak vytvořit novou krabičku pro systém Ferda.
      Informuje také o doporučených nástrojích a postupech, které tvůrci
      Ferdy používají pro tvorbu krabiček. Ukazuje také, jak vytvořit novou
      knihovnu, do které může uživatel umístnit nové krabičky.
    </para>
	</abstract>
	<section>
		<title>Potřebné a doporučené nástroje</title>
		<section>
			<title>Ice</title>
			<para>
        Ice je middleware, který používá Ferda pro komunikaci mezi modely. 
        To umožňuje spouštět systém distribovaně po síti a další věci. Částečně
        je funkce vysvětlena v dokumentech 
        <classname>implementaceKrabicek</classname> a
        <classname>implementaceFerdy</classname>. V tomo dokumentu se budeme
        zabývat funkcemi Ice z hlediska vytvoření nových krabiček.
      </para>
			<para>
        Instalační balíček Ice je volně ke stažení na adrese 
        <ulink url="http://www.zeroc.com">http://www.zeroc.com</ulink>.
        Ferda používá verzi 3.3.0.
      </para>
		</section>
		<section>
			<title>NAnt</title>
			<para>
        Utilitu NAnt používáme pro kompilaci a sestavování spustitelných souborů
        Ferdy. Můžete si ji stáhnout na 
        <ulink url="http://nant.sourceforge.net">http://nant.sourceforge.net</ulink>.
        Pro projekt Ferda používáme verzi 0.84 a vyšší.
      </para>
		</section>
		<section>
			<title>.NET a Visual Studio</title>
			<para>
        Ačkoli middleware Ice podporuje řadu programovacích jazyků, tvůrci Ferdy
        si vybrali a doporučují jazyk C#. V tomto dokumentu budeme dále
        předpokládat pouze kódy v jazyce C#. Platforma pro (nejen) tento jazyk se
        jmenuje .NET Framework a je dostupná ve verzi od Microsoftu, či Open source
        implementace Mono.
      </para>
			<para>
        Ferda používá .NET Framework verze 2 (a vyšší). Můžete si ji stáhnout i s SDK na adrese
        <ulink url="http://www.microsoft.com/downloads">www.microsoft.com/downloads</ulink>.
        Doporučujeme ji však používat i s vývojovým softwarem Microsoft Visual Studio
        2005 či 2008. Tento software je však komerční.
      </para>
			<para>
        Alternativou ke komerčnímu Visual Studiu je volně dostupný Visual C# Express 
        Edition 2005 (2008) taktéž od Microsoftu, ke stažení na 
        <ulink url="http://msdn.microsoft.com/vstudio/express/visualcsharp/">
          zde
        </ulink>. Dále je k dispozici open source nástroj SharpDevelop na adrese
        <ulink url="http://www.icsharpcode.net/OpenSource/SD/">
          zde</ulink>. Alternativou k platformě
        .NET Framework je open source platforma Mono, <ulink url="http://www.mono-project.com/">
          domovská stránka</ulink> umožňující spouštění Ferdy například na
          systému Linux. 
          Pro tuto platformu však v součastné době nejsou doimplementovány části Windows.Form,
          tudíž uživatelské prostředí pod Monem nebude běhat. Doporučujeme proto 
          .NET verzi 2 a vyšší.
      </para>
		</section>
	</section>
	<section>
		<title>Nezávislé knihovny a krabičky v nich</title>
		<para>
      Programátor, který chce přidat krabičku do Ferdy může buď přidat krabičku do
      existující knihovny, anebo pro ni vytvořit novou dynamickou knihovnu. Preferujeme
      první případ, pokud přidávaná krabička je součástí nějakého většího konceptu
      krabiček a uživatel pouze rozšiřuje tento koncept. Dobrým příkladem
      je přidání dalšího kvantifikátoru pro určitou GUHA proceduru. 
    </para>
		<para>
      Jestliže však programátor chce vytvořit pomocí krabičky (či krabiček) úplně
      novou funkcionalitu, je možno vytvořit pro tyto krabičky novou dynamickou
      knihovnu (dll). Kromě výhod z hlediska návrhu systému ma tento způsob i 
      další modulární výhodu: při instalaci Ferdy je možno označit části, které 
      se budou instalovat. Toto probíhá pomocí kopírování příslušných knihoven.
      Programátor může tedy vytvořit zcela modulární součást systému. 
    </para>
	</section>
	<section>
		<title>Tvorba nové dynamické knihovny</title>
		<section>
			<title>1. Vytvoření adresářů pro novou knihovnu</title>
			<para>
        Nejdříve musí programátor vytvořit nový adresář pro svoji knihovnu.
        Nechť se naše knihovna jmenuje <classname>SampleBoxModules</classname>. 
        Vytvoříme tedy adresář 
        <classname>src\Modules\BoxModulesServices\SampleBoxModules</classname> pro budoucí
        zdrojové kódy krabiček. Dále vytvoříme adresář 
        <classname>slice\Modules\Boxes\SampleBoxModules</classname> pro slice návrh
        budoucích krabiček.
      </para>
		</section>
		<section>
			<title>2. Referenční knihovny potřebné pro kompilaci krabiček</title>
			<para>
        Dříve než přistoupíme k vytvoření konfiguračních souborů a projektů pro
        novou krabičku, obeznámíme programátora s knihovnami potřebnými k vytvoření
        krabičky.
      </para>
			<formalpara>
				<title>FerdaBase.dll</title>
				<para>
          Obsahuje kód (datové struktury, …) vygenerovaný ze slice návrhů 
          Ferda.Modules a Ferda.ModulesManager, běžné typy vlastností (Basic 
          property types) a ve třídě Ferda.Modules.Exceptions pomocné funkce
          pro výjimky.
        </para>
			</formalpara>
			<formalpara>
				<title>FerdaServerBase.dll</title>
				<para>
          Obsahuje třídy BoxModuleFactoryCreatorI, BoxModuleFactoryI, 
          BoxModuleI. Pro implementaci nových krabiček rozhodující interface
          IBoxInfo a třídu BoxInfo (implementující tento interface). Dále
          pomocné třídy ve Ferda.Modules.Serializer, které deserealizují 
          konfigurační xml soubory pro potřeby třídy BoxInfo. Třída 
          Ferda.Modules.Boxes.SocketConnections usnadňuje práci se zásuvkami
          (socket) krabiček.
        </para>
			</formalpara>
			<formalpara>
				<title>FerdaBoxInterfaces.dll</title>
				<para>
          Kód vygenerovaný ze slice návrhů krabiček distribuovaných s Ferdou.
        </para>
			</formalpara>
			<formalpara>
				<title>icecs.dll</title>
				<para>Knihovna pro práci s Ice (C#).</para>
			</formalpara>
			<formalpara>
				<title>iceboxcs.dll</title>
				<para>
          Píšete-li vlastní službu, v niž poběží vlastní krabičky (bude probráno dále)
          implementujete abstraktní třídu Ferda.Modules.FerdaServiceI, která zase
          implementuje interface IceBox.Service. (Ten je definován v iceboxcs.dll)
        </para>
			</formalpara>
		</section>
		<section>
			<title>3. Vytvoření build souborů pro novou knihovnu</title>
			<para>
        V tomto návodu používáme pro kompilaci krabiček soubor nástroj NAnt.
        Tento nástroj kompiluje pomocí konfiguračních xml souborů. Proto musíme
        obohatit příslušné soubory o komplaci nové knihovny. Soubor, který má
        na starosti kompilaci knihoven se jmenuje 
        <classname>src\Modules\BoxModulesServices\default.build</classname>.
        Tento soubor definuje kompilaci jednotlivých knihoven pomocí NAntu.
        NAnt blíže nebudeme rozebírat, má k dispozici vlastní dobrou uživatelskou
        dokumentaci. Kód, který musíme přidat pro úspěšnou kompilaci do tohoto
        souboru je:
      </para>
			<para>
				<programlisting>
&lt;target name="SampleBoxModules"&gt;
  &lt;csc target="library" 
       output="${path::combine(build.dir,'SampleBoxModules.dll')}" 
       doc="${path::combine(build.dir,'SampleBoxModules.xml')}" 
       debug="${debug}" optimize="${optimize}"&gt;
    &lt;nowarn&gt;
      &lt;warning number="1591"/&gt;
    &lt;/nowarn&gt;
    &lt;sources&gt;
      &lt;include name="SampleBoxModules/**.cs"/&gt;
      &lt;exclude name="SampleBoxModules/**/generated/**.cs"/&gt;
    &lt;/sources&gt;
    &lt;references&gt;
      &lt;include name="${path::combine(build.dir,'FerdaBase.dll')}"/&gt;
      &lt;include name="${path::combine(build.dir,'FerdaBoxInterfaces.dll')}"/&gt;
      &lt;include name="${path::combine(build.dir,'FerdaServerBase.dll')}"/&gt;
      &lt;include name="${path::combine(lib.dir,'icecs.dll')}"/&gt;
      &lt;include name="${path::combine(lib.dir,'iceboxcs.dll')}"/&gt;
      &lt;include name="System.dll"/&gt;
      &lt;include name="System.Data.dll"/&gt;
      &lt;include name="System.Xml.dll"/&gt;
    &lt;/references&gt;
  &lt;/csc&gt;
&lt;/target&gt;
          </programlisting>
        Vysvětleme si tento kód. Tag <classname>target</classname> znamená 
        jednu úlohu v NAntu, pojmenujeme ji SampleBoxModules. Tag <classname>csc</classname>
        volá kompilátor C#. Atribut <classname>target</classname> nastavuje
        typ výsledku kompilace (dll či exe), <classname>output</classname>
        nastavuje kam se má výsledek uložit. Slova začínající dolarem jsou 
        proměnné, které dostává tento kompilační xml z nadřazených souborů 
        či z příkazové řádky. Tag <classname>sources</classname> označuje 
        zdrojové vstupy, vynechané Ice generované soubory ve složce 
        <classname>generated</classname> se automaticky kompilují do jiné
        knihovny. Tag <classname>references</classname> označuje reference,
        vždy když se tyto požadované referenční knihovny obohatí o nějakou
        další, je ji třeba přidat i do tohoto kompilačního xml.
      </para>
			<para>
        Výše zobrazený kód definuje jednu úlohu v NAntu. Tato úloha se
        sama o sobě neprovede, pokud se nezavolá. Toho docílíme přidáním
        závislosti v hlavní úloze kompilačního souboru. Řádek 
        <programlisting>
&lt;target name="build" description="Build Module Services" 
depends="FerdaSampleBoxes,FerdaDataPreparationBoxes,FerdaBasicBoxes,FerdaGuhaMiningBoxes"&gt;
        </programlisting>
        změníme na 
        <programlisting>
&lt;target name="b uild" description="Build Module Services"
depends="FerdaSampleBoxes,FerdaDataPreparationBoxes,FerdaBasicBoxes,FerdaGuhaMiningBoxes,SampleBoxModules"&gt;
      </programlisting>
        Nyní při spuštění celoferdovských kompilačních příkazů NAntu
        (<classname>nant fullinstall</classname> se již bude nová 
        knihovna kompilovat a bude umístěna v <classname>bin\server</classname>.
      </para>
		</section>
		<section>
			<title>4. Vytvoření projektu ve Visual Studiu</title>
			<para>
        Pro pohodlnou práci doporučujeme pro novou knihovnu vytvořit
        nový projekt ve Visual Studiu. Nejdříve otevřeme solution
        <classname>src\Modules\BoxModulesServices\BoxModulesServices.sln</classname>.
        V tomto solution přidáme nový prázdný C# projekt, který umístníme
        do vytvořeného adresáře pro krabičky (krok 1.). Do referencí přidáme
        všechny reference z kroku 2. Tento projekt můžeme kompilovat i v
        rámci vizuálního prostředí a nemusíme to dělat složitě přes NAnt.
      </para>
		</section>
		<section>
			<title>5. Tvorba třídy service.cs</title>
			<para>
        Aby se knihovna mohla zaregistrovat u služby IceGrid, potřebuje
        implementovat abstraktní třídu <classname>Ferda.Modules.FerdaServiceI </classname>.
        Následuje kód se vzorovou implementací třídy.
      </para>
			<programlisting>
using Ferda.Modules.Boxes.SampleBoxModules.*;
using Ice;

namespace Ferda.Modules.Boxes.SampleBoxModules
{
    /// &lt;summary&gt;
    /// Sample IceBox service
    /// &lt;/summary&gt;
    public class Service : FerdaServiceI
    {
      /// &lt;summary&gt;
      /// Registers box to ice object adapter
      /// &lt;/summary&gt;
      protected override void registerBoxes()
      {
      }
    }
}
      </programlisting>
			<para>
        Třída <classname>Service</classname> slouží k registrace jednotlivých
        typů krabiček. Většinu potřebného obstarává abstraktní třída
        <classname>FerdaServiceI</classname>. Do metody <classname>registerBoxes</classname>
        budeme později psát kód pro registraci jednotlivých krabiček. 
      </para>
			<para>
        Zmíníme se ještě o části using: namespace
        <classname>Ferda.Modules.Boxes.SampleBoxModules</classname> odpovídá namespacu
        všech pozdějších krabiček této knihovny (vyjádřeno hvězdičkou). Název namespacu
        přesně odpovídá cestě uložení zdrojových kódů ja v 
        <classname>src\Modules\BoxModulesServices</classname>, tak v
        <classname>slice\Modules\Boxes</classname> a to z důvodu přehlednosti a
        automatického generování slice tříd.
      </para>
		</section>
		<section>
			<title>6. Změny v application.xml</title>
			<para>
        Posledním krokem je přidání nově vzniklé knihovny do 
        aplikačního souboru <classname>application.xml</classname>, 
        který konfiguruje celého Ferdu. Jedná se zde o přidání instance
        služby knihovny do služby Icebox. Tato služba obsahuje klientské
        aplikace všech modulů v systému Ferda. Do tagu serveru s identifikátorem
        <classname>FerdaServerTemplate</classname>, do části icebox přidáme
        řádek
        <programlisting>
&lt;service-instance template="FerdaServiceTemplate" name="SampleBoxModules" 
entry="SampleBoxModules.dll:Ferda.Modules.Boxes.Wizards.Service" endpoints="${endpoints}" /&gt;
        </programlisting>
        a řekneme mu, že má používat sdílený komunikátor. To se nastavuje pomocí vlastnosti
        
<programlisting>
&lt;property name="IceBox.UseSharedCommunicator.SampleBoxModules" value="1"/&gt;
</programlisting>             
        Dále vytvoříme nový adaptér replik přidáním řádku:
        <programlisting>
&lt;replica-group id="SampleBoxModulesReplicaAdapter"&gt;
&lt;/replica-group&gt;
        </programlisting>
        do kterého budeme přidávat objekty jednotlivých krabiček. 
			</para>
		</section>
		<section>
			<title>Registrace do GAC</title>
			<para>
        Tohle dodělat...
      </para>
		</section>
	</section>
	<section>
		<title>Tvorba nové krabičky</title>
		<section>
			<title>1. Vytvoření adresářů pro novou krabičku</title>
			<para>
        Podobně jako u knihovny je prvním krokem vytvoření adresářů
        pro novou krabičku. Budeme tvořit krabičku <classname>SampleBoxModule</classname>
        v již vytvořené knihovně <classname>SampleBoxModules</classname>.
        Vytvoříme tedy adresář 
        <classname>src\Modules\BoxModulesServices\SampleBoxModules\SampleBoxModule</classname>
        pro zdrojový kód krabičky (a další věci) a adresář
        <classname>slice\Modules\Boxes\SampleBoxModules\SampleBoxModule</classname>
        pro slice návrh. krabičky. 
      </para>
		</section>
		<section>
			<title>2. Vytvoření slice návrhu krabičky</title>
			<para>
        Middleware Ice podporuje řadu programovacích jazyků, mezi nimi 
        například C#, C++, Java, Python a další. Aby mohl všechny tyto
        jazyky používat, definuje svůj vlastní zjednodušený deklarativní
        jazyk Slice. Ice pomocí svých nástrojů potom z deklarací slice
        tvoří kód v určeném cílovém jazyku, který se posléze kompiluje
        standardním způsobem.
      </para>
			<para>
        Ferda používá Ice pro komunikaci mezi moduly, zejména mezi komunikaci
        mezi krabičkami a managerem modulů (více v dokumentech
        <classname>registraceModulu</classname> a 
        <classname>implementaceFerdy</classname>. Krabičku ve Ferdovi
        si lze představit jako funkci, která má vstupní parametry (zásuvky)
        a vrací definované výstupy. Právě výstupy krabičky definujeme
        pomocí slice, neboť tak jsou viditelné pro ostatní krabičky.
      </para>
			<para>
        Kód slice zobrazený níže uložíme do adresáře vytvořeném v kroku 1
        pod názvem krabičky, tedy pod názvem 
        <classname>SampleBoxModule.ice</classname>.
      </para>
			<programlisting>
/*
SLICE DOCUMENTATION
-------------------
www.zeroc.com

Some general keywords
---------------------
nonmutating
Operations that use the Slice Nonmutating keyword must not modify object state.
idempotent
Operations that use the Slice Idempotent keyword can modify object state, but invoking an operation twice in a row must result in the same object state as invoking it once.

HOW TO GENERATE *.cs FROM *.ice
-------------------------------
Path to Ice/bin directory (e.g. "c:\Ice-2.1.2\bin\") is in PATH.
Execute following command in solution root directory.

$ slice2cs -I../../../slice/ --output-dir ./SampleBoxModules/SampleBoxes/SampleBoxModule/generated ./SampleBoxModules/SampleBoxes/SampleBoxModule/slice/SampleBoxModule.ice

- Path in argument -I is path to "slice" subdirectory of Ferda project.
- Path in argument --output-dir is place for generated *.cs files.
- Following arguments are slice-files to proceed.

See also
$ slice2cs --help
*/

#ifndef	SampleBoxes_SampleBoxModule
#define SampleBoxes_SampleBoxModule

#include &lt;Modules/Common.ice&gt; //some common enumerations and structures
#include &lt;Modules/Exceptions.ice&gt; //some exceptions defined
#include &lt;Modules/BuiltinSequences.ice&gt; //sequences of basic types

module Ferda
{
  module Modules
  {
    module Boxes
    {
      module SampleBoxModules 
      {
        module SampleBoxes
        {
          module SampleBoxModule 
          {
            interface SampleBoxModuleFunctions
            {
              nonmutating string HelloWorld();
            };
          };
        };
      };
    };
  };
};
#endif;
      </programlisting>
			<para>
        První zakomentovaná část kódu popisuje slice (který má v podstatě syntaxi
        jazyka C++ a dává informace o vytvoření C# kódu ze slice. Druhá část už
        je definice rozhraní výstupu krabičky Ferdy.
      </para>
			<para>
        Nejdříve se definuje podobně jako v C++ proměnná 
        <classname>SampleBoxes_SampleBoxModule</classname>. Poté část
        <classname>#include</classname> definuje jiné slice soubory
        použité v tomto souboru. Konečně poslední část definuje interface
        krabičky (funkce poskytované krabičkou). V našem případě je tam pouze
        jedna funkce vracející string.
      </para>
			<para>
        Klíčové slovo <classname>module</classname> definuje modul, ve kterém
        se bude rozhraní nacházet. Je to analogie namespace v C# a proto použijeme
        shodnou strukturu, jak u zdrojových kódů krabiček (použijeme dále).
      </para>
		</section>
		<section>
			<title>3. Zdrojové kódy krabičky</title>
			<para>
        Slice návrh obecné krabičky (všech funkcí které musí krabička
        mít) si můžeme přečíst v <classname>slice\Modules\Modules.ice</classname>.
        Je to řada funkcí, které by měl programátor krabičky impelmentovat.
        Pro usnadnění nabízí Ferda možnost použití pomocných tříd, které
        většinu z těchto funkcí implementují pomocí konfiguračních souborů
        (část 4). Náš postup používá tyto třídy: má to výhodu v obrovském
        usnadnění práce programátora, musíme se však omezit pouze na jazyk C#.
      </para>
			<section>
				<title>BoxInfo</title>
				<para>
          První pomocnou třídou je <classname>BoxInfo</classname>. Tato třída
          implementuje rozhraní <classname>IBoxInfo</classname>, které zahrnuje
          veškeré funkce, které od krabičky požaduje manager modulů a manager
          projektů. Jsou to informace o zásuvkách, vlastnostech či modulech pro
          interakci krabičky. Třída <classname>BoxInfo</classname> větší část
          funkcí načítá z konfiguračních souborů (část 4). Programátor však
          některé funkce implementovat musí:
        </para>
				<programlisting>
using System;
using System.Collections.Generic;
using System.Text;
using Ferda.Modules.Boxes;

namespace Ferda.Modules.Boxes.SampleBoxModules.SampleBoxModule
{
  /// &lt;summary&gt;
  /// This class implements most of functions used by &lt;see cref="T:Ferda.ModulesManager"/&gt;.
  /// For more information &lt;see cref="T:Ferda.Modules.Boxes.BoxInfo"/&gt;.
  /// &lt;/summary&gt;
  /// &lt;seealso cref="T:Ferda.Modules.BoxModuleI"/&gt;
  /// &lt;seealso cref="T:Ferda.Modules.BoxModuleFactoryI"/&gt;
  /// &lt;seealso cref="T:Ferda.Modules.BoxModuleFactoryCreatorI"/&gt;
  internal class BoxInfo : Boxes.BoxInfo
  {
    /// &lt;summary&gt;
    /// Functions creates an object of &lt;see cref="T:Ferda.Modules.IFunctions"&gt;IFuntions&lt;/see&gt;
    /// type that provides functionality of the box
    /// &lt;/summary&gt;
    /// &lt;param name="boxModule"&gt;Current box module&lt;/param&gt;
    /// &lt;param name="iceObject"&gt;ICE stuff&lt;/param&gt;
    /// &lt;param name="functions"&gt;The new created functions object&lt;/param&gt;
    public override void CreateFunctions(Ferda.Modules.BoxModuleI boxModule, out Ice.Object iceObject, out Ferda.Modules.IFunctions functions)
    {
      Functions result = new Functions();
      iceObject = result;
      functions = result;
    }

    /// &lt;summary&gt;
    /// Gets function`s Ice identifiers of the box module.
    /// &lt;/summary&gt;
    /// &lt;returns&gt;
    /// An array of strings representing Ice identifiers
    /// of the box module`s functions.
    /// &lt;/returns&gt;
    /// &lt;example&gt;
    /// Please see an example for &lt;see cref="T:Ferda.Modules.Boxes.IBoxInfo"&gt;IBoxInfo`s&lt;/see&gt;
    /// &lt;see cref="M:Ferda.Modules.Boxes.IBoxInfo.GetBoxModuleFunctionsIceIds()"/&gt;.
    /// &lt;/example&gt;
    public override string[] GetBoxModuleFunctionsIceIds()
    {
      return Functions.ids__;
    }

    /// &lt;summary&gt;
    /// Gets default value for box module user label.
    /// &lt;/summary&gt;
    /// &lt;param name="boxModule"&gt;A module that returns the label&lt;/param&gt;
    /// &lt;returns&gt;The user label&lt;/returns&gt;
    public override string GetDefaultUserLabel(Ferda.Modules.BoxModuleI boxModule)
    {
      return null;
    }

    /// &lt;summary&gt;
    /// Gets the box modules asking for creation.
    /// &lt;/summary&gt;
    /// &lt;param name="localePrefs"&gt;The localization preferences.&lt;/param&gt;
    /// &lt;param name="boxModule"&gt;The box module.&lt;/param&gt;
    /// &lt;returns&gt;
    /// Array of &lt;see cref="T:Ferda.Modules.ModuleAskingForCreation"&gt;
    /// Modules Asking For Creation&lt;/see&gt;.
    /// &lt;/returns&gt;
    public override Ferda.Modules.ModulesAskingForCreation[] GetModulesAskingForCreation(string[] localePrefs, Ferda.Modules.BoxModuleI boxModule)
    {
      return new ModulesAskingForCreation[] { };
    }

    /// &lt;summary&gt;
    /// Gets array of &lt;see cref="T:Ferda.Modules.SelectString"/&gt; as
    /// options for property, whose options are dynamically variable.
    /// &lt;/summary&gt;
    /// &lt;param name="boxModule"&gt;The current module&lt;/param&gt;
    /// &lt;param name="propertyName"&gt;Name of the property&lt;/param&gt;
    /// &lt;returns&gt;String options of the property&lt;/returns&gt;
    public override SelectString[] GetPropertyOptions(string propertyName, BoxModuleI boxModule)
    {
      return null;
    }

    #region Type Identifier

    /// &lt;summary&gt;
    /// This is recomended (not required) to have &lt;c&gt;public const string&lt;/c&gt;
    /// field in the BoxInfo implementation which holds the identifier
    /// of type of the box module.
    /// &lt;/summary&gt;
    public const string typeIdentifier = "SampleBoxModules.SampleBoxModule";

    /// &lt;summary&gt;
    /// Unique identifier of type of Box module
    /// &lt;/summary&gt;
    /// &lt;value&gt;&lt;/value&gt;
    /// &lt;remarks&gt;
    /// This string identifier is parsed i.e. dots (".") are
    /// replaced by &lt;see cref="P:System.IO.Path.DirectorySeparatorChar"/&gt;.
    /// Returned path is combined with application directory`s
    /// &lt;see cref="F:Ferda.Modules.Boxes.BoxInfo.configFilesFolderName"&gt;subdirectory&lt;/see&gt;
    /// and final path is used for getting stored configuration [localization] XML files.
    /// &lt;/remarks&gt;
    protected override string identifier
    {
      get { return typeIdentifier; }
    }

    #endregion

    /* Other functions to override
    * public virtual PropertyValue GetPropertyObjectFromInterface(string propertyName, Ice.ObjectPrx objectPrx)
    * public virtual PropertyValue GetReadOnlyPropertyValue(string propertyName, BoxModuleI boxModule)
    * public virtual bool IsPropertySet(string propertyName, PropertyValue propertyValue)
    * public virtual DynamicHelpItem[] GetDynamicHelpItems(string[] localePrefs, BoxModuleI boxModule)
    * public virtual void RunAction(string actionName, BoxModuleI boxModule)
    * */
  }
}
        </programlisting>
				<para>
          V dlouhý kus kódu obsahuje vše potřebné (i s popisky) pro přetížení třídy
          <classname>BoxInfo</classname> tak, aby nová krabička fungovala.
          Uložíme ho (nejčastěji s názvem <classname>BoxInfo.cs</classname> ale může být i jiný)
          do adresáře <classname>src\Modules\BoxModulesServices\SampleBoxModules\SampleBoxModule</classname>.
          Zkontrolujte si zejména namespace a také identifikátor
          <classname>typeIdentifier</classname>. Každá krabička musí mít
          jedinečný identifikátor, jinak systém Ferda nenastartuje a vyhodí
          výjimku.
        </para>
			</section>
			<section>
				<title>Functions</title>
				<para>
          Druhou pomocnou třídou je třída <classname>Functions</classname>.
          Tato třída implementuje dvě rozhraní, <classname>IFunctions</classname>
          a rozhraní určené slice návrhem. <classname>IFunctions</classname>
          je jednoduché rozhraní, které informuje krabičku o jejich skutečných
          datech. Rozhraní určené slice návrhem generuje Ice ze slice souborů
          definovaných v kroku 2. Pro naše slice rozhraní 
          <classname>SampleBoxModuleFunctions</classname> vygeneruje Ice
          abstraktní třídu <classname>SampleBoxModuleFunctionsDisp_</classname>.
          Následující kód určuje třídu implementující obě rozhraní.
        </para>
				<programlisting>
using System;
using System.Collections.Generic;
using System.Text;

namespace Ferda.Modules.Boxes.SampleBoxModules.SampleBoxModule
{
  /// &lt;summary&gt;
  /// Class is providing ICE functionality of the SampleBoxModule
  /// box module
  /// &lt;/summary&gt;
  class Functions : SampleBoxModuleFunctionsDisp_, Ferda.Modules.IFunctions
  {
    #region ICE functions

    public override string HelloWorld(Ice.Current __current)
    {
      return "Hello World!";
    }

    #endregion

    protected Ferda.Modules.BoxModuleI boxModule;
    protected Ferda.Modules.Boxes.IBoxInfo boxInfo;

    #region IFunctions Members

    /// &lt;summary&gt;
    /// Sets the &lt;see cref="T:Ferda.Modules.BoxModuleI"&gt;box module&lt;/see&gt;
    /// and the &lt;see cref="T:Ferda.Modules.Boxes.IBoxInfo"&gt;box info&lt;/see&gt;.
    /// &lt;/summary&gt;
    /// &lt;param name="boxModule"&gt;The box module.&lt;/param&gt;
    /// &lt;param name="boxInfo"&gt;The box info.&lt;/param&gt;
    void Ferda.Modules.IFunctions.setBoxModuleInfo(Ferda.Modules.BoxModuleI boxModule, Ferda.Modules.Boxes.IBoxInfo boxInfo)
    {
      this.boxModule = boxModule;
      this.boxInfo = boxInfo;
    }

    #endregion
  }
}
        </programlisting>
				<para>
          Tento kód uložíme na do stejného adresáře pod názvem 
          <classname>Functions.cs</classname>.
        </para>
			</section>
		</section>
		<section>
			<title>4. Vytvoření konfigurace a lokalizace krabičky</title>
			<para>
        Kód vytvořený v kroku 3 ještě nebude fungovat správně, neboť chybí
        konfigurace a lokalizace krabičky, se kterou pracuje třída
        <classname>BoxInfo</classname>. Musíme teda vytvořit konfiguraci.
        Kod níže zobrazuje konfiguraci jednoduché krabičky mající pouze
        jednu zásuvku typu integer. 
      </para>
			<programlisting>
&lt;Box&gt;
  &lt;Identifier&gt;SampleBoxModules.SampleBoxModule&lt;/Identifier&gt;
  &lt;IconPath&gt;boxIcon.ico&lt;/IconPath&gt;
  &lt;DesignPath&gt;boxDesign.svg&lt;/DesignPath&gt;
  &lt;Categories&gt;
    &lt;string&gt;Sample&lt;/string&gt;
  &lt;/Categories&gt;
  &lt;Sockets&gt;
    &lt;Socket&gt;
    &lt;Name&gt;IntSocket&lt;/Name&gt;
    &lt;SocketTypes&gt;
    &lt;BoxType&gt;
      &lt;FunctionIceId&gt;::Ferda::Modules::LongTInterface&lt;/FunctionIceId&gt;
    &lt;/BoxType&gt;
    &lt;/SocketTypes&gt;
      &lt;MoreThanOne&gt;false&lt;/MoreThanOne&gt;
    &lt;/Socket&gt;
  &lt;/Sockets&gt;
&lt;/Box&gt;
      </programlisting>
			<para>
        Všechny možnosti konfigurace krabiček jsou popsány v 
        <classname>src\Modules\Core\Boxes\box.xsd</classname>.
        K této krabičce je třeba také nastavit lokalizaci:
      </para>
			<programlisting>
&lt;BoxLocalization&gt;
  &lt;Identifier&gt;SampleBoxModules.SampleBoxModule&lt;/Identifier&gt;
  &lt;Label&gt;Sample box&lt;/Label&gt;
  &lt;Hint&gt;A simple sample box&lt;/Hint&gt;
  &lt;Categories&gt;
    &lt;Category&gt;
      &lt;Name&gt;Sample&lt;/Name&gt;
     &lt;Label&gt;Sample boxes&lt;/Label&gt;
    &lt;/Category&gt;
  &lt;/Categories&gt;
  &lt;Sockets&gt;
    &lt;Socket&gt;
      &lt;Name&gt;IntSocket&lt;/Name&gt;
      &lt;Label&gt;Integer socket&lt;/Label&gt;
      &lt;Hint&gt;An integer socket&lt;/Hint&gt;
    &lt;/Socket&gt;
  &lt;/Sockets&gt;
&lt;/BoxLocalization&gt;
      </programlisting>
			<para>
        Všechny možnosti konfigurace lokalizace krabiček
        jsou popsány v <classname>src\Modules\Core\Boxes\boxLocalization.xsd</classname>.
        Konfiguraci a lokalizaci je poté třeba nahrát na správné místo. 
        Preferovaný postup je přidat konfiguraci do souboru
        <classname>src\Modules\BoxModulesServices\boxes.xml</classname> a
        lokalizaci do souborů
        <classname>src\Modules\BoxModulesServices\boxesLocalization.cs-CZ.xml</classname> a
        <classname>src\Modules\BoxModulesServices\boxesLocalization.en-US.xml</classname>.
        K správnému fungování programu jsou nutné obě lokalizace.
      </para>
			<section>
				<title>Upozornění</title>
				<para>
          Z důvodu špatného fungování utility kompilačního programu je nutné
          vytvořit pro krabičku ikonu a umístnit ji do adresáře se zdrojovým
          kódem krabičky (krok 1). Jinak se nevytvoří v serverové části instalace
          adresář krabičky.
        </para>
			</section>
		</section>
		<section>
			<title>5. Registrace krabičky</title>
			<para>
        Konečně posledním krokem je registrace krabičky. Tu je nutné provést na dvou
        místech. Prvním místem je soubor <classname>Service.cs</classname>.
        Zde je nutné do funkce <classname>registerBoxes</classname> napsat následující
        kód:
        <programlisting>
registerBox(SampleBoxModule.BoxInfo.typeIdentifier, new SampleBoxModule.BoxInfo());
        </programlisting>
        Druhým místem je soubor <classname>application.xml</classname>. Zde je nutné
        přidat do adaptéru replik <classname>SampleBoxModulesReplicaAdapter</classname>
        vytvořeným dříve řádek
        <programlisting>
&lt;object identity="SampleBoxModules.SampleBoxModule" type="::Ferda::Modules::BoxModuleFactoryCreator" /&gt;
        </programlisting>
        Identita objektu musí být shodná s identitou třídy <classname>BoxInfo</classname>,
        jinak se krabička nezobrazí.
      </para>
		</section>
	</section>
	<section>
		<title>Ladění tvorby krabiček</title>
		<para>
      Tomášova diplomka TODO.
    </para>
	</section>
</article>
