<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article lang="en">
  <articleinfo>
    <author>
      <personname>
        <firstname>Martin</firstname>
        <surname>Ralbovský</surname>
      </personname>
      <email>martin.ralbovsky@gmail.com</email>
    </author>
    <pubdate>2006-03-11</pubdate>
    <title>Ferda's tutorial for creating first project</title>
    <titleabbrev>FerdasTutorial</titleabbrev>

    <!--
    <revhistory>
      <revision>
        <revnumber>2.0</revnumber>
        <date>2006-12-25</date>
        <revdescription>
          <para>
            The document is addapted to the 2.0 version of the system. 
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>0.2</revnumber>
        <date>2006-3-22</date>
        <revdescription>
          <para>
            Some little changes and gramatical mistakes corrected
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>0.1</revnumber>
        <date>2006-3-15</date>
        <revdescription>
          <para>
            The actions run through the Module for interaction
          </para>
        </revdescription>
      </revision>
    </revhistory>
    -->
    
  </articleinfo>
  <abstract>
    <para>
      This document was created for beginners in Ferda that don't know how
      to work with the system. It contains a tutorial to create a simple
      4ft task on a trial database of a fictional bank Barbora.
    </para>
  </abstract>
  <section>
    <title>Introduction</title>
    <para>
      Welcome in Ferda :) If you just launched the Ferda program and don't know
      what to do with it, or if you need to learn some of the Ferda basic
      operations, then read carefully this document. We hope that in the end 
      thing will become clearer.
    </para>
  </section>
  <section>
    <title>The Ferda and LISp-Miner system in brief</title>
    <para>
      Ferda is system for mining knowledge from data. It is a successor of
      an older <ulink url="http://lispminer.vse.cz">LISp-Miner</ulink> system.
      The LISp-Miner system has been successfully under development for many 
      years at VŠE (economics university) in Prague. Ferda as well as LISp-Miner
      uses association rule based data mining with improved GUHA style
      procedures. For more theoretical information about the procedures, see the
      <ulink url="http://lispminer.vse.cz">LISp-Miner web pages.</ulink>
    </para>
  </section>
  <section>
    <title>Our example</title>
    <para>
      In this tutorial we try to mine some knowledge from a fictional Barbora bank
      data containing information about loan profitability. We use the most known
      GUHA procedure implemented in Ferda, the 4FT. This procedure uses a fourfold contingency table
      of individual hypotheses verifies its value against defined quantifiers.
      You will find more about the procedure and its parameters later in this 
      tutorial.
    </para>
  </section>
  <section>
    <title>1. Creation of a first box</title>
    <para>
      Ferda is a system that uses so called visual programming for creation of
      its tasks. Visual programming means connecting visual elements on the desktop
      and setting properties of the elements. In Ferda the visual element is called
      a <classname>box</classname>. The panel with all different boxes we can create
      is located on the left bottom edge of the docking environment. It contains
      folders and in the folders, there are boxes that we can create. The data mining
      process usually starts with identification of the data source. For this, 
      we use the <classname>Database</classname> box in the 
      <classname>Datasource</classname> folder. We create our first box by
      clicking on the <classname>Database</classname> box and dragging it onto the
      desktop.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="tutorialMake1Box.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </section>
  <section>
    <title>2. ODBC connection setting and Setting modules</title>
    <para>
      The ODBC interface provides a unified way of connecting to a data source
      for various data types. For our example, we use a fictional Barbora bank
      database with information about loans. You can download the database together
      with Ferda instalation program at
      <ulink url="http://ferda.sourceforge.net/">Ferda home page</ulink>.
    </para>
    <para>
      In order for the <classname>Database</classname> box to work properly, 
      we need to connect it to a data source. The 
      <classname>ODBC connection string</classname> property of the box is designed
      for this purpose. When we click with the left mouse button on the box at
      the desktop, all the properties of the box appear in the
      <classname>Property grid</classname>, the component in the upper right
      part of the docking environment. When we click on the property
      <classname>ODBC connection string</classname>, we can write the connection
      string in there right away, or we can click on the button with three dots
      and use a <classname>Settings module</classname> instead. Ferda uses
      setting modules, when the property setting is somehow complicated. Then an
      ODBC connection dialog appears.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="tutorialOdbc.png" format="PNG"/>
      </imageobject>
    </mediaobject>
    <para>
      We can see all the different data sources connected via the ODBC interface. 
      If you hadn't established the Barbora as a data source, click on 
      <classname>Create ODBC source</classname> on the toolbar. Moreover, you
      can also test the data sources in this dialog by clicking on the 
      <classname>Test</classname> button. Please select the data source representing
      Barbora form the list. 
    </para>
    <note>
      <para>
        Ferda supports only creation of the User and System data source in the 
        first step of tutorial that emerges when you click on 
        <classname>Create ODBC source</classname> - it does not support the
        File data source.
      </para>
      <para>
        For the LISp-Miner experts: While working in Ferda, you do not need to
        define a metabase (usually a Microsoft Access file - LM_Empty.mdb) for
        saving a project and mutual data exchange between different modules
        of the system. User in Ferda does not notice metabase usage, he works
        only with the project files (*.xfp). (Implementation: whenever the
        Ferda boxes execute LISp-Miner modules, they give metabase as a 
        parameter to the modules generated before. After the LISp module
        finishes its work, the metabase is deleted.)
      </para>
    </note>
  </section>
  <section>
    <title>3. Data matrix creation and Boxes asking for creation</title>
    <para>
      We have already a database created and correctly connected to a data
      source. Now we can create other boxes out of these boxes. To do this, 
      we use a mechanism called <classname>Boxes asking for creation</classname>.
      For example the <classname>Database</classname> box represents a data
      source that can contain several tables. In this case, the Barbora 
      database contains one table named <classname>Loans</classname>.
      Therefore, we can create a box <classname>Data matrix</classname>
      out of the <classname>Database</classname> box. We do it by clicking
      on Barbora box with the left button and from the context menu of the
      box we choose the <classname>Boxes asking for creation</classname> group
      and from there the <classname>Data matrix Loans</classname> item.
      A new box representing the table is going to be created. 
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="tutorialBoxesAsking.png" format="PNG"/>
      </imageobject>
    </mediaobject>
    <para>
      The <classname>Loans</classname> box can also be created without using the
      Boxes asking for creation. An equivalent procedure would be dragging a new
      (blank) <classname>Data matrix</classname> box from the New boxes component,
      then connecting the output connector of the <classname>Barbora</classname>
      box with the input connetor of the new <classname>Data matrix</classname>
      box and setting the <classname>Name</classname> value to 
      <classname>Loans</classname>.
    </para>
    <para>
      For the Ferda data mining procedures to work properly, we have to select the
      primary key of the data matrix we are working with. Therefore we select
      the <classname>loan_id</classname> value of the <classname>Primary key</classname>
      property.
    </para>
  </section>
  <section>
    <title>5. Attributes creation</title>
    <para>
      The boxes asking for creation principle can be applied also to other boxes
      then <classname>Database</classname>. For example the
      <classname>Data matrix</classname> table offers all the containing columns
      to be created. The table <classname>Loans</classname> contains information
      about the profitability of loans to clients with several characteristics.
      A manager of our fictional bank could be interested for instance in the 
      relationship of income height and the profitability of the loan. We can 
      help him to solve this task in Ferda.
    </para>
    <para>
      At first we create the <classname>Column</classname> boxes for the 
      columns <classname>Salary</classname> providing the income facts
      and <classname>status</classname> for the loan profitability. 
      Then we create attributes out of the columns. Attribute is a suitable
      categorization of the domain values. In the <classname>Salary</classname>
      column properties, we can see that there are 76 different values in the
      column. Apparently it is not suitable to take all the different values
      into account. Instead we could create only some intervals that would cover
      all the possible values. The <classname>Equidistant intervals attribute</classname>
      box asking for creation from a <classname>Column</classname> box serves
      just this purpose. It takes all the values in the column and divides them
      into x different intervals where x can be edited in the Property grid.
      Well, let us create this box and fill number 1000 into the
      <classname>Length</classname> property. Now we have the 1000 czech crowns
      long intervals.
    </para>
    <para>
      On the other hand, the <classname>status</classname> column contains only
      4 different values. So it makes sense to create a different category for
      each value. We use the <classname>Each value one category</classname> box
      asking for creation. After the creation we have an attribute containing
      4 categories. 
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="tutorialAttributes.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </section>
  <section>
    <title>6. The 4FT task completion</title>
    <para>
      Let us continue creating our task. We need to define the atoms, which
      are the basic building blocks for creation of <emphasis>boolean
      attributes</emphasis> that serve as an input for the 4FT procedure.
      We choose the <classname>Atom setting</classname> out of the
      <classname>Boxes asking for creation</classname> menu of both of the
      attributes. We can leave the default setting of the properties.
    </para>
    <para>
      With the atoms created, let us explain the 4FT procedure a little more.
      The 4ft procedure is the most widely used and the most intuitive procedure
      out of all the GUHA procedures implemented in Ferda. There are 3 boolean
      attributes named
      <classname>antecedent</classname>, <classname>succedent</classname> and
      <classname>condition</classname> coming into the procedure as parameters.
      The procedure examines the relation between antecedent and succedent under
      a given condition. We also use a <classname>4FT quantifier</classname> for
      the task. It is a formula defined on the fourfold table and the hypotheses
      are verified against this formula. We use the most common
      <classname>Founded implication</classname> 4F quantifier. This quantifier
      contains one input parameter <classname>p</classname> and test if at least
      <classname>p</classname> percent of objects that satisfies the antecedent
      satisfies also the succedent. In other words, if when the object satisfies
      the antecedent, it also satisfies the succedent in at least
      <classname>p</classname> percent of the cases.
    </para>
    <para>
      Now we have everything set for completing our task. From the 
      <classname>New boxes</classname> component from the
      <classname>GUHA Mining->Tasks</classname> we drag the box
      <classname>4FT-Task</classname> behind the already constructed atoms
      on the desktop. This box has four input sockets:
      <classname>Antecedent</classname>
      <classname>Succedent</classname>
      <classname>Condition</classname> and the 
      <classname>Quantifiers</classname>. We connect into the 
      <classname>Antecedent</classname> the atom setting box
      created from the <classname>Salary</classname> column, into the
      <classname>Succedent</classname> we connect the 
      atom setting box created from the <classname>status</classname>
      column. We won't use the condition in our task. Finally we connect a
      quantifier into the first socket. We connect there the 
      <classname>Founded implication</classname> quantifier that can be
      found in the <classname>Quantifiers</classname> folder of the
      <classname>4ft-Miner</classname> folder. The task is ready to
      run.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="tutorial4FTTask.png" format="PNG"/>
      </imageobject>
    </mediaobject>    
  </section>
  <section>
    <title>7. Running the 4FT and Actions</title>
    <para>
      Executing the action of boxes is yet another usage of the box.
      Actions of the box are accessible from the <classname>Actions</classname>
      item of the box context menu.  Let us
      choose the <classname>Run</classname> item from the
      <classname>Actions</classname> submenu of the box.
    </para>
    <para>
      When we run the task, a progress bar with generating information
      is shown. Then we select the <classname>4ft Task</classname>
      box on the desktop once again.
      As one can notice, the property values of the box have changed. The
      <classname>State</classname> property shows the <classname>Completed</classname>
      value. Unfortunately, none of the 20 verifications passed the quantifier
      conditions. We change the quantifier parameter <classname>p</classname>
      little from 0,9 to 0,8 and run the task again. Great we got a hypothesis.
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="tutorialProgress.png" format="PNG"/>
      </imageobject>
    </mediaobject>    
  </section>
  <section>
    <title>8. Displaying the results and the Modules for Interaction</title>
    <para>
      With the aid of <classname>Modules for interaction</classname> the 
      boxes show their content to the user. Therefore, in order to display 
      our hypothesis, we use the <classname>Result browser module</classname>
      of the <classname>4ft Task</classname> box. In the boxes context menu,
      we choose it in the <classname>Modules for interaction</classname>
      submenu. Afterwards, a table with hypotheses is shown and underneath
      a place for graph. If we choose our (only) hypothesis, the graph showing
      the contingency table emerges in the lower part and hypothesis details
      are displayed in the Property grid. 
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="tutorialContingency.png" format="PNG"/>
      </imageobject>
    </mediaobject>    
  </section>
  <section>
    <title>9. Result interpretation</title>
    <para>
      Out hypothesis says that the couple antecedent (salary between 11110 and
      12110) and succedent (status C) satisfies the founded implication quantifier
      on 80%. Which means if a client has this salary, it is a quite high
      probability that his final status will be C. On the first sight, this may
      seem as a good result. But when we look closer at the contingency table, 
      we see that the support of the hypotheses is very small - only 45 out of 
      (about) 6000 objects satisfy the antecedent (even less then 1 percent).
      When we display the the <classname>Attribute frequency module</classname>
      of the salary attribute we see unequal distribution of values. One
      thing to do is to use equifrequency attribute or we can modify the 
      quantifiers... Now you know how to work with Ferda to get the best results.
      So good luck!
    </para>
  </section>
</article>